default namespace = "http://www.mei-c.org/"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace xhtml = "http://www.w3.org/1000/xhtml"

# Schema generated from ODD source 2009-08-29T17:08:26Z. 
meiVersion = xsd:token { pattern = "1.9b" }
data.BEAT = xsd:decimal { minInclusive = "0" }
data.BEATRPT.REND =
  xsd:positiveInteger { pattern = "4|8|16|32|64|128" }
  | xsd:token { pattern = "mixed" }
data.BEND.AMOUNT =
  xsd:decimal { pattern = "1|\.25|\.5|\.75" }
  | xsd:token { pattern = "full" }
data.COLOR =
  xsd:token {
    pattern =
      "(x[0-9A-Fa-f]{6,6}|aqua|black|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)"
  }
data.DEGREES = xsd:decimal
data.FINGER.FRET =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "4" }
  | xsd:token { pattern = "x|o" }
data.FRET =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "5" }
data.INTEGERNONNEGATIVE = xsd:nonNegativeInteger
data.INTEGERPOSITIVE = xsd:positiveInteger
data.ISODATE =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
data.ISOTIME = xsd:time
data.MEASUREBEAT =
  xsd:token { pattern = "([0-9]+m *\+ *)?[0-9]+(\.?[0-9]*)?" }
data.MIDITEMPO =
  xsd:positiveInteger { minInclusive = "10" maxInclusive = "1000" }
data.MODUSMAIOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.MODUSMINOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.NUMBER = xsd:decimal
data.NUMBERPOSITIVE = xsd:decimal { minInclusive = "1" }
data.OCTAVE.DIS = xsd:integer { pattern = "8|15|22" }
data.ORIENTATION = xsd:token { pattern = "reversed|90CW|90CCW" }
data.PAGE.PANELS =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "2" }
data.PERCENT = xsd:token { pattern = "[0-9]+(\.?[0-9]*)?%" }
data.PROLATIO =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.RATIO =
  xsd:token { pattern = "[0-9]+(\.?[0-9]*)?:[0-9]+(\.?[0-9]*)?" }
data.SLASH =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }
data.STRINGNUMBER = xsd:positiveInteger
data.TEMPOVALUE = xsd:positiveInteger
data.TEMPUS =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.TSTAMPOFFSET = text
data.URI = xsd:anyURI
data.ACCIDENTAL.EXPLICIT =
  "s"
  | "f"
  | "ss"
  | "x"
  | "ff"
  | "xs"
  | "tb"
  | "n"
  | "nf"
  | "ns"
  | "su"
  | "sd"
  | "fu"
  | "fd"
  | "nu"
  | "nd"
data.ACCIDENTAL.IMPLICIT = "s" | "f" | "ss" | "ff" | "n"
data.ARTICULATION =
  "acc"
  | "stacc"
  | "ten"
  | "stacciss"
  | "marc"
  | "marc-stacc"
  | "acc-marc"
  | "loure"
  | "spicc"
  | "rip"
  | "doit"
  | "plop"
  | "fall"
  | "bend"
  | "flip"
  | "smear"
  | "dnbow"
  | "upbow"
  | "harm"
  | "snap"
  | "fingernail"
  | "damp"
  | "dampall"
  | "open"
  | "stop"
  | "dbltongue"
  | "trpltongue"
  | "heel"
  | "toe"
  | "tap"
  | "pluck"
  | "dot"
  | "stroke"
data.ARTICULATIONS = list { data.ARTICULATION* }
data.AUGMENTDOT = xsd:nonNegativeInteger { maxInclusive = "4" }
data.BARPLACE = "mensur" | "staff" | "takt"
data.BARRENDITION =
  "dashed"
  | "dotted"
  | "dbl"
  | "dbldashed"
  | "dbldotted"
  | "end"
  | "invis"
  | "rptstart"
  | "rptboth"
  | "rptend"
  | "single"
data.BEAM = xsd:token { pattern = "[i|m|t][1-6]" }
data.BEAMS = list { data.BEAM+ }
data.BOOLEAN = "true" | "false"
data.CERTAINTY = "high" | "medium" | "low" | "unknown"
data.CLEFLINE = data.INTEGERPOSITIVE
data.CLEFSHAPE = "G" | "GG" | "F" | "C" | "perc" | "TAB"
data.CLEFTRAN = "8va" | "8vb" | "15va"
data.CLUSTER = "whbox" | "blbox"
data.CURVERENDITION = "medium" | "wide" | "dashed" | "dotted"
data.DURATION.BASE =
  "long"
  | "breve"
  | "1"
  | "2"
  | "4"
  | "8"
  | "16"
  | "32"
  | "64"
  | "128"
  | "256"
  | "512"
  | "1024"
  | "2048"
data.DURATION.MEN =
  "maxima"
  | "longa"
  | "brevis"
  | "semibrevis"
  | "minima"
  | "semiminima"
  | "fusa"
  | "semifusa"
data.DURATION = data.DURATION.BASE
data.DURATION.MENSURAL = data.DURATION.MEN
data.DURATIONS = data.DURATION.BASE | data.DURATION.MEN
data.ENCLOSURE = "paren" | "brack"
data.FONTFAMILY = xsd:token
data.FONTNAME = xsd:token
data.FONTSTYLE = "ital" | "normal" | "oblique"
data.FONTWEIGHT = "bold"
data.XPATH = xsd:token
data.XPOINTER = xsd:token
data.FRAGMENT = data.XPATH | data.XPOINTER
data.FRETNUMBER = xsd:nonNegativeInteger { maxInclusive = "9" }
data.GLISSANDO = "i" | "m" | "t"
data.GRACE = "acc" | "unacc"
data.HEADSHAPE =
  "quarter"
  | "half"
  | "whole"
  | "dblwhole"
  | "filldiamond"
  | "diamond"
  | "dwdiamond"
  | "fillisotriangle"
  | "isotriangle"
  | "dwhisotriangle"
  | "fillpiewedge"
  | "piewedge"
  | "dwhpiewedge"
  | "fillrectangle"
  | "rectangle"
  | "dwhrectangle"
  | "fillrtriangle"
  | "rtriangle"
  | "dwrtriangle"
  | "fillurtriangle"
  | "urtriangle"
  | "dwurtriangle"
  | "fillsemicircle"
  | "semicircle"
  | "dwsemicircle"
  | "fillslash"
  | "slash"
  | "dwslash"
  | "x"
  | "blank"
  | "circlex"
  | "cross"
data.INEUMENAME =
  "pessubpunctis"
  | "climacus"
  | "scandicus"
  | "bistropha"
  | "tristropha"
  | "pressusminor"
  | "pressusmaior"
  | "pressusliquescens"
  | "virgastrata"
data.INEUMEFORM =
  "liquescent1"
  | "liquescent2"
  | "tied"
  | "tiedliquescent1"
  | "tiedliquescent2"
data.KEYSIGNATURE = xsd:token { pattern = "mixed|0|[1-7][f|s]" }
data.LAYERSCHEME = "1" | "2o" | "2f" | "3o" | "3f"
data.LIGATUREFORM = "recta" | "obliqua"
data.LINERENDITION =
  "narrow" | "medium" | "wide" | "dashed" | "dotted" | "wavy"
data.MENSURATIONSIGN = "C" | "O"
data.METERSIGN = "common" | "cut"
data.MIDICHANNEL = xsd:positiveInteger { maxInclusive = "16" }
data.MIDIVALUE = xsd:nonNegativeInteger { maxInclusive = "127" }
data.MODE =
  "major"
  | "minor"
  | "dorian"
  | "phrygian"
  | "lydian"
  | "mixolydian"
  | "aeolian"
  | "locrian"
data.MUSICFONT = xsd:token
data.OCTAVE = xsd:nonNegativeInteger { maxInclusive = "9" }
data.PGSCALE = data.PERCENT | data.RATIO
data.PGUNITS = "in" | "cm" | "mm"
data.PITCHCLASS = xsd:nonNegativeInteger { maxInclusive = "11" }
data.PITCHNAME = xsd:token { pattern = "[a-g]" }
data.PITCHNAME.GES = xsd:token { pattern = "[a-g]|none" }
data.PITCHNUMBER = data.INTEGERNONNEGATIVE
data.PLIST = xsd:IDREFS
data.PLACE = "above" | "below"
data.SIZE = "normal" | "cue"
data.SLUR = xsd:token { pattern = "[i|m|t][1-6]" }
data.SLURS = list { data.SLUR+ }
data.SLURDIRECTION = "up" | "down"
data.STAFFLOC = data.INTEGERNONNEGATIVE
data.STEMDIRECTION = "up" | "down"
data.STEMMODIFIER =
  "1slash"
  | "2slash"
  | "3slash"
  | "4slash"
  | "5slash"
  | "6slash"
  | "sprech"
  | "z"
data.STEMPOSITION = "left" | "right" | "center"
data.TEMPERAMENT = "equal" | "just" | "mean"
data.TEXTRENDITION =
  "box"
  | "circle"
  | "dblunderline"
  | "none"
  | "quoted"
  | "smcaps"
  | "strike"
  | "sub"
  | "sup"
  | "underline"
data.TIE = xsd:token { pattern = "[i|m|t]" }
data.TIEDIRECTION = "up" | "down"
data.TUPLET = xsd:token { pattern = "[i|m|t][1-6]" }
data.UNEUMENAME =
  "punctum"
  | "virga"
  | "pes"
  | "clivis"
  | "torculus"
  | "torculusresupinus"
  | "porrectus"
  | "porrectusflexus"
  | "apostropha"
  | "oriscus"
data.UNEUMEFORM =
  "liquescent1"
  | "liquescent2"
  | "liquescent3"
  | "quilismatic"
  | "rectangular"
  | "rhombic"
  | "tied"
data.VISUALOFFSET = data.NUMBER
att.alignment.attributes = att.alignment.attribute.when
att.alignment.attribute.when =
  
  ## indicates the point of occurrence along a timeline. Its value must be the ID of
  ##                 a when element.
  attribute when { xsd:IDREFS }?
att.altsym.attributes = att.altsym.attribute.altsym
att.altsym.attribute.altsym =
  
  ## provides a way of pointing to a user-defined symbol. It must contain an ID of a
  ##                 symboldef element elsewhere in the document.
  attribute altsym { xsd:IDREF }?
att.bibl.attributes = att.bibl.attribute.analog
att.bibl.attribute.analog =
  
  ## contains a reference to a field or element in another descriptive encoding
  ##                 system to which an MEI element is comparable. Mapping elements from one system to
  ##                 another may help a repository harvest selected data from the MEI file to build a
  ##                 basic catalog record. The encoding system from which fields are taken must be
  ##                 specified. When possible, subfields as well as fields should be specified, e.g.,
  ##                 subfields within MARC fields.
  attribute analog { text }?
att.color.attributes = att.color.attribute.color
att.color.attribute.color =
  
  ## used to indicate visual appearance. Do not confuse this with the musical term
  ##                 'color' as used in pre-CMN notation.
  attribute color { data.COLOR }?
att.common.anl.attributes =
  att.alignment.attributes, att.common.anl.attribute.corresp
att.common.anl.attribute.corresp =
  
  ## used to point to other events or control events that correspond to this event in
  ##                 some fashion.
  attribute corresp { xsd:IDREFS }?
att.common.attributes = att.common.attribute.id, att.common.attribute.n
att.common.attribute.id =
  
  ## regularizes the naming of an element and thus facilitates building links between
  ##                 it and other resources. Each id attribute within a document must have a unique
  ##                 value.
  attribute id { xsd:ID }?
att.common.attribute.n =
  
  ## provides a label (name or number) for an element. While its value need not be
  ##                 unique, it is required to be a single token.
  attribute n { xsd:NMTOKEN }?
att.controlevent.attributes =
  att.controlevent.attribute.layer,
  att.controlevent.attribute.next,
  att.controlevent.attribute.plist,
  att.controlevent.attribute.prev,
  att.controlevent.attribute.staff,
  att.controlevent.attribute.tstamp,
  att.controlevent.attribute.tstamp.ges,
  att.controlevent.attribute.tstamp.real
att.controlevent.attribute.layer =
  
  ## signifies the layer within which the control event is active.
  attribute layer { data.INTEGERPOSITIVE }?
att.controlevent.attribute.next =
  
  ## indicates the next event in a series of control events.
  attribute next { xsd:IDREFS }?
att.controlevent.attribute.plist =
  
  ## may contain ID references or xPointer fragment identifiers that identify logical
  ##                 events that participate in the control event, such as, notes under a phrase
  ##                 mark.
  attribute plist { data.PLIST }?
att.controlevent.attribute.prev =
  
  ## indicates the previous event in a series of control events.
  attribute prev { xsd:IDREFS }?
att.controlevent.attribute.staff =
  
  ## signifies the staff within a control event is active.
  attribute staff { data.INTEGERPOSITIVE }?
att.controlevent.attribute.tstamp =
  
  ## encodes the onset time of a musical feature in terms of musical time, i.e.,
  ##                 beats[.fractional beat part]
  attribute tstamp { data.BEAT }?
att.controlevent.attribute.tstamp.ges =
  
  ## records the onset time in pulses per quarter note (ppq, MusicXML divisions, or
  ##                 MIDI clicks) since the start of the measure.
  attribute tstamp.ges { data.INTEGERNONNEGATIVE }?
att.controlevent.attribute.tstamp.real =
  
  ## records the onset time as a real-time offset, i.e., HH:MM:SS.ss, since the
  ##                 beginning of the file.
  attribute tstamp.real { data.ISOTIME }?
att.coordinated.attributes =
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry
att.coordinated.attribute.ulx =
  
  ## indicates the upper-left corner x coordinate.
  attribute ulx { data.INTEGERNONNEGATIVE }?
att.coordinated.attribute.uly =
  
  ## indicates the upper-left corner y coordinate.
  attribute uly { data.INTEGERNONNEGATIVE }?
att.coordinated.attribute.lrx =
  
  ## indicates the lower-right corner x coordinate.
  attribute lrx { data.INTEGERNONNEGATIVE }?
att.coordinated.attribute.lry =
  
  ## indicates the lower-left corner x coordinate.
  attribute lry { data.INTEGERNONNEGATIVE }?
att.crit.attributes =
  att.crit.attribute.cause,
  att.crit.attribute.hand,
  att.crit.attribute.resp,
  att.crit.attribute.seq,
  att.crit.attribute.source
att.crit.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate
  ##                 typology of possible origins.
  attribute cause { xsd:NMTOKEN }?
att.crit.attribute.hand =
  
  ## signifies the hand responsible for a particular reading in a witness. The value
  ##                 of hand should correspond to the ID of a hand element given elsewhere in the
  ##                 document.
  attribute hand { xsd:IDREF }?
att.crit.attribute.resp =
  
  ## The editor(s) responsible for asserting a particular reading in a witness may be
  ##                 recorded in the resp attribute. The value of resp must point to one or more of the
  ##                 identifiers declared in the document header, associated with a person asserted as
  ##                 responsible for some aspect of the text's creation, transcription, editing, or
  ##                 encoding.
  attribute resp { xsd:IDREFS }?
att.crit.attribute.seq =
  
  ## provides an integer indicating the position of this reading in a sequence, when
  ##                 there is reason to presume a sequence of the variant readings.
  attribute seq { data.INTEGERPOSITIVE }?
att.crit.attribute.source =
  
  ## contains a list of one or more pointers indicating the sources which attest to a
  ##                 given reading. Each value should correspond to the ID of a source element given
  ##                 elsewhere in the document.
  attribute source { xsd:IDREFS }?
att.date.attributes =
  att.date.attribute.calendar,
  att.date.attribute.cert,
  att.date.attribute.from,
  att.date.attribute.notafter,
  att.date.attribute.notbefore,
  att.date.attribute.reg,
  att.date.attribute.to
att.date.attribute.calendar =
  
  ## indicates the system or calendar to which the date belongs, for example,
  ##                 Gregorian, Julian, Roman, Mosaic, Revolutionary, Islamic, etc.
  attribute calendar { xsd:NMTOKEN }?
att.date.attribute.cert =
  
  ## indicates the degree of precision to be attributed to the date.
  attribute cert { data.CERTAINTY }?
att.date.attribute.from =
  
  ## contains the starting point of a date range.
  attribute from { data.ISODATE }?
att.date.attribute.notafter =
  
  ## contains an upper boundary for an uncertain date.
  attribute notafter { data.ISODATE }?
att.date.attribute.notbefore =
  
  ## contains a lower boundary for an uncertain date.
  attribute notbefore { data.ISODATE }?
att.date.attribute.reg =
  
  ## gives the value of a date in standard ISO form.
  attribute reg { data.ISODATE }?
att.date.attribute.to =
  
  ## contains the end point of a date range.
  attribute to { data.ISODATE }?
att.edit.attributes =
  att.edit.attribute.cert,
  att.edit.attribute.evidence,
  att.edit.attribute.resp,
  att.edit.attribute.source
att.edit.attribute.cert =
  
  ## signifies the degree of certainty associated with the intervention or
  ##                 interpretation.
  attribute cert { data.CERTAINTY }?
att.edit.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of
  ##                 the intervention or interpretation. Suggested values include: 'internal',
  ##                 'external', 'conjecture'.
  attribute evidence { xsd:NMTOKEN }?
att.edit.attribute.resp =
  
  ## indicates responsibility for the identification or content within the element to
  ##                 which it is attached. It must point to one or more of the identifiers declared in
  ##                 the document header, associated with a person asserted as responsible for some
  ##                 aspect of the text's creation, transcription, editing, or encoding.
  attribute resp { xsd:IDREFS }?
att.edit.attribute.source =
  
  ## contains a list of one or more pointers indicating the sources which support the
  ##                 given reading.
  attribute source { xsd:IDREFS }?
att.event.attributes =
  att.event.attribute.layer,
  att.event.attribute.next,
  att.event.attribute.prev,
  att.event.attribute.staff,
  att.event.attribute.tstamp,
  att.event.attribute.tstamp.ges,
  att.event.attribute.tstamp.real
att.event.attribute.layer =
  
  ## signifies the layer within which the control event is active.
  attribute layer { data.INTEGERPOSITIVE }?
att.event.attribute.next =
  
  ## indicates the next event in a series of control events.
  attribute next { xsd:IDREFS }?
att.event.attribute.prev =
  
  ## indicates the previous event in a series of control events.
  attribute prev { xsd:IDREFS }?
att.event.attribute.staff =
  
  ## signifies the staff within a control event is active.
  attribute staff { data.INTEGERPOSITIVE }?
att.event.attribute.tstamp =
  
  ## encodes the onset time of a musical feature in terms of musical time, i.e.,
  ##                 beats[.fractional beat part]
  attribute tstamp { data.BEAT }?
att.event.attribute.tstamp.ges =
  
  ## records the onset time in pulses per quarter note (ppq, MusicXML divisions, or
  ##                 MIDI clicks) since the start of the measure.
  attribute tstamp.ges { data.INTEGERNONNEGATIVE }?
att.event.attribute.tstamp.real =
  
  ## records the onset time as a real-time offset, i.e., in HH:MM:SS.ss format, since
  ##                 the beginning of the file.
  attribute tstamp.real { data.ISOTIME }?
att.facsimile.attributes = att.facsimile.attribute.facs
att.facsimile.attribute.facs =
  
  ## permits element to reference an image or image zone which corresponds to the
  ##                 element.
  attribute facs { xsd:IDREFS }?
att.link.common.attributes =
  att.link.common.attribute.actuate,
  att.link.common.attribute.role,
  att.link.common.attribute.show,
  att.link.common.attribute.targettype,
  att.link.common.attribute.title
att.link.common.attribute.actuate =
  
  ## defines whether a link occurs automatically or must be requested by the user. It
  ##                 is used in conjunction with the show attribute to determine link behavior.
  attribute actuate {
    
    ##
    "onLoad"
    | 
      ##
      "onRequest"
    | 
      ##
      "other"
    | 
      ##
      "none"
  }?
att.link.common.attribute.role =
  
  ## indicates a property that the entire link has. The value of the role attribute
  ##                 must be a URI reference as defined in [IETF RFC 2396], except that if the URI scheme
  ##                 used is allowed to have absolute and relative forms, the URI portion must be
  ##                 absolute. The URI reference identifies some resource that describes the intended
  ##                 property. When no value is supplied, no particular role value is to be
  ##                 inferred.
  attribute role { xsd:anyURI }?
att.link.common.attribute.show =
  
  ## defines whether a remote resource that is the target of a link appears at the
  ##                 point of the link, replaces the existing link, or appears in a new window.
  attribute show {
    
    ##
    "new"
    | 
      ##
      "replace"
    | 
      ##
      "other"
    | 
      ##
      "none"
  }?
att.link.common.attribute.targettype =
  
  ## in contrast with the role attribute, allows the target resource to be
  ##                 characterized, using any convenient classification scheme or typology.
  attribute targettype { xsd:NMTOKEN }?
att.link.common.attribute.title =
  
  ## contains a human-readable description of the entire link. A value is optional;
  ##                 if a value is supplied, it should contain a string that describes the resource. The
  ##                 use of this information is highly dependent on the type of processing being done. It
  ##                 may be used, for example, to make titles available to applications used by visually
  ##                 impaired users, or to create a table of links, or to present help text that appears
  ##                 when a user lets a mouse pointer hover over a starting resource.
  attribute title { text }?
att.link.external.attributes =
  att.link.external.attribute.entityref,
  att.link.external.attribute.fragment,
  att.link.external.attribute.href
att.link.external.attribute.entityref =
  
  ## references a previously-declared entity.
  attribute entityref { xsd:ENTITY }?
att.link.external.attribute.fragment =
  
  ## permits identification of one or more sub-parts within the document being
  ##                 pointed to.
  attribute fragment { data.FRAGMENT }?
att.link.external.attribute.href =
  
  ## allows the use of an previously-undeclared URI.
  attribute href { data.URI }?
att.link.internal.attributes = att.link.internal.attribute.plist
att.link.internal.attribute.plist =
  
  ## contains an ID reference for each of the participants in a collection of
  ##                 elements.
  attribute plist { data.PLIST }?
att.midi.event.attributes =
  att.midi.event.attribute.layer,
  att.midi.event.attribute.staff,
  att.midi.event.attribute.tstamp
att.midi.event.attribute.layer =
  
  ## signifies the layer to which a control event applies.
  attribute layer { data.INTEGERPOSITIVE }?
att.midi.event.attribute.staff =
  
  ## signifies the staff to which a control event applies.
  attribute staff { data.INTEGERPOSITIVE }?
att.midi.event.attribute.tstamp =
  
  ## encodes the onset time of a musical feature in terms of musical time, i.e.,
  ##                 beats[.fractional beat part]
  attribute tstamp { data.BEAT }?
att.name.attributes =
  att.name.attribute.authority,
  att.name.attribute.key,
  att.name.attribute.reg
att.name.attribute.authority =
  
  ## contains the name of the list from which a controlled value is taken, such as
  ##                 the Thesaurus of Geographic Names (TGN), etc.
  attribute authority { text }?
att.name.attribute.key =
  
  ## used to record a value which serves as a primary key in an external
  ##                 database.
  attribute key { xsd:NMTOKEN }?
att.name.attribute.reg =
  
  ## used to record a regularized form of the name.
  attribute reg { text }?
att.nextprev.attributes =
  att.nextprev.attribute.next, att.nextprev.attribute.prev
att.nextprev.attribute.next =
  
  ## used to point to the next control event(s) in a user-defined collection.
  attribute next { xsd:IDREFS }?
att.nextprev.attribute.prev =
  
  ## points to the previous event(s) in a user-defined collection.
  attribute prev { xsd:IDREFS }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## captures the placement of the item with respect to the staff with which it is
  ##                 associated.
  attribute place { data.PLACE }?
att.startendid.attributes =
  att.startendid.attribute.endid, att.startendid.attribute.startid
att.startendid.attribute.endid =
  
  ## indicates the final element in the sequence.
  attribute endid { xsd:IDREF }?
att.startendid.attribute.startid =
  
  ## holds a reference to the first element in the sequence.
  attribute startid { xsd:IDREF }?
att.lang.attributes = att.lang.attribute.lang
att.lang.attribute.lang =
  
  ## identify the language of the word or text phrase marked. Its value must be the
  ##                 identifier of a language element supplied in the MEI header of the current
  ##                 document.
  attribute lang { xsd:IDREF }?
att.trans.attributes = att.trans.attribute.hand, att.trans.attribute.seq
att.trans.attribute.hand =
  
  ## signifies the hand of the agent which made the intervention. Its value must be
  ##                 the ID of a hand element declared in the header.
  attribute hand { xsd:IDREF }?
att.trans.attribute.seq =
  
  ## used to assign a sequence number related to the order in which the encoded
  ##                 features carrying this attribute are believed to have occurred.
  attribute seq { data.INTEGERPOSITIVE }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification
  ##                 scheme or typology.
  attribute type { xsd:NMTOKEN }?
att.typed.attribute.subtype =
  
  ## provide any sub-classification for the element, additional to that given by its
  ##                 type attribute.
  attribute subtype { xsd:NMTOKEN }?
att.typography.attributes =
  att.typography.attribute.fontfam,
  att.typography.attribute.fontname,
  att.typography.attribute.fontsize,
  att.typography.attribute.fontstyle,
  att.typography.attribute.fontweight
att.typography.attribute.fontfam =
  
  ## contains the name of a font-family.
  attribute fontfam { data.FONTFAMILY }?
att.typography.attribute.fontname =
  
  ## records the name of the font.
  attribute fontname { data.FONTNAME }?
att.typography.attribute.fontsize =
  
  ## indicates the size of the font in printers' points, i.e., 1/72ths of an
  ##                 inch.
  attribute fontsize { data.NUMBER }?
att.typography.attribute.fontstyle =
  
  ## records the style of the font, i.e, italic, oblique, or normal.
  attribute fontstyle { data.FONTSTYLE }?
att.typography.attribute.fontweight =
  
  ## used to indicate bold type.
  attribute fontweight { data.FONTWEIGHT }?
att.visualoffset.ho.attributes = att.visualoffset.ho.attribute.ho
att.visualoffset.ho.attribute.ho =
  
  ## records a horizontal adjustment of the entity's programmatically-determinded
  ##                 location in terms of interline distance; that is, units of 1/2 the distance between
  ##                 adjacent staves.
  attribute ho { data.VISUALOFFSET }?
att.visualoffset.to.attributes = att.visualoffset.to.attribute.to
att.visualoffset.to.attribute.to =
  
  ## records a timestamp adjustment of the entity's programmatically-determined
  ##                 location.
  attribute to { data.TSTAMPOFFSET }?
att.visualoffset.vo.attributes = att.visualoffset.vo.attribute.vo
att.visualoffset.vo.attribute.vo =
  
  ## records the vertical adjustment of the entity's programmatically-determined
  ##                 location in terms of interline distance; that is, units of 1/2 the distance between
  ##                 adjacent staves.
  attribute vo { data.VISUALOFFSET }?
att.visualoffset.attributes =
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.visualoffset.vo.attributes
att.visualoffset2.ho.attributes =
  att.visualoffset2.ho.attribute.startho,
  att.visualoffset2.ho.attribute.endho
att.visualoffset2.ho.attribute.startho =
  
  ## records the horizontal adjustment of the entity's programmatically-determined
  ##                 start point.
  attribute startho { data.VISUALOFFSET }?
att.visualoffset2.ho.attribute.endho =
  
  ## records the horizontal adjustment of the entity's programmatically-determined
  ##                 end point.
  attribute endho { data.VISUALOFFSET }?
att.visualoffset2.to.attributes =
  att.visualoffset2.to.attribute.startto,
  att.visualoffset2.to.attribute.endto
att.visualoffset2.to.attribute.startto =
  
  ## records a timestamp adjustment of the entity's programmatically-determined start
  ##                 point.
  attribute startto { data.TSTAMPOFFSET }?
att.visualoffset2.to.attribute.endto =
  
  ## records a timestamp adjustment of the entity's programmatically-determined end
  ##                 point.
  attribute endto { data.TSTAMPOFFSET }?
att.visualoffset2.vo.attributes =
  att.visualoffset2.vo.attribute.startvo,
  att.visualoffset2.vo.attribute.endvo
att.visualoffset2.vo.attribute.startvo =
  
  ## records a vertical adjustment of the entity's programmatically-determined start
  ##                 point.
  attribute startvo { data.VISUALOFFSET }?
att.visualoffset2.vo.attribute.endvo =
  
  ## records a vertical adjustment of the entity's programmatically-determined end
  ##                 point.
  attribute endvo { data.VISUALOFFSET }?
att.visualoffset2.attributes =
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.visualoffset2.vo.attributes
att.xy.attributes = att.xy.attribute.x, att.xy.attribute.y
att.xy.attribute.x =
  
  ## encodes the x coordinate.
  attribute x { data.NUMBER }?
att.xy.attribute.y =
  
  ## encodes the y coordinate.
  attribute y { data.NUMBER }?
att.xy.required.attributes =
  att.xy.required.attribute.x, att.xy.required.attribute.y
att.xy.required.attribute.x =
  
  ## encodes the x coordinate.
  attribute x { data.NUMBER }
att.xy.required.attribute.y =
  
  ## encodes the y coordinate.
  attribute y { data.NUMBER }
att.xy2.attributes = att.xy2.attribute.x2, att.xy2.attribute.y2
att.xy2.attribute.x2 =
  
  ## encodes the 2nd x coordinate.
  attribute x2 { data.NUMBER }?
att.xy2.attribute.y2 =
  
  ## encodes the 2nd y coordinate.
  attribute y2 { data.NUMBER }?
att.xy2.required.attributes =
  att.xy2.required.attribute.x2, att.xy2.required.attribute.y2
att.xy2.required.attribute.x2 =
  
  ##
  attribute x2 { data.NUMBER }
att.xy2.required.attribute.y2 =
  
  ##
  attribute y2 { data.NUMBER }
att.anl.barline.attributes = att.common.anl.attributes
att.ges.barline.attributes = att.ges.barline.attribute.tstamp
att.ges.barline.attribute.tstamp =
  
  ## encodes the onset time of the barline in terms of musical time, i.e.,
  ##                 beats[.fractional beat part]
  attribute tstamp { text }?
att.log.barline.attributes =
  att.log.barline.attribute.complete,
  att.log.barline.attribute.control,
  att.log.barline.attribute.rend,
  att.log.barline.attribute.measref
att.log.barline.attribute.complete =
  
  ## allows the encoding of whether the measure preceding this barline matches the
  ##                 prevailing meter: a value of 'c' indicates a metrically complete measure, 'i'
  ##                 indicates a measure with not enough beats, while 'o' is for measures with too many
  ##                 beats.
  attribute complete {
    
    ##
    "c"
    | 
      ##
      "i"
    | 
      ##
      "o"
  }?
att.log.barline.attribute.control =
  
  ## indicates whether or not the barline is "controlling"; that is, if it indicates
  ##                 a point of alignment across all the parts. Barlines within a score are usually
  ##                 controlling' that is, they "line up". Barlines within parts may or may not be
  ##                 controlling.
  attribute control { data.BOOLEAN }?
att.log.barline.attribute.rend =
  
  ## records the appearance of the barline.
  attribute rend { data.BARRENDITION }?
att.log.barline.attribute.measref =
  
  ## When the preceding measure contents indicate a repetition of a earlier measure's
  ##                 contents, the measref attribute may be employed to reference the barline preceding
  ##                 the contents of this earlier measure.
  attribute measref { xsd:IDREF }?
att.vis.barline.attributes =
  att.color.attributes,
  att.vis.barline.attribute.barplace,
  att.vis.barline.attribute.taktplace,
  att.vis.barline.attribute.width
att.vis.barline.attribute.barplace =
  
  ## records the location of the barline.
  attribute barplace { data.BARPLACE }?
att.vis.barline.attribute.taktplace =
  
  ## If takt barlines are to be used, then the taktplace attribute may be used to
  ##                 denote the staff location of the shortened barline.
  attribute taktplace { data.STAFFLOC }?
att.vis.barline.attribute.width =
  
  ## For rendering purposes, some music data systems rely on measure width data. The
  ##                 width attribute allows for the capture of this data in MEI for output back to these
  ##                 systems.
  attribute width { data.NUMBER }?
att.anl.clef.attributes = att.common.anl.attributes
att.ges.clef.attributes = empty
att.log.clef.attributes =
  att.log.clef.attribute.line,
  att.log.clef.attribute.octave.default,
  att.log.clef.attribute.shape,
  att.log.clef.attribute.trans
att.log.clef.attribute.line =
  
  ## the staff location of the clef.
  attribute line { data.CLEFLINE }
att.log.clef.attribute.octave.default =
  
  ## The default octave, used when the first note of a measure provides no oct
  ##                 attribute, is set by the octave.default attribute.
  attribute octave.default { data.OCTAVE }?
att.log.clef.attribute.shape =
  
  ## the clef symbol.
  attribute shape { data.CLEFSHAPE }
att.log.clef.attribute.trans =
  
  ## encodes any octave offset included in the clef symbol, such as an '8' above or
  ##                 below the clef.
  attribute trans { data.CLEFTRAN }?
att.vis.clef.attributes = att.altsym.attributes, att.color.attributes
att.log.custos.attributes =
  att.log.custos.attribute.oct,
  att.log.custos.attribute.pname,
  att.log.custos.attribute.source,
  att.log.custos.attribute.target
att.log.custos.attribute.oct =
  
  ## together with the pname attribute, identifies the location where the custos
  ##                 appears.
  attribute oct { data.OCTAVE }
att.log.custos.attribute.pname =
  
  ## in conjuction with the oct attribute, identifies the location where the custos
  ##                 appears.
  attribute pname { data.PITCHNAME }
att.log.custos.attribute.source =
  
  ## contains a list of one or more pointers indicating the sources which contain the
  ##                 custos.
  attribute source { xsd:IDREF }?
att.log.custos.attribute.target =
  
  ## encodes the target pitch when it differs from the pitch at which the custos
  ##                 appears.
  attribute target { xsd:IDREF }?
att.vis.custos.attributes = att.color.attributes
att.anl.dot.attributes = att.common.anl.attributes
att.ges.dot.attributes = empty
att.log.dot.attributes =
  att.log.dot.attribute.form, att.log.dot.attribute.loc
att.log.dot.attribute.form =
  
  ## records the function of the dot; that is, whether it is a dot of augmentation or
  ##                 a dot of division.
  attribute form {
    
    ##
    "aug"
    | 
      ##
      "div"
  }?
att.log.dot.attribute.loc =
  
  ## encodes the staff location of the dot.
  attribute loc { data.STAFFLOC }?
att.vis.dot.attributes = att.color.attributes, att.xy.attributes
att.anl.ending.attributes = att.common.anl.attributes
att.ges.ending.attributes = empty
att.log.ending.attributes = empty
att.vis.ending.attributes = empty
att.anl.grpsym.attributes = att.common.anl.attributes
att.ges.grpsym.attributes = empty
att.log.grpsym.attributes = att.log.grpsym.attribute.symbol
att.log.grpsym.attribute.symbol =
  
  ## specifies the symbol used to group a set of staves.
  attribute symbol {
    
    ##
    "brace"
    | 
      ##
      "bracket"
    | 
      ##
      "line"
  }
att.vis.grpsym.attributes =
  att.visualoffset.attributes, att.xy.attributes
att.anl.ineume.attributes = att.common.anl.attributes
att.ges.ineume.attributes = empty
att.log.ineume.attributes =
  att.log.ineume.attribute.form, att.log.ineume.attribute.name
att.log.ineume.attribute.form =
  
  ## provides a subclass or functional label for the neume.
  attribute form { data.INEUMEFORM }?
att.log.ineume.attribute.name =
  
  ## records a name associated with the neume symbol.
  attribute name { data.INEUMENAME }?
att.vis.ineume.attributes = att.color.attributes
att.anl.layer.attributes = att.common.anl.attributes
att.ges.layer.attributes = empty
att.log.layer.attributes = empty
att.vis.layer.attributes = att.vis.layer.attribute.visible
att.vis.layer.attribute.visible =
  
  ## indicates if a layer should be displayed when the notation is rendered. A layer
  ##                 with this attribute set to 'false' should also not be included in a sounded
  ##                 rendition.
  attribute visible { data.BOOLEAN }?
att.anl.layerdef.attributes = empty
att.ges.layerdef.attributes =
  att.ges.layerdef.attribute.grace,
  att.ges.layerdef.attribute.midi.channel,
  att.ges.layerdef.attribute.midi.duty,
  att.ges.layerdef.attribute.midi.instr,
  att.ges.layerdef.attribute.midi.instrname,
  att.ges.layerdef.attribute.midi.port,
  att.ges.layerdef.attribute.midi.track
att.ges.layerdef.attribute.grace =
  
  ## Setting the grace attribute here provides the possibility of changing all the
  ##                 grace attribute values in a layer without having to individually change each event's
  ##                 grace attribute value. Each "graced" element may still require a value in its
  ##                 grace.time attribute.
  attribute grace { data.GRACE }?
att.ges.layerdef.attribute.midi.channel =
  
  ## sets the default MIDI channel.
  attribute midi.channel { data.MIDICHANNEL }?
att.ges.layerdef.attribute.midi.duty =
  
  ## specifies the 'on' part of the duty cycle as a percentage.
  attribute midi.duty { data.PERCENT }?
att.ges.layerdef.attribute.midi.instr =
  
  ## sets the default MIDI instrument number.
  attribute midi.instr { data.MIDIVALUE }?
att.ges.layerdef.attribute.midi.instrname =
  
  ## provides a label for the MIDI instrument.
  attribute midi.instrname { text }?
att.ges.layerdef.attribute.midi.port =
  
  ## sets the default MIDI port value.
  attribute midi.port { data.MIDIVALUE }?
att.ges.layerdef.attribute.midi.track =
  
  ## sets the default MIDI track number.
  attribute midi.track { data.INTEGERPOSITIVE }?
att.log.layerdef.mensural.attributes = empty
att.log.layerdef.base.attributes =
  att.log.layerdef.base.attribute.beam.group,
  att.log.layerdef.base.attribute.beam.rests,
  att.log.layerdef.base.attribute.dur.default,
  att.log.layerdef.base.attribute.octave.default
att.log.layerdef.base.attribute.beam.group =
  
  ## provides an example of how beaming (including secondary beams) is to be
  ##                 performed. It can be used to set a default beaming pattern to be used when no
  ##                 beaming is indicated at the event level. beam.group must contain a comma-separated
  ##                 list of time values that add up to a measure, e.g., in 4/4 time '4,4,4,4' indicates
  ##                 each quarter note worth of shorter notes would be beamed together. Parentheses can
  ##                 be used to indicate sub-groupings of secondary beams. For example, '(4.,4.,4.)' in
  ##                 9/8 meter indicates one outer beam per measure with secondary beams broken at each
  ##                 dotted quarter duration, while a measure of 16th notes in 4/4 with beam.group equal
  ##                 to '(4,4),(4,4)' will result in a primary beam covering all the notes and secondary
  ##                 beams each group of 4 notes. This beaming "directive" can be overridden by using
  ##                 beam elements. If neither beam elements or the beam.group attribute is used, then no
  ##                 beaming is rendered. Beaming can be 'turned off' by setting beam.group to an empty
  ##                 string.
  attribute beam.group { text }?
att.log.layerdef.base.attribute.beam.rests =
  
  ## determines whether rests are allowed under a beam.
  attribute beam.rests { data.BOOLEAN }?
att.log.layerdef.base.attribute.dur.default =
  
  ## contains a default duration in those situations when the first note, rest,
  ##                 chord, etc. in a measure does not have a duration specified.
  attribute dur.default { data.DURATIONS }?
att.log.layerdef.base.attribute.octave.default =
  
  ## contains a default octave specification in those situations when the first note,
  ##                 rest, chord, etc. in a measure does not have an octave specified.
  attribute octave.default { data.OCTAVE }?
att.log.layerdef.attributes =
  att.log.layerdef.base.attributes, att.log.layerdef.mensural.attributes
att.vis.layerdef.mensural.attributes = empty
att.vis.layerdef.base.attributes =
  att.vis.layerdef.base.attribute.beam.rend,
  att.vis.layerdef.base.attribute.beam.slope,
  att.vis.layerdef.base.attribute.slur.rend,
  att.vis.layerdef.base.attribute.text.fam,
  att.vis.layerdef.base.attribute.text.name,
  att.vis.layerdef.base.attribute.text.size,
  att.vis.layerdef.base.attribute.text.style,
  att.vis.layerdef.base.attribute.text.weight,
  att.vis.layerdef.base.attribute.tie.rend,
  att.vis.layerdef.base.attribute.visible
att.vis.layerdef.base.attribute.beam.rend =
  
  ## captures whether a beam is feathered and in which direction
  attribute beam.rend {
    
    ## indicates that the secondary beams get progressively closer together, coming
    ##                     together at the end of the beam.
    "acc"
    | 
      ## means that the secondary beams start at the same point and get progressively
      ##                     more distant.
      "rit"
    | 
      ## indicates a return to "normal" beaming.
      "norm"
  }?
att.vis.layerdef.base.attribute.beam.slope =
  
  ## contains the default value for the slope of beams.
  attribute beam.slope { data.NUMBER }?
att.vis.layerdef.base.attribute.slur.rend =
  
  ## provides a default value for the appearance of slurs when this information is
  ##                 not provided on the individual elements.
  attribute slur.rend { data.CURVERENDITION }?
att.vis.layerdef.base.attribute.text.fam =
  
  ## provides a default value for the font family name of text (other than lyrics)
  ##                 when this information is not provided on the individual elements.
  attribute text.fam { data.FONTFAMILY }?
att.vis.layerdef.base.attribute.text.name =
  
  ## provides a default value for the font name of text (other than lyrics) when this
  ##                 information is not provided on the individual elements.
  attribute text.name { data.FONTNAME }?
att.vis.layerdef.base.attribute.text.size =
  
  ## provides a default value for the font size of text (other than lyrics) when this
  ##                 information is not provided on the individual elements.
  attribute text.size { data.NUMBER }?
att.vis.layerdef.base.attribute.text.style =
  
  ## provides a default value for the font style of text (other than lyrics) when
  ##                 this information is not provided on the individual elements.
  attribute text.style { data.FONTSTYLE }?
att.vis.layerdef.base.attribute.text.weight =
  
  ## provides a default value for the font weight for text (other than lyrics) when
  ##                 this information is not provided on the individual elements.
  attribute text.weight { data.FONTWEIGHT }?
att.vis.layerdef.base.attribute.tie.rend =
  
  ## provides a default value for the appearance of ties when this information is not
  ##                 provided on the individual elements.
  attribute tie.rend { data.CURVERENDITION }?
att.vis.layerdef.base.attribute.visible =
  
  ## provides a default indication of whether a layer should be displayed when the
  ##                 notation is rendered. A layer with this attribute set to 'false' should also not be
  ##                 included in a sounded rendition.
  attribute visible { data.BOOLEAN }?
att.vis.layerdef.attributes =
  att.vis.layerdef.base.attributes, att.vis.layerdef.mensural.attributes
att.anl.ligature.attributes = att.common.anl.attributes
att.ges.ligature.attributes = empty
att.log.ligature.attributes = att.log.ligature.attribute.form
att.log.ligature.attribute.form =
  
  ## provides an indication of the function of the ligature.
  attribute form { data.LIGATUREFORM }?
att.vis.ligature.attributes = empty
att.anl.mensur.attributes = att.common.anl.attributes
att.ges.mensur.attributes = empty
att.log.mensur.attributes =
  att.log.mensur.attribute.modusmaior,
  att.log.mensur.attribute.modusminor,
  att.log.mensur.attribute.num,
  att.log.mensur.attribute.numbase,
  att.log.mensur.attribute.prolatio,
  att.log.mensur.attribute.tempus
att.log.mensur.attribute.modusmaior =
  
  ## describes the maxima-long relationship.
  attribute modusmaior { data.MODUSMAIOR }?
att.log.mensur.attribute.modusminor =
  
  ## describes the long-breve relationship.
  attribute modusminor { data.MODUSMINOR }?
att.log.mensur.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute num { data.INTEGERPOSITIVE }?
att.log.mensur.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.INTEGERPOSITIVE }?
att.log.mensur.attribute.prolatio =
  
  ## describes the semibreve-minim relationship.
  attribute prolatio { data.PROLATIO }?
att.log.mensur.attribute.tempus =
  
  ## describes the breve-semibreve relationship.
  attribute tempus { data.TEMPUS }?
att.vis.mensur.attributes =
  att.color.attributes,
  att.vis.mensur.attribute.dot,
  att.vis.mensur.attribute.form,
  att.vis.mensur.attribute.loc,
  att.vis.mensur.attribute.orient,
  att.vis.mensur.attribute.sign,
  att.vis.mensur.attribute.size,
  att.vis.mensur.attribute.slash
att.vis.mensur.attribute.dot =
  
  ## determines if a dot is to be added to the base symbol.
  attribute dot { data.BOOLEAN }?
att.vis.mensur.attribute.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
att.vis.mensur.attribute.loc =
  
  ## holds the staff location of the mensuration sign.
  attribute loc { data.STAFFLOC }?
att.vis.mensur.attribute.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute orient { data.ORIENTATION }?
att.vis.mensur.attribute.sign =
  
  ## the base symbol in the mensuration sign/time signature of mensural
  ##                 notation.
  attribute sign { data.MENSURATIONSIGN }?
att.vis.mensur.attribute.size =
  
  ## describes the relative size of the mensuration sign.
  attribute size { data.SIZE }?
att.vis.mensur.attribute.slash =
  
  ## indicates the number lines added to the mensuration sign. For example, one slash
  ##                 is added for what we now call 'alla breve'.
  attribute slash { data.INTEGERPOSITIVE }?
att.anl.midi.attributes = att.common.anl.attributes
att.ges.midi.attributes = empty
att.log.midi.attributes =
  att.log.midi.attribute.layer, att.log.midi.attribute.staff
att.log.midi.attribute.layer =
  
  ## describes the layer to which the midi element's children apply.
  attribute layer { data.INTEGERPOSITIVE }?
att.log.midi.attribute.staff =
  
  ## describes the staff to which the midi element's children apply.
  attribute staff { data.INTEGERPOSITIVE }?
att.vis.midi.attributes = empty
att.anl.proport.attributes = att.common.anl.attributes
att.ges.proport.attributes = empty
att.log.proport.attributes =
  att.log.proport.attribute.num, att.log.proport.attribute.numbase
att.log.proport.attribute.num =
  
  ## Together, num and numbase specify the change as a ratio, e.g., 1:3. Num is for
  ##                 the first value in the ratio.
  attribute num { data.INTEGERPOSITIVE }
att.log.proport.attribute.numbase =
  
  ## Together, num and numbase specify the change as a ratio, e.g., 1:3. Numbase is
  ##                 for the second value in the ratio.
  attribute numbase { data.INTEGERPOSITIVE }
att.vis.proport.attributes = empty
att.anl.part.attributes = att.common.anl.attributes
att.ges.part.attributes = empty
att.log.part.attributes = empty
att.vis.part.attributes = empty
att.anl.parts.attributes = att.common.anl.attributes
att.ges.parts.attributes = empty
att.log.parts.attributes = empty
att.vis.parts.attributes = empty
att.anl.rdg.attributes = att.common.anl.attributes
att.ges.rdg.attributes = empty
att.log.rdg.attributes = att.log.rdg.attribute.expan
att.log.rdg.attribute.expan =
  
  ## contains an ordered list of IDs of descendant section, ending or rdg elements.
  ##                 This 'expansion list' indicates how the section should be expanded into its
  ##                 'through-composed' form. For example, expan="A End1 A End2" indicates that the
  ##                 section labelled 'A' comes first, then the ending labelled 'End1', followed by the
  ##                 'A' section again, and finally the ending lablled 'End2'.
  attribute expan { xsd:IDREFS }?
att.vis.rdg.attributes = empty
att.anl.sb.attributes = att.common.anl.attributes
att.ges.sb.attributes = empty
att.log.sb.attributes = att.log.sb.attribute.source
att.log.sb.attribute.source =
  
  ## Source descriptions in the header may be pointed to by putting their IDs in the
  ##                 source attribute. This allows system breaks from multiple sources to be encoded with
  ##                 a single sb element.
  attribute source { xsd:IDREFS }?
att.vis.sb.attributes = att.vis.sb.attribute.rend
att.vis.sb.attribute.rend =
  
  ## indicates whether hash marks should be rendered between systems. See Read, p.
  ##                 436, ex. 26-3.
  attribute rend {
    
    ##
    "hash"
  }?
att.anl.score.attributes = att.common.anl.attributes
att.ges.score.attributes = empty
att.log.score.attributes = empty
att.vis.score.attributes = empty
att.anl.scoredef.attributes = empty
att.ges.scoredef.attributes =
  att.ges.scoredef.attribute.grace,
  att.ges.scoredef.attribute.midi.channel,
  att.ges.scoredef.attribute.midi.div,
  att.ges.scoredef.attribute.midi.duty,
  att.ges.scoredef.attribute.midi.instr,
  att.ges.scoredef.attribute.midi.instrname,
  att.ges.scoredef.attribute.midi.port,
  att.ges.scoredef.attribute.midi.tempo,
  att.ges.scoredef.attribute.midi.track,
  att.ges.scoredef.attribute.tempo,
  att.ges.scoredef.attribute.tune.pname,
  att.ges.scoredef.attribute.tune.Hz,
  att.ges.scoredef.attribute.tune.temper
att.ges.scoredef.attribute.grace =
  
  ## Setting the grace attribute here provides the possibility of changing all the
  ##                 grace attribute values in a score without having to individually change each event's
  ##                 grace attribute value. Each "graced" element may still require a value in its
  ##                 grace.time attribute.
  attribute grace { data.GRACE }?
att.ges.scoredef.attribute.midi.channel =
  
  ## sets the default MIDI channel.
  attribute midi.channel { data.MIDICHANNEL }?
att.ges.scoredef.attribute.midi.div =
  
  ## sets the number of MIDI ticks per quarter note.
  attribute midi.div { data.INTEGERPOSITIVE }?
att.ges.scoredef.attribute.midi.duty =
  
  ## specifies the 'on' part of the duty cycle as a percentage.
  attribute midi.duty { data.PERCENT }?
att.ges.scoredef.attribute.midi.instr =
  
  ## sets the default MIDI instrument.
  attribute midi.instr { data.MIDIVALUE }?
att.ges.scoredef.attribute.midi.instrname =
  
  ## provides a label for the MIDI instrument.
  attribute midi.instrname { text }?
att.ges.scoredef.attribute.midi.port =
  
  ## sets the default MIDI port.
  attribute midi.port { data.MIDIVALUE }?
att.ges.scoredef.attribute.midi.tempo =
  
  ## sets the default MIDI tempo.
  attribute midi.tempo { data.MIDITEMPO }?
att.ges.scoredef.attribute.midi.track =
  
  ## sets the default MIDI track.
  attribute midi.track { data.INTEGERPOSITIVE }?
att.ges.scoredef.attribute.tempo =
  
  ## records tempo in beats (meter signature denominator) per minute.
  attribute tempo { data.TEMPOVALUE }?
att.ges.scoredef.attribute.tune.pname =
  
  ## holds the pitch name, such as 'a', for a tuning reference pitch.
  attribute tune.pname { data.PITCHNAME }?
att.ges.scoredef.attribute.tune.Hz =
  
  ## holds a value for cycles per second, i.e., Hertz, for a tuning reference
  ##                 pitch.
  attribute tune.Hz { data.NUMBER }?
att.ges.scoredef.attribute.tune.temper =
  
  ## provides a label for the tuning system, 'just', for example.
  attribute tune.temper { data.TEMPERAMENT }?
att.log.scoredef.mensural.attributes =
  att.log.scoredef.mensural.attribute.modusmaior,
  att.log.scoredef.mensural.attribute.modusminor,
  att.log.scoredef.mensural.attribute.num,
  att.log.scoredef.mensural.attribute.numbase,
  att.log.scoredef.mensural.attribute.prolatio,
  att.log.scoredef.mensural.attribute.proport.num,
  att.log.scoredef.mensural.attribute.proport.numbase,
  att.log.scoredef.mensural.attribute.tempus
att.log.scoredef.mensural.attribute.modusmaior =
  
  ## describes the maxima-long relationship.
  attribute modusmaior { data.MODUSMAIOR }?
att.log.scoredef.mensural.attribute.modusminor =
  
  ## describes the long-breve relationship.
  attribute modusminor { data.MODUSMINOR }?
att.log.scoredef.mensural.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute num { data.INTEGERPOSITIVE }?
att.log.scoredef.mensural.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.INTEGERPOSITIVE }?
att.log.scoredef.mensural.attribute.prolatio =
  
  ## describes the semibreve-minim relationship.
  attribute prolatio { data.PROLATIO }?
att.log.scoredef.mensural.attribute.proport.num =
  
  ## Together, num and numbase specify a proportional change as a ratio, e.g., 1:3.
  ##                 Num is for the first value in the ratio.
  attribute proport.num { data.INTEGERPOSITIVE }?
att.log.scoredef.mensural.attribute.proport.numbase =
  
  ## Together, num and numbase specify a proportional change as a ratio, e.g., 1:3.
  ##                 Numbase is for the second value in the ratio.
  attribute proport.numbase { data.INTEGERPOSITIVE }?
att.log.scoredef.mensural.attribute.tempus =
  
  ## describes the breve-semibreve relationship.
  attribute tempus { data.TEMPUS }?
att.log.scoredef.base.attributes =
  att.log.scoredef.base.attribute.beam.group,
  att.log.scoredef.base.attribute.beam.rests,
  att.log.scoredef.base.attribute.clef.line,
  att.log.scoredef.base.attribute.clef.shape,
  att.log.scoredef.base.attribute.clef.trans,
  att.log.scoredef.base.attribute.dur.default,
  att.log.scoredef.base.attribute.key.accid,
  att.log.scoredef.base.attribute.key.mode,
  att.log.scoredef.base.attribute.key.pname,
  att.log.scoredef.base.attribute.key.sig,
  att.log.scoredef.base.attribute.key.sig.mixed,
  att.log.scoredef.base.attribute.meter.count,
  att.log.scoredef.base.attribute.meter.sym,
  att.log.scoredef.base.attribute.meter.unit,
  att.log.scoredef.base.attribute.octave.default,
  att.log.scoredef.base.attribute.source,
  att.log.scoredef.base.attribute.trans.diat,
  att.log.scoredef.base.attribute.trans.semi
att.log.scoredef.base.attribute.beam.group =
  
  ## provides an example of how beaming (including secondary beams) is to be
  ##                 performed. It can be used to set a default beaming pattern to be used when no
  ##                 beaming is indicated at the event level. beam.group must contain a comma-separated
  ##                 list of time values that add up to a measure, e.g., in 4/4 time '4,4,4,4' indicates
  ##                 each quarter note worth of shorter notes would be beamed together. Parentheses can
  ##                 be used to indicate sub-groupings of secondary beams. For example, '(4.,4.,4.)' in
  ##                 9/8 meter indicates one outer beam per measure with secondary beams broken at each
  ##                 dotted quarter duration, while a measure of 16th notes in 4/4 with beam.group equal
  ##                 to '(4,4),(4,4)' will result in a primary beam covering all the notes and secondary
  ##                 beams each group of 4 notes. This beaming "directive" can be overridden by using
  ##                 beam elements. If neither beam elements or the beam.group attribute is used, then no
  ##                 beaming is rendered. Beaming can be 'turned off' by setting beam.group to an empty
  ##                 string.
  attribute beam.group { text }?
att.log.scoredef.base.attribute.beam.rests =
  
  ## indicates whether beams should include rests shorter than a quarter note
  ##                 duration.
  attribute beam.rests { data.BOOLEAN }?
att.log.scoredef.base.attribute.clef.line =
  
  ## contains a default value for the position of the clef.
  attribute clef.line { data.CLEFLINE }?
att.log.scoredef.base.attribute.clef.shape =
  
  ## encodes a value for the clef symbol.
  attribute clef.shape { data.CLEFSHAPE }?
att.log.scoredef.base.attribute.clef.trans =
  
  ## records an octave shift to be applied to the clef.
  attribute clef.trans { data.CLEFTRAN }?
att.log.scoredef.base.attribute.dur.default =
  
  ## used to determine the duration value of the first note in a layer if it has no
  ##                 dur attribute.
  attribute dur.default { data.DURATIONS }?
att.log.scoredef.base.attribute.key.accid =
  
  ## contains an accidental for the tonic key, if one is required, e.g., if key.pname
  ##                 equals 'c' and key.accid equals 's', then a tonic of C# is indicated.
  attribute key.accid { data.ACCIDENTAL.IMPLICIT }?
att.log.scoredef.base.attribute.key.mode =
  
  ## indicates major or minor tonality.
  attribute key.mode { data.MODE }?
att.log.scoredef.base.attribute.key.pname =
  
  ## holds the pitch name of the tonic key, e.g. 'c' for the key of C.
  attribute key.pname { data.PITCHNAME }?
att.log.scoredef.base.attribute.key.sig =
  
  ## indicates where the key is in the circle of fifths.
  attribute key.sig { data.KEYSIGNATURE }?
att.log.scoredef.base.attribute.key.sig.mixed =
  
  ## Mixed key signatures, e.g. those consisting of a mixture of flats and sharps
  ##                 (Read, p. 143, ex. 9-39), and key signatures with unorthodox placement of the
  ##                 accidentals (Read, p. 141) must be indicated by setting the key.sig attribute to
  ##                 'mixed' and providing explicit keysig info in the key.sig.mixed attribute or in the
  ##                 keysig element. It is intended that key.sig.mixed contain a series of tokens with
  ##                 each token containing pitch name, accidental, and octave, such as 'As4 Cs5 Ef5' that
  ##                 indicate what key accidentals should be rendered and where they should be
  ##                 placed.
  attribute key.sig.mixed {
    list {
      xsd:NMTOKEN { pattern = "[A-G](s|f|n|x|ff)[0-9]" }+
    }
  }?
att.log.scoredef.base.attribute.meter.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter
  ##                 signature.
  attribute meter.count { data.NUMBER }?
att.log.scoredef.base.attribute.meter.sym =
  
  ## indicates the use of a meter symbol isntead of a numeric meter signature, that
  ##                 is, 'C' for common time or 'C' with a slash for cut time.
  attribute meter.sym { data.METERSIGN }?
att.log.scoredef.base.attribute.meter.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the
  ##                 meter signature.
  attribute meter.unit { data.NUMBER }?
att.log.scoredef.base.attribute.octave.default =
  
  ## functions similarly to dur.default. If the oct attribute isn't given on the
  ##                 first note of a measure, then the value of octave.default is used.
  attribute octave.default { data.OCTAVE }?
att.log.scoredef.base.attribute.source =
  
  ## contains a list of one or more pointers indicating the sources that contain a
  ##                 staff. Each value should correspond to the ID of a source element given elsewhere in
  ##                 the document.
  attribute source { xsd:IDREFS }?
att.log.scoredef.base.attribute.trans.diat =
  
  ## holds the amount of diatonic pitch shift, e.g. C to C# = 0, C to Db = 1.
  ##                 Transposition requires both trans.diat and trans.semi attributes in order to
  ##                 distinguish the difference, for example, between a transposition from C to C# and
  ##                 one from C to Db.
  attribute trans.diat { data.NUMBER }?
att.log.scoredef.base.attribute.trans.semi =
  
  ## contains the amount of pitch shift in semitones, C to C# = 1, C to Db = 1.
  ##                 Transposition requires both trans.diat and trans.semi attributes in order to
  ##                 distinguish the difference, for example, between a transposition from C to C# and
  ##                 one from C to Db.
  attribute trans.semi { data.NUMBER }?
att.log.scoredef.attributes =
  att.log.scoredef.base.attributes, att.log.scoredef.mensural.attributes
att.vis.scoredef.mensural.attributes =
  att.vis.scoredef.mensural.attribute.mensur,
  att.vis.scoredef.mensural.attribute.mensur.dot,
  att.vis.scoredef.mensural.attribute.mensur.form,
  att.vis.scoredef.mensural.attribute.mensur.loc,
  att.vis.scoredef.mensural.attribute.mensur.orient,
  att.vis.scoredef.mensural.attribute.mensur.size,
  att.vis.scoredef.mensural.attribute.mensur.slash
att.vis.scoredef.mensural.attribute.mensur =
  
  ## the base symbol in the mensuration sign/time signature of mensural
  ##                 notation.
  attribute mensur { data.MENSURATIONSIGN }?
att.vis.scoredef.mensural.attribute.mensur.dot =
  
  ## determines if a dot is to be added to the base symbol.
  attribute mensur.dot { data.BOOLEAN }?
att.vis.scoredef.mensural.attribute.mensur.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute mensur.form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
att.vis.scoredef.mensural.attribute.mensur.loc =
  
  ## holds the staff location of the mensuration sign.
  attribute mensur.loc { data.INTEGERPOSITIVE }?
att.vis.scoredef.mensural.attribute.mensur.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute mensur.orient { data.ORIENTATION }?
att.vis.scoredef.mensural.attribute.mensur.size =
  
  ## describes the relative size of the mensuration sign.
  attribute mensur.size { data.SIZE }?
att.vis.scoredef.mensural.attribute.mensur.slash =
  
  ## indicates the number lines added to the mensuration sign. For example, one slash
  ##                 is added for what we now call 'alla breve'.
  attribute mensur.slash { data.INTEGERPOSITIVE }?
att.vis.scoredef.base.attributes =
  att.vis.scoredef.base.attribute.bar.place,
  att.vis.scoredef.base.attribute.beam.rend,
  att.vis.scoredef.base.attribute.beam.slope,
  att.vis.scoredef.base.attribute.clef.color,
  att.vis.scoredef.base.attribute.clef.visible,
  att.vis.scoredef.base.attribute.dynam.dist,
  att.vis.scoredef.base.attribute.ending.rend,
  att.vis.scoredef.base.attribute.grid.show,
  att.vis.scoredef.base.attribute.harm.dist,
  att.vis.scoredef.base.attribute.key.sig.show,
  att.vis.scoredef.base.attribute.key.sig.showchange,
  att.vis.scoredef.base.attribute.lyric.align,
  att.vis.scoredef.base.attribute.lyric.fam,
  att.vis.scoredef.base.attribute.lyric.name,
  att.vis.scoredef.base.attribute.lyric.size,
  att.vis.scoredef.base.attribute.lyric.style,
  att.vis.scoredef.base.attribute.lyric.weight,
  att.vis.scoredef.base.attribute.meter.rend,
  att.vis.scoredef.base.attribute.meter.sig.showchange,
  att.vis.scoredef.base.attribute.mnum.visible,
  att.vis.scoredef.base.attribute.multi.number,
  att.vis.scoredef.base.attribute.music.name,
  att.vis.scoredef.base.attribute.music.size,
  att.vis.scoredef.base.attribute.ontheline,
  att.vis.scoredef.base.attribute.optimize,
  att.vis.scoredef.base.attribute.page.height,
  att.vis.scoredef.base.attribute.page.width,
  att.vis.scoredef.base.attribute.page.units,
  att.vis.scoredef.base.attribute.page.topmar,
  att.vis.scoredef.base.attribute.page.botmar,
  att.vis.scoredef.base.attribute.page.leftmar,
  att.vis.scoredef.base.attribute.page.rightmar,
  att.vis.scoredef.base.attribute.page.panels,
  att.vis.scoredef.base.attribute.page.scale,
  att.vis.scoredef.base.attribute.pedal.rend,
  att.vis.scoredef.base.attribute.reh.enclose,
  att.vis.scoredef.base.attribute.slur.rend,
  att.vis.scoredef.base.attribute.spacing.packexp,
  att.vis.scoredef.base.attribute.spacing.packfact,
  att.vis.scoredef.base.attribute.spacing.staff,
  att.vis.scoredef.base.attribute.spacing.system,
  att.vis.scoredef.base.attribute.system.leftmar,
  att.vis.scoredef.base.attribute.system.rightmar,
  att.vis.scoredef.base.attribute.system.topmar,
  att.vis.scoredef.base.attribute.text.dist,
  att.vis.scoredef.base.attribute.text.fam,
  att.vis.scoredef.base.attribute.text.name,
  att.vis.scoredef.base.attribute.text.size,
  att.vis.scoredef.base.attribute.text.style,
  att.vis.scoredef.base.attribute.text.weight,
  att.vis.scoredef.base.attribute.tie.rend
att.vis.scoredef.base.attribute.bar.place =
  
  ## describes the placement of barlines.
  attribute bar.place { data.BARPLACE }?
att.vis.scoredef.base.attribute.beam.rend =
  
  ## encodes whether a beam is feathered and in which direction.
  attribute beam.rend {
    
    ##
    "acc"
    | 
      ##
      "rit"
    | 
      ##
      "norm"
  }?
att.vis.scoredef.base.attribute.beam.slope =
  
  ## captures default beam slope.
  attribute beam.slope { data.NUMBER }?
att.vis.scoredef.base.attribute.clef.color =
  
  ## describes the color of the clef.
  attribute clef.color { data.COLOR }?
att.vis.scoredef.base.attribute.clef.visible =
  
  ## determines whether the clef is to be displayed.
  attribute clef.visible { data.BOOLEAN }?
att.vis.scoredef.base.attribute.dynam.dist =
  
  ## records the default distance from the staff of dynamic marks.
  attribute dynam.dist { data.NUMBER }?
att.vis.scoredef.base.attribute.ending.rend =
  
  ## describes where ending marks should be displayed.
  attribute ending.rend {
    
    ##
    "top"
    | 
      ##
      "barred"
    | 
      ##
      "grouped"
  }?
att.vis.scoredef.base.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
att.vis.scoredef.base.attribute.harm.dist =
  
  ## records the default distance from the staff of harmonic indications, such as
  ##                 guitar chord grids or functional labels.
  attribute harm.dist { data.NUMBER }?
att.vis.scoredef.base.attribute.key.sig.show =
  
  ## indicates whether the key signature should be displayed.
  attribute key.sig.show { data.BOOLEAN }?
att.vis.scoredef.base.attribute.key.sig.showchange =
  
  ## determines whether cautionary accidentals should be displayed at a key
  ##                 change.
  attribute key.sig.showchange { data.BOOLEAN }?
att.vis.scoredef.base.attribute.lyric.align =
  
  ## describes the alignment of lyric syllables associated with a note or
  ##                 chord.
  attribute lyric.align { data.NUMBER }?
att.vis.scoredef.base.attribute.lyric.fam =
  
  ## sets the font family default value for lyrics.
  attribute lyric.fam { data.FONTFAMILY }?
att.vis.scoredef.base.attribute.lyric.name =
  
  ## sets the font name default value for lyrics.
  attribute lyric.name { data.FONTNAME }?
att.vis.scoredef.base.attribute.lyric.size =
  
  ## sets the default font size value for lyrics.
  attribute lyric.size { data.NUMBER }?
att.vis.scoredef.base.attribute.lyric.style =
  
  ## sets the default font style value for lyrics.
  attribute lyric.style { data.FONTSTYLE }?
att.vis.scoredef.base.attribute.lyric.weight =
  
  ## sets the default font weight value for lyrics.
  attribute lyric.weight { data.FONTWEIGHT }?
att.vis.scoredef.base.attribute.meter.rend =
  
  ## contains indication of how the meter signature should be rendered.
  attribute meter.rend {
    
    ##
    "denomsym"
    | 
      ##
      "norm"
    | 
      ##
      "invis"
  }?
att.vis.scoredef.base.attribute.meter.sig.showchange =
  
  ## determines whether a new meter signature should be displayed when the meter
  ##                 signature changes.
  attribute meter.sig.showchange { data.BOOLEAN }?
att.vis.scoredef.base.attribute.mnum.visible =
  
  ## indicates whether measure numbers should be displayed.
  attribute mnum.visible { data.BOOLEAN }?
att.vis.scoredef.base.attribute.multi.number =
  
  ## indicates whether programmatically calculated counts of multiple measures of
  ##                 rest (mrest) and whole measure repeats (mrpt) in parts should be rendered.
  attribute multi.number { data.BOOLEAN }?
att.vis.scoredef.base.attribute.music.name =
  
  ## sets the default music font name.
  attribute music.name { data.MUSICFONT }?
att.vis.scoredef.base.attribute.music.size =
  
  ## sets the default music font size.
  attribute music.size { data.NUMBER }?
att.vis.scoredef.base.attribute.ontheline =
  
  ## determines the placement of notes on a 1-line staff. A value of 'yes' places all
  ##                 notes on the line, while a value of 'no' places stems-up notes above the line and
  ##                 stems-down notes below the line.
  attribute ontheline { data.BOOLEAN }?
att.vis.scoredef.base.attribute.optimize =
  
  ## display only those staves with notes?
  attribute optimize { data.BOOLEAN }?
att.vis.scoredef.base.attribute.page.height =
  
  ## describes the height of the rendered output page.
  attribute page.height { data.NUMBER }?
att.vis.scoredef.base.attribute.page.width =
  
  ## describes the width of the rendered output page.
  attribute page.width { data.NUMBER }?
att.vis.scoredef.base.attribute.page.units =
  
  ## contains the real-world measurement units (inches, centimeters, millimeters)
  ##                 used to describe page height and width.
  attribute page.units { data.PGUNITS }?
att.vis.scoredef.base.attribute.page.topmar =
  
  ## indicates the amount of whitespace at the top of a rendered score page.
  attribute page.topmar { data.NUMBER }?
att.vis.scoredef.base.attribute.page.botmar =
  
  ## indicates the amount of whitespace at the bottom of a rendered score
  ##                 page.
  attribute page.botmar { data.NUMBER }?
att.vis.scoredef.base.attribute.page.leftmar =
  
  ## indicates the amount of whitespace at the left side of a rendered score
  ##                 page.
  attribute page.leftmar { data.NUMBER }?
att.vis.scoredef.base.attribute.page.rightmar =
  
  ## indicates the amount of whitespace at the right side of a rendered score
  ##                 page.
  attribute page.rightmar { data.NUMBER }?
att.vis.scoredef.base.attribute.page.panels =
  
  ## indicates the number of logical pages to be rendered on a single physical
  ##                 page.
  attribute page.panels { data.PAGE.PANELS }?
att.vis.scoredef.base.attribute.page.scale =
  
  ## indicates by what percentage the page should be scaled when rendered.
  attribute page.scale { data.PGSCALE }?
att.vis.scoredef.base.attribute.pedal.rend =
  
  ## determines whether piano pedal marks should be drawn as lines or as terms (e.g.
  ##                 'Ped.' for pedal down and '*' for pedal up).
  attribute pedal.rend {
    
    ##
    "line"
    | 
      ##
      "term"
  }?
att.vis.scoredef.base.attribute.reh.enclose =
  
  ## describes the enclosing shape for rehearsal marks.
  attribute reh.enclose {
    
    ##
    "box"
    | 
      ##
      "circle"
    | 
      ##
      "none"
  }?
att.vis.scoredef.base.attribute.slur.rend =
  
  ## describes the default rendering style for slurs.
  attribute slur.rend { data.CURVERENDITION }?
att.vis.scoredef.base.attribute.spacing.packexp =
  
  ## describes a note's spacing relative to its time value.
  attribute spacing.packexp { data.NUMBER }?
att.vis.scoredef.base.attribute.spacing.packfact =
  
  ## describes the note spacing of output.
  attribute spacing.packfact { data.NUMBER }?
att.vis.scoredef.base.attribute.spacing.staff =
  
  ## sets the minimum amount of space between staves in the same system.
  attribute spacing.staff { data.NUMBER }?
att.vis.scoredef.base.attribute.spacing.system =
  
  ## contains a space-separated pair of numbers describing the minimum and maximum
  ##                 amount of space between systems.
  attribute spacing.system { text }?
att.vis.scoredef.base.attribute.system.leftmar =
  
  ## describes the amount of whitespace at the left system margin relative to
  ##                 page.leftmar
  attribute system.leftmar { data.NUMBER }?
att.vis.scoredef.base.attribute.system.rightmar =
  
  ## describes the amount of whitespace at the right system margin relative to
  ##                 page.rightmar
  attribute system.rightmar { data.NUMBER }?
att.vis.scoredef.base.attribute.system.topmar =
  
  ## describes the distance from page's top edge to the first system; used for first
  ##                 page only
  attribute system.topmar { data.NUMBER }?
att.vis.scoredef.base.attribute.text.dist =
  
  ## determines how far from the staff to render text elements.
  attribute text.dist { data.NUMBER }?
att.vis.scoredef.base.attribute.text.fam =
  
  ## sets the default font family value for text other than lyrics.
  attribute text.fam { data.FONTFAMILY }?
att.vis.scoredef.base.attribute.text.name =
  
  ## sets the default font name value for text other than lyrics.
  attribute text.name { data.FONTNAME }?
att.vis.scoredef.base.attribute.text.size =
  
  ## sets the default font size value for text other than lyrics.
  attribute text.size { data.NUMBER }?
att.vis.scoredef.base.attribute.text.style =
  
  ## sets the default font style value for text other than lyrics.
  attribute text.style { data.FONTSTYLE }?
att.vis.scoredef.base.attribute.text.weight =
  
  ## sets the default font weight value for text other than lyrics.
  attribute text.weight { data.FONTWEIGHT }?
att.vis.scoredef.base.attribute.tie.rend =
  
  ## describes the default rendering style for ties.
  attribute tie.rend { data.CURVERENDITION }?
att.vis.scoredef.attributes =
  att.vis.scoredef.base.attributes, att.vis.scoredef.mensural.attributes
att.anl.section.attributes = att.common.anl.attributes
att.ges.section.attributes = att.ges.section.attribute.expan
att.ges.section.attribute.expan =
  
  ## contains a list of ids of child section, ending or app elements. This 'expansion
  ##                 list' indicates how the section should be expanded into its 'through-composed' form.
  ##                 See Read, p. 226 (ex. 12-10), 228-229 (ex. 12-16).
  attribute expan { xsd:IDREFS }?
att.log.section.attributes = empty
att.vis.section.attributes = empty
att.anl.staff.attributes = att.common.anl.attributes
att.ges.staff.attributes = empty
att.log.staff.attributes = empty
att.vis.staff.attributes = att.vis.staff.attribute.visible
att.vis.staff.attribute.visible =
  
  ## indicates if a staff should be displayed when the score is rendered. A staff
  ##                 with this attribute set to 'false' should also not be included in a sounded
  ##                 rendition.
  attribute visible { data.BOOLEAN }?
att.anl.staffdef.attributes = empty
att.ges.staffdef.tablature.attributes =
  att.ges.staffdef.tablature.attribute.tab.strings
att.ges.staffdef.tablature.attribute.tab.strings =
  
  ## provides a written pitch and octave for each open string, e.g. "e3 a3 d4 g4 b4
  ##                 e5" for standard guitar tuning. It should contain the number of tokens indicated by
  ##                 the lines attribute. Chromatic alteration may be indicated with '-' (flat) and '#'
  ##                 (sharp). Double sharps and flats are not permitted.
  attribute tab.strings { text }?
att.ges.staffdef.base.attributes =
  att.ges.staffdef.base.attribute.grace,
  att.ges.staffdef.base.attribute.midi.channel,
  att.ges.staffdef.base.attribute.midi.div,
  att.ges.staffdef.base.attribute.midi.duty,
  att.ges.staffdef.base.attribute.midi.instr,
  att.ges.staffdef.base.attribute.midi.instrname,
  att.ges.staffdef.base.attribute.midi.port,
  att.ges.staffdef.base.attribute.midi.track
att.ges.staffdef.base.attribute.grace =
  
  ## Setting the grace attribute here provides the possibility of changing all the
  ##                 grace attribute values in a staff without having to individually change each event's
  ##                 grace attribute value. Each "graced" element may still require a value in its
  ##                 grace.time attribute.
  attribute grace { data.GRACE }?
att.ges.staffdef.base.attribute.midi.channel =
  
  ## sets the default MIDI channel.
  attribute midi.channel { data.MIDICHANNEL }?
att.ges.staffdef.base.attribute.midi.div =
  
  ## sets the number of MIDI ticks per quarter note.
  attribute midi.div { data.INTEGERPOSITIVE }?
att.ges.staffdef.base.attribute.midi.duty =
  
  ## specifies the 'on' part of the duty cycle as a percentage.
  attribute midi.duty { data.PERCENT }?
att.ges.staffdef.base.attribute.midi.instr =
  
  ## sets the default MIDI instrument number.
  attribute midi.instr { data.MIDIVALUE }?
att.ges.staffdef.base.attribute.midi.instrname =
  
  ## provides a label for the MIDI instrument.
  attribute midi.instrname { text }?
att.ges.staffdef.base.attribute.midi.port =
  
  ## sets the default MIDI port value.
  attribute midi.port { data.MIDIVALUE }?
att.ges.staffdef.base.attribute.midi.track =
  
  ## sets the default MIDI track.
  attribute midi.track { data.INTEGERPOSITIVE }?
att.ges.staffdef.attributes =
  att.ges.staffdef.base.attributes,
  att.ges.staffdef.tablature.attributes
att.log.staffdef.mensural.attributes =
  att.log.staffdef.mensural.attribute.mensur.sign,
  att.log.staffdef.mensural.attribute.mensur.dot,
  att.log.staffdef.mensural.attribute.mensur.slash,
  att.log.staffdef.mensural.attribute.modusmaior,
  att.log.staffdef.mensural.attribute.modusminor,
  att.log.staffdef.mensural.attribute.num,
  att.log.staffdef.mensural.attribute.numbase,
  att.log.staffdef.mensural.attribute.prolatio,
  att.log.staffdef.mensural.attribute.proport.num,
  att.log.staffdef.mensural.attribute.proport.numbase,
  att.log.staffdef.mensural.attribute.tempus
att.log.staffdef.mensural.attribute.mensur.sign =
  
  ## the base symbol in the mensuration sign/time signature of mensural
  ##                 notation.
  attribute mensur.sign { data.MENSURATIONSIGN }?
att.log.staffdef.mensural.attribute.mensur.dot =
  
  ## determines if a dot is to be added to the base symbol.
  attribute mensur.dot { data.BOOLEAN }?
att.log.staffdef.mensural.attribute.mensur.slash =
  
  ## indicates the number lines added to the mensuration sign. For example, one slash
  ##                 is added for what we now call 'alla breve'.
  attribute mensur.slash { data.INTEGERPOSITIVE }?
att.log.staffdef.mensural.attribute.modusmaior =
  
  ## describes the maxima-long relationship.
  attribute modusmaior { data.MODUSMAIOR }?
att.log.staffdef.mensural.attribute.modusminor =
  
  ## describes the long-breve relationship.
  attribute modusminor { data.MODUSMINOR }?
att.log.staffdef.mensural.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute num { data.INTEGERPOSITIVE }?
att.log.staffdef.mensural.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.INTEGERPOSITIVE }?
att.log.staffdef.mensural.attribute.prolatio =
  
  ## describes the semibreve-minim relationship.
  attribute prolatio { data.PROLATIO }?
att.log.staffdef.mensural.attribute.proport.num =
  
  ## Together, num and numbase specify a proportional change as a ratio, e.g., 1:3.
  ##                 Num is for the first value in the ratio.
  attribute proport.num { data.INTEGERPOSITIVE }?
att.log.staffdef.mensural.attribute.proport.numbase =
  
  ## Together, num and numbase specify a proportional change as a ratio, e.g., 1:3.
  ##                 Numbase is for the second value in the ratio.
  attribute proport.numbase { data.INTEGERPOSITIVE }?
att.log.staffdef.mensural.attribute.tempus =
  
  ## describes the breve-semibreve relationship.
  attribute tempus { data.TEMPUS }?
att.log.staffdef.base.attributes =
  att.log.staffdef.base.attribute.beam.group,
  att.log.staffdef.base.attribute.beam.rests,
  att.log.staffdef.base.attribute.clef.line,
  att.log.staffdef.base.attribute.clef.shape,
  att.log.staffdef.base.attribute.clef.trans,
  att.log.staffdef.base.attribute.dur.default,
  att.log.staffdef.base.attribute.key.accid,
  att.log.staffdef.base.attribute.key.mode,
  att.log.staffdef.base.attribute.key.pname,
  att.log.staffdef.base.attribute.key.sig,
  att.log.staffdef.base.attribute.key.sig.mixed,
  att.log.staffdef.base.attribute.meter.count,
  att.log.staffdef.base.attribute.meter.sym,
  att.log.staffdef.base.attribute.meter.unit,
  att.log.staffdef.base.attribute.octave.default,
  att.log.staffdef.base.attribute.trans.diat,
  att.log.staffdef.base.attribute.trans.semi
att.log.staffdef.base.attribute.beam.group =
  
  ## provides an example of how beaming (including secondary beams) is to be
  ##                 performed. It can be used to set a default beaming pattern to be used when no
  ##                 beaming is indicated at the event level. beam.group must contain a comma-separated
  ##                 list of time values that add up to a measure, e.g., in 4/4 time '4,4,4,4' indicates
  ##                 each quarter note worth of shorter notes would be beamed together. Parentheses can
  ##                 be used to indicate sub-groupings of secondary beams. For example, '(4.,4.,4.)' in
  ##                 9/8 meter indicates one outer beam per measure with secondary beams broken at each
  ##                 dotted quarter duration, while a measure of 16th notes in 4/4 with beam.group equal
  ##                 to '(4,4),(4,4)' will result in a primary beam covering all the notes and secondary
  ##                 beams each group of 4 notes. This beaming "directive" can be overridden by using
  ##                 beam elements. If neither beam elements or the beam.group attribute is used, then no
  ##                 beaming is rendered. Beaming can be 'turned off' by setting beam.group to an empty
  ##                 string.
  attribute beam.group { text }?
att.log.staffdef.base.attribute.beam.rests =
  
  ## determines whether rests are allowed under a beam.
  attribute beam.rests { data.BOOLEAN }?
att.log.staffdef.base.attribute.clef.line =
  
  ## contains a default value for the position of the clef.
  attribute clef.line { data.CLEFLINE }?
att.log.staffdef.base.attribute.clef.shape =
  
  ## encodes a value for the clef symbol.
  attribute clef.shape { data.CLEFSHAPE }?
att.log.staffdef.base.attribute.clef.trans =
  
  ## records an octave shift to be applied to the clef.
  attribute clef.trans { data.CLEFTRAN }?
att.log.staffdef.base.attribute.dur.default =
  
  ## contains a default duration in those situations when the first note, rest,
  ##                 chord, etc. in a measure does not have a duration specified.
  attribute dur.default { data.DURATIONS }?
att.log.staffdef.base.attribute.key.accid =
  
  ## contains an accidental for the tonic key, if one is required, e.g., if key.pname
  ##                 equals 'c' and key.accid equals 's', then a tonic of C# is indicated.
  attribute key.accid { data.ACCIDENTAL.IMPLICIT }?
att.log.staffdef.base.attribute.key.mode =
  
  ## indicates major or minor tonality.
  attribute key.mode { data.MODE }?
att.log.staffdef.base.attribute.key.pname =
  
  ## holds the pitch name of the tonic key, e.g. 'c' for the key of C.
  attribute key.pname { data.PITCHNAME }?
att.log.staffdef.base.attribute.key.sig =
  
  ## indicates where the key is in the circle of fifths.
  attribute key.sig { data.KEYSIGNATURE }?
att.log.staffdef.base.attribute.key.sig.mixed =
  
  ## Mixed key signatures, e.g. those consisting of a mixture of flats and sharps
  ##                 (Read, p. 143, ex. 9-39), and key signatures with unorthodox placement of the
  ##                 accidentals (Read, p. 141) must be indicated by setting the key.sig attribute to
  ##                 'mixed' and providing explicit keysig info in the key.sig.mixed attribute or in the
  ##                 keysig element. It is intended that key.sig.mixed contain a series of tokens with
  ##                 each token containing pitch name, accidental, and octave, such as 'As4 Cs5 Ef5' that
  ##                 indicate what key accidentals should be rendered and where they should be
  ##                 placed.
  attribute key.sig.mixed {
    list {
      xsd:NMTOKEN { pattern = "[A-G](s|f|n|x|ff)[0-9]" }+
    }
  }?
att.log.staffdef.base.attribute.meter.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter
  ##                 signature.
  attribute meter.count { data.NUMBER }?
att.log.staffdef.base.attribute.meter.sym =
  
  ## indicates the use of a meter symbol isntead of a numeric meter signature, that
  ##                 is, 'C' for common time or 'C' with a slash for cut time.
  attribute meter.sym { data.METERSIGN }?
att.log.staffdef.base.attribute.meter.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the
  ##                 meter signature.
  attribute meter.unit { data.NUMBER }?
att.log.staffdef.base.attribute.octave.default =
  
  ## functions similarly to dur.default. If the oct attribute isn't given on the
  ##                 first note of a measure, then the value of octave.default is used.
  attribute octave.default { data.OCTAVE }?
att.log.staffdef.base.attribute.trans.diat =
  
  ## holds the amount of diatonic pitch shift, e.g. C to C# = 0, C to Db = 1.
  ##                 Transposition requires both trans.diat and trans.semi attributes in order to
  ##                 distinguish the difference, for example, between a transposition from C to C# and
  ##                 one from C to Db.
  attribute trans.diat { data.NUMBER }?
att.log.staffdef.base.attribute.trans.semi =
  
  ## contains the amount of pitch shift in semitones, C to C# = 1, C to Db = 1.
  ##                 Transposition requires both trans.diat and trans.semi attributes in order to
  ##                 distinguish the difference, for example, between a transposition from C to C# and
  ##                 one from C to Db.
  attribute trans.semi { data.NUMBER }?
att.log.staffdef.attributes =
  att.log.staffdef.base.attributes, att.log.staffdef.mensural.attributes
att.vis.staffdef.mensural.attributes =
  att.vis.staffdef.mensural.attribute.mensur.form,
  att.vis.staffdef.mensural.attribute.mensur.loc,
  att.vis.staffdef.mensural.attribute.mensur.orient,
  att.vis.staffdef.mensural.attribute.mensur.size
att.vis.staffdef.mensural.attribute.mensur.form =
  
  ## indicates whether the base symbol is written vertically or horizontally.
  attribute mensur.form {
    
    ##
    "horizontal"
    | 
      ##
      "vertical"
  }?
att.vis.staffdef.mensural.attribute.mensur.loc =
  
  ## holds the staff location of the mensuration sign.
  attribute mensur.loc { data.INTEGERPOSITIVE }?
att.vis.staffdef.mensural.attribute.mensur.orient =
  
  ## describes the rotation or reflection of the base symbol.
  attribute mensur.orient { data.ORIENTATION }?
att.vis.staffdef.mensural.attribute.mensur.size =
  
  ## describes the relative size of the mensuration sign.
  attribute mensur.size { data.SIZE }?
att.vis.staffdef.base.attributes =
  att.vis.staffdef.base.attribute.beam.rend,
  att.vis.staffdef.base.attribute.beam.slope,
  att.vis.staffdef.base.attribute.clef.color,
  att.vis.staffdef.base.attribute.clef.visible,
  att.vis.staffdef.base.attribute.dynam.dist,
  att.vis.staffdef.base.attribute.grid.show,
  att.vis.staffdef.base.attribute.harm.dist,
  att.vis.staffdef.base.attribute.key.sig.show,
  att.vis.staffdef.base.attribute.key.sig.showchange,
  att.vis.staffdef.base.attribute.label.full,
  att.vis.staffdef.base.attribute.label.abbr,
  att.vis.staffdef.base.attribute.layerscheme,
  att.vis.staffdef.base.attribute.lines,
  att.vis.staffdef.base.attribute.lines.color,
  att.vis.staffdef.base.attribute.lines.visible,
  att.vis.staffdef.base.attribute.lyric.align,
  att.vis.staffdef.base.attribute.lyric.fam,
  att.vis.staffdef.base.attribute.lyric.name,
  att.vis.staffdef.base.attribute.lyric.size,
  att.vis.staffdef.base.attribute.lyric.style,
  att.vis.staffdef.base.attribute.lyric.weight,
  att.vis.staffdef.base.attribute.meter.rend,
  att.vis.staffdef.base.attribute.meter.sig.showchange,
  att.vis.staffdef.base.attribute.multi.number,
  att.vis.staffdef.base.attribute.ontheline,
  att.vis.staffdef.base.attribute.pedal.rend,
  att.vis.staffdef.base.attribute.reh.enclose,
  att.vis.staffdef.base.attribute.scale,
  att.vis.staffdef.base.attribute.slur.rend,
  att.vis.staffdef.base.attribute.spacing,
  att.vis.staffdef.base.attribute.text.dist,
  att.vis.staffdef.base.attribute.text.fam,
  att.vis.staffdef.base.attribute.text.name,
  att.vis.staffdef.base.attribute.text.size,
  att.vis.staffdef.base.attribute.text.style,
  att.vis.staffdef.base.attribute.text.weight,
  att.vis.staffdef.base.attribute.tie.rend,
  att.vis.staffdef.base.attribute.visible
att.vis.staffdef.base.attribute.beam.rend =
  
  ## encodes whether a beam is feathered and in which direction.
  attribute beam.rend {
    
    ##
    "acc"
    | 
      ##
      "rit"
    | 
      ##
      "norm"
  }?
att.vis.staffdef.base.attribute.beam.slope =
  
  ## captures default beam slope.
  attribute beam.slope { data.NUMBER }?
att.vis.staffdef.base.attribute.clef.color =
  
  ## describes the color of the clef.
  attribute clef.color { data.COLOR }?
att.vis.staffdef.base.attribute.clef.visible =
  
  ## determines whether the clef is to be displayed.
  attribute clef.visible { data.BOOLEAN }?
att.vis.staffdef.base.attribute.dynam.dist =
  
  ## records the default distance from the staff of dynamic marks.
  attribute dynam.dist { data.NUMBER }?
att.vis.staffdef.base.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
att.vis.staffdef.base.attribute.harm.dist =
  
  ## records the default distance from the staff of harmonic indications, such as
  ##                 guitar chord grids or functional labels.
  attribute harm.dist { data.NUMBER }?
att.vis.staffdef.base.attribute.key.sig.show =
  
  ## indicates whether the key signature should be displayed.
  attribute key.sig.show { data.BOOLEAN }?
att.vis.staffdef.base.attribute.key.sig.showchange =
  
  ## determines whether cautionary accidentals should be displayed at a key
  ##                 change.
  attribute key.sig.showchange { data.BOOLEAN }?
att.vis.staffdef.base.attribute.label.full =
  
  ## provides a label for a group of staves on the first page; label.abbr is used
  ##                 thereafter.
  attribute label.full { text }?
att.vis.staffdef.base.attribute.label.abbr =
  
  ## provides a label for a group of staves on pages after the first page.
  attribute label.abbr { text }?
att.vis.staffdef.base.attribute.layerscheme =
  
  ## indicates the number of layers and their stem directions.
  attribute layerscheme { data.LAYERSCHEME }?
att.vis.staffdef.base.attribute.lines =
  
  ## indicates the number of stafflines.
  attribute lines { data.INTEGERPOSITIVE }?
att.vis.staffdef.base.attribute.lines.color =
  
  ## encodes the colors of the staff lines. The value is structured; that is, it
  ##                 should have the same number of space-separated RGB values as the number of lines
  ##                 indicated by the lines attribute. A line can be made invisible by assigning it the
  ##                 same RGB value as the background, usually white.
  attribute lines.color { xsd:NMTOKENS }?
att.vis.staffdef.base.attribute.lines.visible =
  
  ##
  attribute lines.visible { data.BOOLEAN }?
att.vis.staffdef.base.attribute.lyric.align =
  
  ## describes the alignment of lyric syllables associated with a note or
  ##                 chord.
  attribute lyric.align { data.NUMBER }?
att.vis.staffdef.base.attribute.lyric.fam =
  
  ## sets the font family default value for lyrics.
  attribute lyric.fam { data.FONTFAMILY }?
att.vis.staffdef.base.attribute.lyric.name =
  
  ## sets the font name default value for lyrics.
  attribute lyric.name { data.FONTNAME }?
att.vis.staffdef.base.attribute.lyric.size =
  
  ## sets the default font size value for lyrics.
  attribute lyric.size { data.NUMBER }?
att.vis.staffdef.base.attribute.lyric.style =
  
  ## sets the default font style value for lyrics.
  attribute lyric.style { data.FONTSTYLE }?
att.vis.staffdef.base.attribute.lyric.weight =
  
  ## sets the default font weight value for lyrics.
  attribute lyric.weight { data.FONTWEIGHT }?
att.vis.staffdef.base.attribute.meter.rend =
  
  ## contains indication of how the meter signature should be rendered.
  attribute meter.rend {
    
    ##
    "denomsym"
    | 
      ##
      "norm"
    | 
      ##
      "invis"
  }?
att.vis.staffdef.base.attribute.meter.sig.showchange =
  
  ## determines whether a new meter signature should be displayed when the meter
  ##                 signature changes.
  attribute meter.sig.showchange { data.BOOLEAN }?
att.vis.staffdef.base.attribute.multi.number =
  
  ## indicates whether programmatically calculated counts of multiple measures of
  ##                 rest (mrest) and whole measure repeats (mrpt) in parts should be rendered.
  attribute multi.number { data.BOOLEAN }?
att.vis.staffdef.base.attribute.ontheline =
  
  ## determines the placement of notes on a 1-line staff. A value of 'yes' places all
  ##                 notes on the line, while a value of 'no' places stems-up notes above the line and
  ##                 stems-down notes below the line.
  attribute ontheline { data.BOOLEAN }?
att.vis.staffdef.base.attribute.pedal.rend =
  
  ## determines whether piano pedal marks should be drawn as lines or as terms (e.g.
  ##                 'Ped.' for pedal down and '*' for pedal up).
  attribute pedal.rend {
    
    ##
    "line"
    | 
      ##
      "term"
  }?
att.vis.staffdef.base.attribute.reh.enclose =
  
  ## describes the enclosing shape for rehearsal marks.
  attribute reh.enclose {
    
    ##
    "box"
    | 
      ##
      "circle"
    | 
      ##
      "none"
  }?
att.vis.staffdef.base.attribute.scale =
  
  ## indicates by what percentage the staff should be scaled when rendered.
  attribute scale { data.NUMBER }?
att.vis.staffdef.base.attribute.slur.rend =
  
  ## describes the default rendering style for slurs.
  attribute slur.rend { data.CURVERENDITION }?
att.vis.staffdef.base.attribute.spacing =
  
  ## records the absolute distance (as opposed to the relative distances recorded in
  ##                 scoredef elements) between this staff and the preceding one in the same system. This
  ##                 value is meaningless for the first staff in a system since the spacing.system
  ##                 attribute indicates the spacing between systems.
  attribute spacing { data.NUMBER }?
att.vis.staffdef.base.attribute.text.dist =
  
  ## determines how far from the staff to render text elements.
  attribute text.dist { data.NUMBER }?
att.vis.staffdef.base.attribute.text.fam =
  
  ## provides a default value for the font family name for text (other than lyrics)
  ##                 associated with this staff.
  attribute text.fam { data.FONTFAMILY }?
att.vis.staffdef.base.attribute.text.name =
  
  ## provides a default value for the font name for text (other than lyrics)
  ##                 associated with this staff.
  attribute text.name { data.FONTNAME }?
att.vis.staffdef.base.attribute.text.size =
  
  ## provides a default value for the font size for text (other than lyrics)
  ##                 associated with this staff.
  attribute text.size { data.NUMBER }?
att.vis.staffdef.base.attribute.text.style =
  
  ## provides a default value for the font style for text (other than lyrics)
  ##                 associated with this staff.
  attribute text.style { data.FONTSTYLE }?
att.vis.staffdef.base.attribute.text.weight =
  
  ## provides a default value for the font weight for text (other than lyrics)
  ##                 associated with this staff.
  attribute text.weight { data.FONTWEIGHT }?
att.vis.staffdef.base.attribute.tie.rend =
  
  ## provides a default value for the appearance of ties associated with this
  ##                 staf.
  attribute tie.rend { data.CURVERENDITION }?
att.vis.staffdef.base.attribute.visible =
  
  ## indicates if a staff should be displayed when the score is rendered. A staff
  ##                 with this attribute set to 'false' should also not be included in a sounded
  ##                 rendition.
  attribute visible { data.BOOLEAN }?
att.vis.staffdef.attributes =
  att.vis.staffdef.base.attributes, att.vis.staffdef.mensural.attributes
att.anl.staffgrp.attributes = empty
att.ges.staffgrp.attributes = att.ges.staffgrp.attribute.midi.div
att.ges.staffgrp.attribute.midi.div =
  
  ## sets the default number of MIDI ticks per quarter note for all staves in the
  ##                 group.
  attribute midi.div { data.INTEGERPOSITIVE }?
att.log.staffgrp.attributes = empty
att.vis.staffgrp.attributes =
  att.vis.staffgrp.attribute.barthru,
  att.vis.staffgrp.attribute.label.abbr,
  att.vis.staffgrp.attribute.label.full,
  att.vis.staffgrp.attribute.symbol,
  att.vis.staffgrp.attribute.visible
att.vis.staffgrp.attribute.barthru =
  
  ## indicates whether barlines go across the space between staves (yes) or are only
  ##                 drawn across the stafflines of each staff (no)
  attribute barthru { data.BOOLEAN }?
att.vis.staffgrp.attribute.label.abbr =
  
  ## provides a label for a group of staves on pages after the first page.
  attribute label.abbr { text }?
att.vis.staffgrp.attribute.label.full =
  
  ## provides a label for a group of staves on the first page; label.abbr is used
  ##                 thereafter.
  attribute label.full { text }?
att.vis.staffgrp.attribute.symbol =
  
  ## indicates the left-hand connecting symbol for the staff group.
  attribute symbol {
    
    ##
    "brace"
    | 
      ##
      "bracket"
    | 
      ##
      "line"
  }?
att.vis.staffgrp.attribute.visible =
  
  ## indicates if a staff group should be displayed when the notation is rendered. A
  ##                 staff group with this attribute set to 'false' should also not be included in a
  ##                 sounded rendition.
  attribute visible { data.BOOLEAN }?
att.anl.uneume.attributes =
  att.common.anl.attributes,
  att.anl.uneume.attribute.accid.cautionary,
  att.anl.uneume.attribute.accid.editorial,
  att.anl.uneume.attribute.hfunc,
  att.anl.uneume.attribute.inth,
  att.anl.uneume.attribute.intm,
  att.anl.uneume.attribute.mfunc,
  att.anl.uneume.attribute.pclass,
  att.anl.uneume.attribute.psolfa
att.anl.uneume.attribute.accid.cautionary =
  
  ## indicates a cautionary accidental accompanying the neume.
  attribute accid.cautionary { data.ACCIDENTAL.EXPLICIT }?
att.anl.uneume.attribute.accid.editorial =
  
  ## indicates an editorial accidental accompanying the neume.
  attribute accid.editorial { data.ACCIDENTAL.EXPLICIT }?
att.anl.uneume.attribute.hfunc =
  
  ## contains an indication of the harmonic function of this neume.
  attribute hfunc { text }?
att.anl.uneume.attribute.inth =
  
  ## encodes the harmonic interval from a pitch in same chord.
  attribute inth { text }?
att.anl.uneume.attribute.intm =
  
  ## encodes the melodic interval from the previous neume.
  attribute intm { text }?
att.anl.uneume.attribute.mfunc =
  
  ## contains an indication of the melodic function of this neume.
  attribute mfunc { text }?
att.anl.uneume.attribute.pclass =
  
  ## holds pitch class information.
  attribute pclass { data.PITCHCLASS }?
att.anl.uneume.attribute.psolfa =
  
  ## contains solfa designation, e.g., do, re, mi, etc., in either fixed or movable
  ##                 Do systems.
  attribute psolfa { text }?
att.ges.uneume.attributes = empty
att.log.uneume.attributes =
  att.event.attributes,
  att.log.uneume.attribute.form,
  att.log.uneume.attribute.name,
  att.log.uneume.attribute.syl
att.log.uneume.attribute.form =
  
  ## records the function of the neume.
  attribute form { data.UNEUMEFORM }?
att.log.uneume.attribute.name =
  
  ## records the name of the neume.
  attribute name { data.UNEUMENAME }?
att.log.uneume.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
att.vis.uneume.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.ho.attributes,
  att.xy.attributes,
  att.vis.uneume.attribute.size,
  att.vis.uneume.attribute.visible
att.vis.uneume.attribute.size =
  
  ## encodes the relative size of the neume.
  attribute size { data.SIZE }?
att.vis.uneume.attribute.visible =
  
  ## indicates if a neume should be displayed when the notation is rendered. A neume
  ##                 with this attribute set to 'false' should also not be included in a sounded
  ##                 rendition.
  attribute visible { data.BOOLEAN }?
att.anl.accid.attributes = att.common.anl.attributes
att.ges.accid.attributes = empty
att.log.accid.attributes =
  att.log.accid.attribute.func, att.log.accid.attribute.value
att.log.accid.attribute.func =
  
  ## If an accidental has an editorial or cautionary function, its function may be
  ##                 captured in the func attribute.
  attribute func {
    
    ##
    "caution"
    | 
      ##
      "edit"
  }?
att.log.accid.attribute.value =
  
  ## records an accidental.
  attribute value { data.ACCIDENTAL.EXPLICIT }
att.vis.accid.attributes =
  att.color.attributes,
  att.visualoffset.ho.attributes,
  att.visualoffset.vo.attributes,
  att.xy.attributes,
  att.vis.accid.attribute.enclose,
  att.vis.accid.attribute.place
att.vis.accid.attribute.enclose =
  
  ## records the characters often used to mark the accidental as having an cautionary
  ##                 or editorial function. For an example of cautionary accidentals enclosed in
  ##                 parentheses or brackets see Read, p. 131, ex. 9-14.
  attribute enclose { data.ENCLOSURE }?
att.vis.accid.attribute.place =
  
  ## captures the placement of the accidental relative to the staff.
  attribute place {
    
    ##
    "above"
    | 
      ##
      "below"
    | 
      ##
      "staff"
  }?
att.anl.annot.attributes =
  att.common.anl.attributes, att.anl.annot.attribute.dur.anl
att.anl.annot.attribute.dur.anl =
  
  ## records the durational scope of the annotation when it differs from the written
  ##                 values of the participants.
  attribute dur.anl { text }?
att.ges.annot.attributes = empty
att.log.annot.attributes =
  att.nextprev.attributes,
  att.startendid.attributes,
  att.log.annot.attribute.layer,
  att.log.annot.attribute.staff,
  att.log.annot.attribute.tstamp,
  att.log.annot.attribute.tstamp.ges,
  att.log.annot.attribute.tstamp.real
att.log.annot.attribute.layer =
  
  ## signifies the layer to which an annotation applies.
  attribute layer { data.INTEGERPOSITIVE }?
att.log.annot.attribute.staff =
  
  ## signifies the staff to which an annotation applies.
  attribute staff { data.INTEGERPOSITIVE }?
att.log.annot.attribute.tstamp =
  
  ## encodes the onset time in terms of musical time, i.e., beats[.fractional beat
  ##                 part]
  attribute tstamp { data.BEAT }?
att.log.annot.attribute.tstamp.ges =
  
  ## records the onset time in pulses per quarter note (ppq, MusicXML divisions, or
  ##                 MIDI clicks) since the start of the measure.
  attribute tstamp.ges { data.INTEGERNONNEGATIVE }?
att.log.annot.attribute.tstamp.real =
  
  ## records the onset time as a real-time offset, i.e., in HH:MM:SS.ss format, since
  ##                 the beginning of the file.
  attribute tstamp.real { data.ISOTIME }?
att.vis.annot.attributes = empty
att.anl.arpeg.attributes = att.common.anl.attributes
att.ges.arpeg.attributes = empty
att.log.arpeg.attributes =
  att.controlevent.attributes, att.log.arpeg.attribute.dir
att.log.arpeg.attribute.dir =
  
  ## describes the direction in which the arpeggio is to be performed; "nonarp"
  ##                 indicates a non-arpeggiated chord, usually rendered with a preceding bracket instead
  ##                 of a wavy line.
  attribute dir {
    
    ##
    "up"
    | 
      ##
      "down"
    | 
      ##
      "nonarp"
  }?
att.vis.arpeg.attributes =
  att.color.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.arpeg.attribute.arrow
att.vis.arpeg.attribute.arrow =
  
  ## may be used when an arrowhead is to be drawn as part of the arpeggiation
  ##                 symbol.
  attribute arrow { data.BOOLEAN }?
att.anl.artic.attributes = att.common.anl.attributes
att.ges.artic.attributes = empty
att.log.artic.attributes = att.log.artic.attribute.value
att.log.artic.attribute.value =
  
  ## records the name of the articulation symbol drawn from the list given in
  ##                 data.ARTICULATIONS.
  attribute value { data.ARTICULATION }
att.vis.artic.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.artic.attribute.enclose
att.vis.artic.attribute.enclose =
  
  ## encodes the characters used to enclose the accidental when it has a cautionary
  ##                 or editorial function.
  attribute enclose { data.ENCLOSURE }?
att.anl.beam.attributes = att.common.anl.attributes
att.ges.beam.attributes = empty
att.log.beam.attributes =
  att.event.attributes, att.log.beam.attribute.with
att.log.beam.attribute.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute with { data.PLACE }?
att.vis.beam.attributes =
  att.vis.beam.attribute.breaksec,
  att.vis.beam.attribute.rend,
  att.vis.beam.attribute.slope
att.vis.beam.attribute.breaksec =
  
  ## encodes the explicit breaking of secondary beams. The value should contain a
  ##                 space-separated list of rhythmic durations that form a single beat. For example,'8
  ##                 8' indicates a division of the beam into 2 8th-note groups.
  attribute breaksec { xsd:NMTOKENS }?
att.vis.beam.attribute.rend =
  
  ## captures whether a beam is feathered and in which direction: 'acc' indicates
  ##                 that the secondary beams get progressively closer together, coming together at the
  ##                 end of the beam, while 'rit' means that the secondary beams start at the same point
  ##                 and get progressively more distant.
  attribute rend {
    
    ##
    "acc"
    | 
      ##
      "rit"
    | 
      ##
      "norm"
  }?
att.vis.beam.attribute.slope =
  
  ## records the slope of the beam.
  attribute slope { data.NUMBER }?
att.anl.beamspan.attributes = att.common.anl.attributes
att.ges.beamspan.attributes = empty
att.log.beamspan.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.beamspan.attribute.with
att.log.beamspan.attribute.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute with { data.PLACE }?
att.vis.beamspan.attributes =
  att.vis.beamspan.attribute.breaksec,
  att.vis.beamspan.attribute.rend,
  att.vis.beamspan.attribute.slope
att.vis.beamspan.attribute.breaksec =
  
  ## encodes the explicit breaking of secondary beams. The value should contain a
  ##                 space-separated list of rhythmic durations that form a single beat. For example,'8
  ##                 8' indicates a division of the beam into 2 8th-note groups.
  attribute breaksec { text }?
att.vis.beamspan.attribute.rend =
  
  ## captures whether a beam is feathered and in which direction: 'acc' indicates
  ##                 that the secondary beams get progressively closer together, coming together at the
  ##                 end of the beam, while 'rit' means that the secondary beams start at the same point
  ##                 and get progressively more distant.
  attribute rend {
    
    ##
    "acc"
    | 
      ##
      "rit"
    | 
      ##
      "norm"
  }?
att.vis.beamspan.attribute.slope =
  
  ## records the slope of the beam.
  attribute slope { data.NUMBER }?
att.anl.beatrpt.attributes = att.common.anl.attributes
att.ges.beatrpt.attributes = empty
att.log.beatrpt.attributes = att.event.attributes
att.vis.beatrpt.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.vis.beatrpt.attribute.expand,
  att.vis.beatrpt.attribute.rend
att.vis.beatrpt.attribute.expand =
  
  ## indicates whether to render the repeated beat symbol or the source
  ##                 material.
  attribute expand { data.BOOLEAN }?
att.vis.beatrpt.attribute.rend =
  
  ## indicates the number of slashes required to render the appropriate beat repeat
  ##                 symbol when the beat is divided into even notes: 4ths or 8ths=1, 16ths=2, 32nds=3,
  ##                 64ths=4, 128ths=5. When the beat is comprised of mixed duration values, the symbol
  ##                 is always rendered as 2 slashes and 2 dots. See Read, pg. 223-224.
  attribute rend { data.BEATRPT.REND }
att.anl.bend.attributes = att.common.anl.attributes
att.ges.bend.attributes = att.ges.bend.attribute.amount
att.ges.bend.attribute.amount =
  
  ## records the amount of detuning. The decimal values should be rendered as a
  ##                 fraction (or an integer plus a fraction) along with the bend symbol.
  attribute amount { data.BEND.AMOUNT }?
att.log.bend.attributes =
  att.controlevent.attributes, att.startendid.attributes
att.vis.bend.attributes =
  att.color.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.vis.bend.attribute.bezier,
  att.vis.bend.attribute.bulge,
  att.vis.bend.attribute.rend
att.vis.bend.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy
  ##                 coordinates, eg. 19 45 -32 118.
  attribute bezier { xsd:NMTOKENS }?
att.vis.bend.attribute.bulge =
  
  ## describes the curve as a set of distance values above or below an imaginary line
  ##                 connecting the endpoints of the curve. The bulge attribute must contain one or more
  ##                 values of type NUMBER.
  attribute bulge { xsd:NMTOKENS }?
att.vis.bend.attribute.rend =
  
  ## records the appearance of the curve or line.
  attribute rend { data.CURVERENDITION }?
att.anl.breath.attributes = att.common.anl.attributes
att.ges.breath.attributes = empty
att.log.breath.attributes =
  att.controlevent.attributes, att.startendid.attributes
att.vis.breath.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes
att.anl.btrem.attributes = att.common.anl.attributes
att.ges.btrem.attributes = empty
att.log.btrem.attributes =
  att.event.attributes,
  att.log.btrem.attribute.form,
  att.log.btrem.attribute.num,
  att.log.btrem.attribute.slash
att.log.btrem.attribute.form =
  
  ## describes the bowed tremolo as measured or unmeasured.
  attribute form {
    
    ##
    "meas"
    | 
      ##
      "unmeas"
  }?
att.log.btrem.attribute.num =
  
  ## used to store a number to be rendered along with the note. See Read, p. 394, ex.
  ##                 23-21, line 5.
  attribute num { data.INTEGERPOSITIVE }?
att.log.btrem.attribute.slash =
  
  ## indicates the number of slashes to be drawn. The number of slashes indicates the
  ##                 exact note values in an aural rendition of measured tremolandi, i.e., 4ths or
  ##                 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5, 256ths=6. See Read, p. 393-394. The
  ##                 stem modifier (slash or z) must also be explicity set on the child note or chord
  ##                 element for a complete visual representation.
  attribute slash { data.SLASH }?
att.vis.btrem.attributes = att.vis.btrem.attribute.num.place
att.vis.btrem.attribute.num.place =
  
  ## records where the number accompanying the tremolo note or chord should be
  ##                 rendered.
  attribute num.place { data.PLACE }?
att.anl.chord.attributes =
  att.common.anl.attributes,
  att.anl.chord.attribute.hfunc,
  att.anl.chord.attribute.mfunc
att.anl.chord.attribute.hfunc =
  
  ## describes the chord's harmonic function in any convenient typology.
  attribute hfunc { text }?
att.anl.chord.attribute.mfunc =
  
  ## describes the chord's melodic function in any convenient typology.
  attribute mfunc { text }?
att.ges.chord.attributes =
  att.ges.chord.attribute.artic.ges,
  att.ges.chord.attribute.detune,
  att.ges.chord.attribute.dur.ges,
  att.ges.chord.attribute.grace,
  att.ges.chord.attribute.grace.time,
  att.ges.chord.attribute.instr
att.ges.chord.attribute.artic.ges =
  
  ## records performed articulation that differs from the written value.
  attribute artic.ges { data.ARTICULATIONS }?
att.ges.chord.attribute.detune =
  
  ##
  attribute detune { text }?
att.ges.chord.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.chord.attribute.grace =
  
  ## marks this chord as a grace and records from which note/chord it should "steal"
  ##                 time.
  attribute grace { data.GRACE }?
att.ges.chord.attribute.grace.time =
  
  ## records the amount of time to be "stolen" from a non-grace note/chord.
  attribute grace.time { data.PERCENT }?
att.ges.chord.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.log.chord.attributes =
  att.event.attributes,
  att.log.chord.attribute.artic,
  att.log.chord.attribute.beam,
  att.log.chord.attribute.dots,
  att.log.chord.attribute.dur,
  att.log.chord.attribute.fermata,
  att.log.chord.attribute.lv,
  att.log.chord.attribute.slur,
  att.log.chord.attribute.syl,
  att.log.chord.attribute.tie,
  att.log.chord.attribute.tuplet
att.log.chord.attribute.artic =
  
  ## encodes the written articulation(s). Articulations are normally encoded in order
  ##                 from the notehead outward; that is, away from the stem. See additional notes at
  ##                 att.vis.note. Only articulations should be encoded in the artic attribute;
  ##                 fingerings should be encoded using the <dir> element.
  attribute artic { data.ARTICULATIONS }?
att.log.chord.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
att.log.chord.attribute.dots =
  
  ## encodes the number of written dots of augmentation.
  attribute dots { data.AUGMENTDOT }?
att.log.chord.attribute.dur =
  
  ## encodes logical; that is, written, duration.
  attribute dur { data.DURATION }?
att.log.chord.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information
  ##                 about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute fermata { data.PLACE }?
att.log.chord.attribute.lv =
  
  ## indicates the attachment of an l.v. (laissez vibrer) sign to this
  ##                 element.
  attribute lv { data.BOOLEAN }?
att.log.chord.attribute.slur =
  
  ## indicates that this element participates in a slur.
  attribute slur { data.SLURS }?
att.log.chord.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
att.log.chord.attribute.tie =
  
  ## indicates that this element participates in a tie.
  attribute tie { data.TIE }?
att.log.chord.attribute.tuplet =
  
  ## indicates that this element participates in a tuplet.
  attribute tuplet { data.TUPLET }?
att.vis.chord.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.xy.attributes,
  att.vis.chord.attribute.beam.with,
  att.vis.chord.attribute.coloration,
  att.vis.chord.attribute.dot.ho,
  att.vis.chord.attribute.dot.vo,
  att.vis.chord.attribute.dot.x,
  att.vis.chord.attribute.dot.y,
  att.vis.chord.attribute.headshape,
  att.vis.chord.attribute.size,
  att.vis.chord.attribute.slur.dir,
  att.vis.chord.attribute.slur.rend,
  att.vis.chord.attribute.stem.dir,
  att.vis.chord.attribute.stem.len,
  att.vis.chord.attribute.stem.mod,
  att.vis.chord.attribute.stem.pos,
  att.vis.chord.attribute.stem.with,
  att.vis.chord.attribute.stem.x,
  att.vis.chord.attribute.stem.y,
  att.vis.chord.attribute.tie.dir,
  att.vis.chord.attribute.tie.rend
att.vis.chord.attribute.beam.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.PLACE }?
att.vis.chord.attribute.coloration =
  
  ## indicates inverse coloration; that is, the notehead is void when it would
  ##                 otherwise be filled and vice versa. Do not confuse this with visual color.
  attribute coloration {
    
    ##
    "inverse"
  }?
att.vis.chord.attribute.dot.ho =
  
  ## records the horizontal offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.ho { data.VISUALOFFSET }?
att.vis.chord.attribute.dot.vo =
  
  ## records the vertical offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.vo { data.VISUALOFFSET }?
att.vis.chord.attribute.dot.x =
  
  ## records the absolute horizontal position of the augmentation dot.
  attribute dot.x { data.NUMBER }?
att.vis.chord.attribute.dot.y =
  
  ## records the absolute vertical position of the augmentation dot.
  attribute dot.y { data.NUMBER }?
att.vis.chord.attribute.headshape =
  
  ## indicates a cluster notehead should be displayed instead of individual
  ##                 noteheads. See Read, p. 320-321 re: tone clusters. 
  attribute headshape { data.CLUSTER }?
att.vis.chord.attribute.size =
  
  ## describes the relative size of the chord.
  attribute size { data.SIZE }?
att.vis.chord.attribute.slur.dir =
  
  ## indicates the direction of a slur.
  attribute slur.dir { data.SLURDIRECTION }?
att.vis.chord.attribute.slur.rend =
  
  ## describes the rendering style for slurs.
  attribute slur.rend {
    
    ##
    "dotted"
    | 
      ##
      "dashed"
  }?
att.vis.chord.attribute.stem.dir =
  
  ## describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
att.vis.chord.attribute.stem.len =
  
  ## encodes the stem length.
  attribute stem.len { data.NUMBER }?
att.vis.chord.attribute.stem.mod =
  
  ## encodes any stem "modifiers"; that is, symbols rendered on the stem, such as
  ##                 tremolo or Sprechstimme indicators.
  attribute stem.mod { data.STEMMODIFIER }?
att.vis.chord.attribute.stem.pos =
  
  ## records the position of the stem in relation to the notehead(s).
  attribute stem.pos { data.STEMPOSITION }?
att.vis.chord.attribute.stem.with =
  
  ## contains an indication of which staff a note or chord that logically belongs to
  ##                 the current staff should be visually placed on.
  attribute stem.with { data.PLACE }?
att.vis.chord.attribute.stem.x =
  
  ## records the x coordinate of the stem's attachment point.
  attribute stem.x { data.NUMBER }?
att.vis.chord.attribute.stem.y =
  
  ## records the y coordinate of the stem's attachment point.
  attribute stem.y { data.NUMBER }?
att.vis.chord.attribute.tie.dir =
  
  ## determines the direction of a tie.
  attribute tie.dir { data.TIEDIRECTION }?
att.vis.chord.attribute.tie.rend =
  
  ## describes the rendering style of a tie.
  attribute tie.rend {
    
    ##
    "dotted"
    | 
      ##
      "dashed"
  }?
att.anl.clefchange.attributes = att.common.anl.attributes
att.ges.clefchange.attributes = empty
att.log.clefchange.base.attributes =
  att.log.clefchange.base.attribute.line,
  att.log.clefchange.base.attribute.octave.default,
  att.log.clefchange.base.attribute.shape,
  att.log.clefchange.base.attribute.trans
att.log.clefchange.base.attribute.line =
  
  ## records the position of the clef.
  attribute line { data.CLEFLINE }?
att.log.clefchange.base.attribute.octave.default =
  
  ## sets the value of the oct attribute of the event following the clefchange, if
  ##                 the event doesn't already have an oct attribute.
  attribute octave.default { data.OCTAVE }?
att.log.clefchange.base.attribute.shape =
  
  ## indicates the shape of the clef symbol.
  attribute shape { data.CLEFSHAPE }?
att.log.clefchange.base.attribute.trans =
  
  ## records an octave shift to be applied to the clef.
  attribute trans { data.CLEFTRAN }?
att.log.clefchange.attributes = att.log.clefchange.base.attributes
att.vis.clefchange.attributes =
  att.altsym.attributes, att.color.attributes
att.anl.dir.attributes = att.common.anl.attributes
att.ges.dir.attributes = att.ges.dir.attribute.dur.ges
att.ges.dir.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.dir.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.dir.attribute.dur
att.log.dir.attribute.dur =
  
  ## encodes the logical and visual durations of the directive. If cases arise where
  ##                 the logical and visual durations differ, it may be necessary to add a dur.vis
  ##                 attribute. Please note that the dur attribute is not a true duration, but rather a
  ##                 time stamp for the end point of the directive.
  attribute dur { data.MEASUREBEAT }?
att.vis.dir.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.anl.dynam.attributes = att.common.anl.attributes
att.ges.dynam.attributes =
  att.ges.dynam.attribute.dur.ges, att.ges.dynam.attribute.value
att.ges.dynam.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.dynam.attribute.value =
  
  ##
  attribute value { data.MIDIVALUE }?
att.log.dynam.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.dynam.attribute.dur
att.log.dynam.attribute.dur =
  
  ## encodes the logical and visual durations of the dynamic symbol or text. If cases
  ##                 arise where the logical and visual durations differ, it may be necessary to add a
  ##                 dur.vis attribute. Please note that the dur attribute is not a true duration, but
  ##                 rather a time stamp for the end point of the dynamic mark.
  attribute dur { data.MEASUREBEAT }?
att.vis.dynam.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.anl.fermata.attributes = att.common.anl.attributes
att.ges.fermata.attributes = att.ges.fermata.attribute.dur.ges
att.ges.fermata.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.fermata.attributes =
  att.controlevent.attributes, att.startendid.attributes
att.vis.fermata.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.fermata.attribute.form
att.vis.fermata.attribute.form =
  
  ## describes the visual appearance of the fermata.
  attribute form {
    
    ##
    "inv"
    | 
      ##
      "norm"
  }?
att.anl.ftrem.attributes = att.common.anl.attributes
att.ges.ftrem.attributes = att.ges.ftrem.attribute.form
att.ges.ftrem.attribute.form =
  
  ## encodes whether the tremolo is measured or unmeasured.
  attribute form {
    
    ##
    "meas"
    | 
      ##
      "unmeas"
  }?
att.log.ftrem.attributes = att.event.attributes
att.vis.ftrem.attributes = att.vis.ftrem.attribute.slash
att.vis.ftrem.attribute.slash =
  
  ## indicates the number of slashes required - 4ths or 8ths=1, 16ths=2, 32nds=3,
  ##                 64ths=4, 128ths=5, 256ths=6.
  attribute slash { data.SLASH }
att.anl.gliss.attributes = att.common.anl.attributes
att.ges.gliss.attributes = empty
att.log.gliss.attributes =
  att.controlevent.attributes, att.startendid.attributes
att.vis.gliss.attributes =
  att.color.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.vis.gliss.attribute.rend,
  att.vis.gliss.attribute.text
att.vis.gliss.attribute.rend =
  
  ## captures the appearance of the glissando mark.
  attribute rend { data.LINERENDITION }?
att.vis.gliss.attribute.text =
  
  ## records any text, such as 'gliss.', that accompanies the glissando mark.
  attribute text { text }?
att.anl.hairpin.attributes = att.common.anl.attributes
att.ges.hairpin.attributes = att.ges.hairpin.attribute.dur.ges
att.ges.hairpin.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.hairpin.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.hairpin.attribute.dur,
  att.log.hairpin.attribute.form
att.log.hairpin.attribute.dur =
  
  ## encodes the logical and visual duration of the hairpin. If the logical and
  ##                 visual durations differ, it may be necessary to add a dur.vis attribute. Please note
  ##                 that the dur attribute is not a true duration, but rather a time stamp for the end
  ##                 point of the hairpin.
  attribute dur { data.MEASUREBEAT }?
att.log.hairpin.attribute.form =
  
  ## captures the function of the hairpin.
  attribute form {
    
    ##
    "cres"
    | 
      ##
      "dim"
  }
att.vis.hairpin.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.vis.hairpin.attribute.width
att.vis.hairpin.attribute.width =
  
  ## specifies the distance, in one-half interline units, between the points of the
  ##                 open end of the mark.
  attribute width { data.NUMBER }?
att.anl.halfmrpt.attributes = att.common.anl.attributes
att.ges.halfmrpt.attributes = empty
att.log.halfmrpt.attributes =
  att.event.attributes, att.log.halfmrpt.attribute.dur
att.log.halfmrpt.attribute.dur =
  
  ## states the logical duration of the repeat symbol.
  attribute dur { data.DURATION }?
att.vis.halfmrpt.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.attributes,
  att.vis.halfmrpt.attribute.expand
att.vis.halfmrpt.attribute.expand =
  
  ## indicates whether or not to render the source material.
  attribute expand { data.BOOLEAN }?
att.anl.harm.attributes = att.common.anl.attributes
att.ges.harm.attributes = att.ges.harm.attribute.dur.ges
att.ges.harm.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.harm.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.harm.attribute.chordref,
  att.log.harm.attribute.dur
att.log.harm.attribute.chordref =
  
  ## contains a reference to a predefined chorddef element.
  attribute chordref { xsd:IDREF }?
att.log.harm.attribute.dur =
  
  ## encodes the logical and visual duration of the harmony. If the logical and
  ##                 visual durations differ, it may be necessary to add a dur.vis attribute. Please note
  ##                 that the dur attribute here is not a true duration, but rather a time stamp for the
  ##                 end point of the harmony.
  attribute dur { data.MEASUREBEAT }?
att.vis.harm.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes,
  att.vis.harm.attribute.extender,
  att.vis.harm.attribute.rendgrid
att.vis.harm.attribute.extender =
  
  ## indicates the presence of an extension symbol, typically a dash or underscore,
  ##                 drawn from the end of the harmonic indication to the point indicated by the dur
  ##                 attribute.
  attribute extender { data.BOOLEAN }?
att.vis.harm.attribute.rendgrid =
  
  ## when set to 'grid', the chord tablature grid defined in the chordtable should be
  ##                 rendered instead of the text contents of the harm element; if rendgrid equals
  ##                 'gridname', both the harm element's text and the grid should be displayed;
  ##                 otherwise, only the 'name' of the chord, i.e., the text content of the harm element,
  ##                 e.g. 'Cmaj' or 'V7/III', should be rendered.
  attribute rendgrid {
    
    ##
    "grid"
    | 
      ##
      "gridname"
  }?
att.anl.harppedal.attributes = att.common.anl.attributes
att.ges.harppedal.attributes = att.ges.harppedal.attribute.dur.ges
att.ges.harppedal.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.harppedal.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.harppedal.attribute.c,
  att.log.harppedal.attribute.d,
  att.log.harppedal.attribute.e,
  att.log.harppedal.attribute.f,
  att.log.harppedal.attribute.g,
  att.log.harppedal.attribute.a,
  att.log.harppedal.attribute.b
att.log.harppedal.attribute.c =
  
  ## indicates the setting for the C strings.
  [ a:defaultValue = "n" ]
  attribute c {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.log.harppedal.attribute.d =
  
  ## indicates the setting for the D strings.
  [ a:defaultValue = "n" ]
  attribute d {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.log.harppedal.attribute.e =
  
  ## indicates the setting for the E strings.
  [ a:defaultValue = "n" ]
  attribute e {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.log.harppedal.attribute.f =
  
  ## indicates the setting for the F strings.
  [ a:defaultValue = "n" ]
  attribute f {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.log.harppedal.attribute.g =
  
  ## indicates the setting for the G strings.
  [ a:defaultValue = "n" ]
  attribute g {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.log.harppedal.attribute.a =
  
  ## indicates the setting for the A strings.
  [ a:defaultValue = "n" ]
  attribute a {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.log.harppedal.attribute.b =
  
  ## indicates the setting for the B strings.
  [ a:defaultValue = "n" ]
  attribute b {
    
    ##
    "f"
    | 
      ##
      "n"
    | 
      ##
      "s"
  }?
att.vis.harppedal.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes
att.anl.lyrics.attributes = att.common.anl.attributes
att.ges.lyrics.attributes = empty
att.log.lyrics.attributes =
  att.log.lyrics.attribute.layer, att.log.lyrics.attribute.staff
att.log.lyrics.attribute.layer =
  
  ## signifies the layer to the lyrics apply.
  attribute layer { data.INTEGERPOSITIVE }?
att.log.lyrics.attribute.staff =
  
  ## signifies the staff to the lyrics apply.
  attribute staff { data.INTEGERPOSITIVE }?
att.vis.lyrics.attributes =
  att.placement.attributes, att.typography.attributes
att.anl.measure.attributes = att.common.anl.attributes
att.ges.measure.attributes =
  att.ges.measure.attribute.tstamp.ges,
  att.ges.measure.attribute.tstamp.real
att.ges.measure.attribute.tstamp.ges =
  
  ## used to record the onset time in pulses per quarter note (ppq, MusicXML
  ##                 divisions, or MIDI clicks) since the start of the file.
  attribute tstamp.ges { data.INTEGERNONNEGATIVE }?
att.ges.measure.attribute.tstamp.real =
  
  ## holds the onset time as a real-time offset, i.e., HH:MM:SS.ss, since the
  ##                 beginning of the file.
  attribute tstamp.real { data.ISOTIME }?
att.log.measure.attributes =
  att.log.measure.attribute.complete,
  att.log.measure.attribute.control,
  att.log.measure.attribute.left,
  att.log.measure.attribute.measref,
  att.log.measure.attribute.right
att.log.measure.attribute.complete =
  
  ## allows the encoding of whether a measure matches the prevailing meter: a value
  ##                 of 'c' indicates a metrically complete measure, 'i' indicates a measure with not
  ##                 enough beats, while 'o' is for measures with too many beats.
  attribute complete {
    
    ##
    "c"
    | 
      ##
      "i"
    | 
      ##
      "o"
  }?
att.log.measure.attribute.control =
  
  ## indicates whether or not the right barline is "controlling", that is, indicates
  ##                 a point of alignment across all the parts. Barlines within a score are usually
  ##                 'controlling'; that is, they 'line up'. Barlines within a part may or may not be
  ##                 'controlling' with respect to other parts.
  attribute control { data.BOOLEAN }?
att.log.measure.attribute.left =
  
  ## indicates the visual rendition of the left barline. It is present here only for
  ##                 facilitation of translation from legacy encodings which use it. Usually, it can be
  ##                 safely ignored.
  attribute left { data.BARRENDITION }?
att.log.measure.attribute.measref =
  
  ## If this measure's contents duplicate another (probably preceding) measure, the
  ##                 measure which contains the content being repeated can be referenced using the
  ##                 measref attribute.
  attribute measref { xsd:IDREF }?
att.log.measure.attribute.right =
  
  ## indicates the function of the right barline and is structurally
  ##                 important.
  attribute right { data.BARRENDITION }?
att.vis.measure.attributes =
  att.vis.measure.attribute.barplace,
  att.vis.measure.attribute.taktplace,
  att.vis.measure.attribute.width
att.vis.measure.attribute.barplace =
  
  ## describes the placement of the right barline.
  attribute barplace { data.BARPLACE }?
att.vis.measure.attribute.taktplace =
  
  ## must be a number between 1 and the number of stafflines. For example, a value of
  ##                 '5' puts the barline through the top line of a 5-line staff.
  attribute taktplace { data.STAFFLOC }?
att.vis.measure.attribute.width =
  
  ## records a fixed width for the measure required by some rendering
  ##                 software.
  attribute width { data.NUMBER }?
att.anl.mordent.attributes = att.common.anl.attributes
att.ges.mordent.attributes = empty
att.log.mordent.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.mordent.attribute.accidupper,
  att.log.mordent.attribute.accidlower,
  att.log.mordent.attribute.form,
  att.log.mordent.attribute.long
att.log.mordent.attribute.accidupper =
  
  ## records the accidental associated with the upper neighboring note.
  attribute accidupper { data.ACCIDENTAL.EXPLICIT }?
att.log.mordent.attribute.accidlower =
  
  ## records the accidental associated with the lower neighboring note.
  attribute accidlower { data.ACCIDENTAL.EXPLICIT }?
att.log.mordent.attribute.form =
  
  ## 'norm' signals the normal form, that is, the written note, followed by its lower
  ##                 neighbor, with a return to the written note, while 'inv' indicates the inverted
  ##                 form, that is, the principal note, followed by its upper neighbor, with a return to
  ##                 the principal note. Traditionally, the 'normal' mordent is written as a short wavy
  ##                 line with a vertical line through it and the inverted mordent is written without the
  ##                 vertical line. However, the meaning of these signs is sometimes reversed. See Read,
  ##                 p. 245-246. Another attribute in the visual domain would be necessary in order to be
  ##                 completely explicit about which visual symbol is actually to be rendered.
  attribute form {
    
    ##
    "inv"
    | 
      ##
      "norm"
  }?
att.log.mordent.attribute.long =
  
  ## When the long attribute is set to 'yes', a double or long mordent, consisting of
  ##                 5 notes, is indicated.
  attribute long { data.BOOLEAN }?
att.vis.mordent.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes
att.anl.mrest.attributes = att.common.anl.attributes
att.ges.mrest.attributes =
  att.ges.mrest.attribute.dur.ges, att.ges.mrest.attribute.instr
att.ges.mrest.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.mrest.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.log.mrest.attributes =
  att.event.attributes, att.log.mrest.attribute.fermata
att.log.mrest.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information
  ##                 about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute fermata { data.PLACE }?
att.vis.mrest.attributes =
  att.altsym.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.mrest.attribute.cutout,
  att.vis.mrest.attribute.dur.vis,
  att.vis.mrest.attribute.size
att.vis.mrest.attribute.cutout =
  
  ## When set to 'rest' the cutout attribute indicates that the staff lines are to be
  ##                 displayed but not the rest itself. When set to 'staff' even the staff lines should
  ##                 not be drawn for this measure.
  attribute cutout {
    
    ##
    "rest"
    | 
      ##
      "staff"
  }?
att.vis.mrest.attribute.dur.vis =
  
  ## records the durational symbol used in the source.
  attribute dur.vis { data.DURATION }?
att.vis.mrest.attribute.size =
  
  ## describes the relative size of the measure rest symbol.
  attribute size { data.SIZE }?
att.anl.mrpt.attributes = att.common.anl.attributes
att.ges.mrpt.attributes = empty
att.log.mrpt.attributes =
  att.event.attributes, att.log.mrpt.attribute.measref
att.log.mrpt.attribute.measref =
  
  ## refers to the measure which contains the content being repeated.
  attribute measref { xsd:IDREF }?
att.vis.mrpt.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.vis.mrpt.attribute.expand
att.vis.mrpt.attribute.expand =
  
  ## indicates whether to render the source measure instead of the repeat
  ##                 symbol.
  attribute expand { data.BOOLEAN }?
att.anl.mrpt2.attributes = att.common.anl.attributes
att.ges.mrpt2.attributes = empty
att.log.mrpt2.attributes =
  att.event.attributes, att.log.mrpt2.attribute.measref
att.log.mrpt2.attribute.measref =
  
  ## refers to the measures which contain the content being repeated.
  attribute measref { xsd:IDREFS }?
att.vis.mrpt2.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.vis.mrpt2.attribute.expand
att.vis.mrpt2.attribute.expand =
  
  ## indicates whether to render the source measures instead of the repeat
  ##                 symbol.
  attribute expand { data.BOOLEAN }?
att.anl.mspace.attributes = att.common.anl.attributes
att.ges.mspace.attributes =
  att.ges.mspace.attribute.dur.ges, att.ges.mspace.attribute.instr
att.ges.mspace.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.mspace.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.log.mspace.attributes =
  att.event.attributes, att.log.mspace.attribute.fermata
att.log.mspace.attribute.fermata =
  
  ## used to indicate the attachment of a fermata to this element. If visual
  ##                 information about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute fermata { data.PLACE }?
att.vis.mspace.attributes =
  att.altsym.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.mspace.attribute.cutout,
  att.vis.mspace.attribute.dur.vis
att.vis.mspace.attribute.cutout =
  
  ## When set to 'rest' the cutout attribute indicates that the staff lines are to be
  ##                 displayed but not the rest itself. When set to 'staff' even the staff lines should
  ##                 not be drawn for this measure.
  attribute cutout {
    
    ##
    "rest"
    | 
      ##
      "staff"
  }?
att.vis.mspace.attribute.dur.vis =
  
  ## used to record a non-standard durational symbol used in the source.
  attribute dur.vis { data.DURATION }?
att.anl.multirest.attributes = att.common.anl.attributes
att.ges.multirest.attributes =
  att.ges.multirest.attribute.dur.ges, att.ges.multirest.attribute.instr
att.ges.multirest.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.multirest.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.log.multirest.attributes =
  att.event.attributes, att.log.multirest.attribute.num
att.log.multirest.attribute.num =
  
  ## contains the number of measures of rest.
  attribute num { data.INTEGERPOSITIVE }
att.vis.multirest.attributes =
  att.altsym.attributes, att.vis.multirest.attribute.block
att.vis.multirest.attribute.block =
  
  ## When the block attribute is used, combinations of the 1, 2, &amp; 4
  ##                 measure rest forms (Read, p. 104) should be rendered instead of the modern form or
  ##                 the alternative symbol.
  attribute block { data.BOOLEAN }?
att.anl.multirpt.attributes = att.common.anl.attributes
att.ges.multirpt.attributes = empty
att.log.multirpt.attributes =
  att.event.attributes,
  att.log.multirpt.attribute.measref,
  att.log.multirpt.attribute.num
att.log.multirpt.attribute.measref =
  
  ## refers to the measures which contain the content being repeated.
  attribute measref { xsd:IDREFS }?
att.log.multirpt.attribute.num =
  
  ## contains the number of measures to be repeated.
  attribute num { data.INTEGERPOSITIVE }
att.vis.multirpt.attributes =
  att.altsym.attributes, att.vis.multirpt.attribute.expand
att.vis.multirpt.attribute.expand =
  
  ## indicates whether or not to render the source measures instead of the repeat
  ##                 marking.
  attribute expand { data.BOOLEAN }?
att.anl.nota.attributes =
  att.common.anl.attributes,
  att.anl.nota.attribute.accid.cautionary,
  att.anl.nota.attribute.accid.editorial,
  att.anl.nota.attribute.hfunc,
  att.anl.nota.attribute.inth,
  att.anl.nota.attribute.intm,
  att.anl.nota.attribute.mfunc,
  att.anl.nota.attribute.pclass,
  att.anl.nota.attribute.psolfa
att.anl.nota.attribute.accid.cautionary =
  
  ## indicates a cautionary accidental accompanying the nota.
  attribute accid.cautionary { data.ACCIDENTAL.EXPLICIT }?
att.anl.nota.attribute.accid.editorial =
  
  ## indicates an editorial accidental accompanying the nota.
  attribute accid.editorial { data.ACCIDENTAL.EXPLICIT }?
att.anl.nota.attribute.hfunc =
  
  ## contains an indication of the harmonic function of this nota.
  attribute hfunc { text }?
att.anl.nota.attribute.inth =
  
  ## encodes the harmonic interval from a pitch in same chord.
  attribute inth { text }?
att.anl.nota.attribute.intm =
  
  ## encodes the melodic interval from the previous neume.
  attribute intm { text }?
att.anl.nota.attribute.mfunc =
  
  ## contains an indication of the melodic function of this nota.
  attribute mfunc { text }?
att.anl.nota.attribute.pclass =
  
  ## holds pitch class information.
  attribute pclass { data.PITCHCLASS }?
att.anl.nota.attribute.psolfa =
  
  ## contains solfa designation, e.g., do, re, mi, etc., in either fixed or movable
  ##                 Do systems.
  attribute psolfa { text }?
att.ges.nota.tablature.attributes =
  att.ges.nota.tablature.attribute.tab.fret,
  att.ges.nota.tablature.attribute.tab.string
att.ges.nota.tablature.attribute.tab.fret =
  
  ## records the fret at which a string should be stopped.
  attribute tab.fret { data.FRETNUMBER }?
att.ges.nota.tablature.attribute.tab.string =
  
  ## records which string is to be played.
  attribute tab.string { data.STRINGNUMBER }?
att.ges.nota.base.attributes =
  att.ges.nota.base.attribute.num,
  att.ges.nota.base.attribute.numbase,
  att.ges.nota.base.attribute.accid.ges,
  att.ges.nota.base.attribute.artic.ges,
  att.ges.nota.base.attribute.detune,
  att.ges.nota.base.attribute.dur.ges,
  att.ges.nota.base.attribute.gliss,
  att.ges.nota.base.attribute.grace,
  att.ges.nota.base.attribute.grace.time,
  att.ges.nota.base.attribute.instr,
  att.ges.nota.base.attribute.oct.ges,
  att.ges.nota.base.attribute.pname.ges,
  att.ges.nota.base.attribute.pnum
att.ges.nota.base.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute num { data.INTEGERPOSITIVE }?
att.ges.nota.base.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.INTEGERPOSITIVE }?
att.ges.nota.base.attribute.accid.ges =
  
  ## records the performed pitch inflection when it differs from the written
  ##                 accidental.
  attribute accid.ges { data.ACCIDENTAL.IMPLICIT }?
att.ges.nota.base.attribute.artic.ges =
  
  ## records performed articulation that differs from the written value.
  attribute artic.ges { data.ARTICULATIONS }?
att.ges.nota.base.attribute.detune =
  
  ##
  attribute detune { text }?
att.ges.nota.base.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.nota.base.attribute.gliss =
  
  ## indicates that this element participates in a glissando.
  attribute gliss { data.GLISSANDO }?
att.ges.nota.base.attribute.grace =
  
  ## marks this nota as a grace and records from which note/chord it should "steal"
  ##                 time.
  attribute grace { data.GRACE }?
att.ges.nota.base.attribute.grace.time =
  
  ## records the amount of time to be "stolen" from a non-grace note or chord.
  attribute grace.time { data.PERCENT }?
att.ges.nota.base.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.ges.nota.base.attribute.oct.ges =
  
  ## records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
att.ges.nota.base.attribute.pname.ges =
  
  ## records pitch name information that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
att.ges.nota.base.attribute.pnum =
  
  ## holds a pitch-to-number mapping, a base-40 or MIDI note number, for
  ##                 example.
  attribute pnum { data.PITCHNUMBER }?
att.ges.nota.attributes =
  att.ges.nota.base.attributes, att.ges.nota.tablature.attributes
att.log.nota.attributes =
  att.event.attributes,
  att.log.nota.attribute.accid,
  att.log.nota.attribute.corona,
  att.log.nota.attribute.dots,
  att.log.nota.attribute.dur,
  att.log.nota.attribute.lig,
  att.log.nota.attribute.oct,
  att.log.nota.attribute.pname,
  att.log.nota.attribute.syl
att.log.nota.attribute.accid =
  
  ## captures a written accidental symbol.
  attribute accid { data.ACCIDENTAL.EXPLICIT }?
att.log.nota.attribute.corona =
  
  ## indicates the attachment of a corona (fermata) to this element. If visual
  ##                 information about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute corona { data.PLACE }?
att.log.nota.attribute.dots =
  
  ## encodes the number of written dots of augmentation.
  attribute dots { data.AUGMENTDOT }?
att.log.nota.attribute.dur =
  
  ## encodes logical; that is, written, duration.
  attribute dur { data.DURATION.MENSURAL }?
att.log.nota.attribute.lig =
  
  ## indicates this element's participation in a ligature.
  attribute lig {
    
    ##
    "recta"
    | 
      ##
      "obliqua"
  }?
att.log.nota.attribute.oct =
  
  ## captures written octave information.
  attribute oct { data.OCTAVE }?
att.log.nota.attribute.pname =
  
  ## contains the written pitch name.
  attribute pname { data.PITCHNAME }?
att.log.nota.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
att.vis.nota.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.xy.attributes,
  att.vis.nota.attribute.accid.ho,
  att.vis.nota.attribute.beam.with,
  att.vis.nota.attribute.coloration,
  att.vis.nota.attribute.colored,
  att.vis.nota.attribute.dot.ho,
  att.vis.nota.attribute.dot.vo,
  att.vis.nota.attribute.dot.x,
  att.vis.nota.attribute.dot.y,
  att.vis.nota.attribute.enclose.accid,
  att.vis.nota.attribute.enclose.note,
  att.vis.nota.attribute.headshape,
  att.vis.nota.attribute.size,
  att.vis.nota.attribute.slur.dir,
  att.vis.nota.attribute.slur.rend,
  att.vis.nota.attribute.stem.dir,
  att.vis.nota.attribute.stem.len,
  att.vis.nota.attribute.stem.mod,
  att.vis.nota.attribute.stem.pos,
  att.vis.nota.attribute.stem.with,
  att.vis.nota.attribute.stem.x,
  att.vis.nota.attribute.stem.y,
  att.vis.nota.attribute.tie.dir,
  att.vis.nota.attribute.tie.rend,
  att.vis.nota.attribute.visible
att.vis.nota.attribute.accid.ho =
  
  ## records the distance between the accidental and the note it modifies.
  attribute accid.ho { data.NUMBER }?
att.vis.nota.attribute.beam.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.PLACE }?
att.vis.nota.attribute.coloration =
  
  ## indicates inverse coloration; that is, the notehead is void when it would
  ##                 otherwise be filled and vice versa. Do not confuse this with visual color.
  attribute coloration {
    
    ##
    "inverse"
  }?
att.vis.nota.attribute.colored =
  
  ## indicates this note is 'colored' in the mensural notation sense.
  attribute colored { data.BOOLEAN }?
att.vis.nota.attribute.dot.ho =
  
  ## records the horizontal offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.ho { data.VISUALOFFSET }?
att.vis.nota.attribute.dot.vo =
  
  ## records the vertical offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.vo { data.VISUALOFFSET }?
att.vis.nota.attribute.dot.x =
  
  ## records the absolute horizontal position of the augmentation dot.
  attribute dot.x { data.NUMBER }?
att.vis.nota.attribute.dot.y =
  
  ## records the absolute vertical position of the augmentation dot.
  attribute dot.y { data.NUMBER }?
att.vis.nota.attribute.enclose.accid =
  
  ## encodes the characters used to enclose the accidental when it has a cautionary
  ##                 or editorial function.
  attribute enclose.accid { data.ENCLOSURE }?
att.vis.nota.attribute.enclose.note =
  
  ## encodes the characters used to enclose the note when it has a cautionary or
  ##                 editorial function.
  attribute enclose.note { data.ENCLOSURE }?
att.vis.nota.attribute.headshape =
  
  ## used to override the headshape normally used for the given duration.
  attribute headshape { data.HEADSHAPE }?
att.vis.nota.attribute.size =
  
  ## describes the relative size of the nota.
  attribute size { data.SIZE }?
att.vis.nota.attribute.slur.dir =
  
  ## indicates the direction of a slur.
  attribute slur.dir { data.SLURDIRECTION }?
att.vis.nota.attribute.slur.rend =
  
  ## describes the rendering style for slurs.
  attribute slur.rend {
    
    ##
    "dotted"
    | 
      ##
      "dashed"
  }?
att.vis.nota.attribute.stem.dir =
  
  ## describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
att.vis.nota.attribute.stem.len =
  
  ## encodes the stem length.
  attribute stem.len { data.NUMBER }?
att.vis.nota.attribute.stem.mod =
  
  ## encodes any stem "modifiers"; that is, symbols rendered on the stem, such as
  ##                 tremolo or Sprechstimme indicators.
  attribute stem.mod { data.STEMMODIFIER }?
att.vis.nota.attribute.stem.pos =
  
  ## records the position of the stem in relation to the notehead(s).
  attribute stem.pos { data.STEMPOSITION }?
att.vis.nota.attribute.stem.with =
  
  ## contains an indication of which staff a note or chord that logically belongs to
  ##                 the current staff should be visually placed on.
  attribute stem.with { data.PLACE }?
att.vis.nota.attribute.stem.x =
  
  ## records the x coordinate of the stem's attachment point.
  attribute stem.x { data.NUMBER }?
att.vis.nota.attribute.stem.y =
  
  ## records the y coordinate of the stem's attachment point.
  attribute stem.y { data.NUMBER }?
att.vis.nota.attribute.tie.dir =
  
  ## determines the direction of a tie.
  attribute tie.dir { data.TIEDIRECTION }?
att.vis.nota.attribute.tie.rend =
  
  ## describes the rendering style of a tie.
  attribute tie.rend {
    
    ##
    "dotted"
    | 
      ##
      "dashed"
  }?
att.vis.nota.attribute.visible =
  
  ## indicates if a notee should be displayed when the notation is rendered. A note
  ##                 with this attribute set to 'false' should also not be included in a sounded
  ##                 rendition.
  attribute visible { data.BOOLEAN }?
att.anl.note.attributes =
  att.common.anl.attributes,
  att.anl.note.attribute.accid.cautionary,
  att.anl.note.attribute.accid.editorial,
  att.anl.note.attribute.hfunc,
  att.anl.note.attribute.inth,
  att.anl.note.attribute.intm,
  att.anl.note.attribute.mfunc,
  att.anl.note.attribute.pclass,
  att.anl.note.attribute.psolfa
att.anl.note.attribute.accid.cautionary =
  
  ## indicates a cautionary accidental accompanying the note.
  attribute accid.cautionary { data.ACCIDENTAL.EXPLICIT }?
att.anl.note.attribute.accid.editorial =
  
  ## indicates an editorial accidental accompanying the note.
  attribute accid.editorial { data.ACCIDENTAL.EXPLICIT }?
att.anl.note.attribute.hfunc =
  
  ## contains an indication of the harmonic function of this note.
  attribute hfunc { text }?
att.anl.note.attribute.inth =
  
  ## encodes the harmonic interval from a pitch in same chord.
  attribute inth { text }?
att.anl.note.attribute.intm =
  
  ## encodes the melodic interval from the previous note.
  attribute intm { text }?
att.anl.note.attribute.mfunc =
  
  ## contains an indication of the melodic function of this note.
  attribute mfunc { text }?
att.anl.note.attribute.pclass =
  
  ## holds pitch class information.
  attribute pclass { data.PITCHCLASS }?
att.anl.note.attribute.psolfa =
  
  ## contains solfa designation, e.g., do, re, mi, etc., in either fixed or movable
  ##                 Do systems.
  attribute psolfa { text }?
att.ges.note.tablature.attributes =
  att.ges.note.tablature.attribute.tab.fret,
  att.ges.note.tablature.attribute.tab.string
att.ges.note.tablature.attribute.tab.fret =
  
  ## records the fret at which a string should be stopped.
  attribute tab.fret { data.FRETNUMBER }?
att.ges.note.tablature.attribute.tab.string =
  
  ## records which string is to be played.
  attribute tab.string { data.STRINGNUMBER }?
att.ges.note.base.attributes =
  att.ges.note.base.attribute.accid.ges,
  att.ges.note.base.attribute.artic.ges,
  att.ges.note.base.attribute.detune,
  att.ges.note.base.attribute.dur.ges,
  att.ges.note.base.attribute.gliss,
  att.ges.note.base.attribute.grace,
  att.ges.note.base.attribute.grace.time,
  att.ges.note.base.attribute.instr,
  att.ges.note.base.attribute.oct.ges,
  att.ges.note.base.attribute.pname.ges,
  att.ges.note.base.attribute.pnum
att.ges.note.base.attribute.accid.ges =
  
  ## records the performed pitch inflection when it differs from the written
  ##                 accidental.
  attribute accid.ges { data.ACCIDENTAL.IMPLICIT }?
att.ges.note.base.attribute.artic.ges =
  
  ## records performed articulation that differs from the written value.
  attribute artic.ges { data.ARTICULATIONS }?
att.ges.note.base.attribute.detune =
  
  ##
  attribute detune { text }?
att.ges.note.base.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.note.base.attribute.gliss =
  
  ## indicates that this element participates in a glissando.
  attribute gliss { data.GLISSANDO }?
att.ges.note.base.attribute.grace =
  
  ## marks this note as a grace and records from which note/chord it should "steal"
  ##                 time.
  attribute grace { data.GRACE }?
att.ges.note.base.attribute.grace.time =
  
  ## records the amount of time to be "stolen" from a non-grace note or chord.
  attribute grace.time { data.PERCENT }?
att.ges.note.base.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.ges.note.base.attribute.oct.ges =
  
  ## records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
att.ges.note.base.attribute.pname.ges =
  
  ## records pitch name information that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
att.ges.note.base.attribute.pnum =
  
  ## holds a pitch-to-number mapping, a base-40 or MIDI note number, for
  ##                 example.
  attribute pnum { data.PITCHNUMBER }?
att.ges.note.attributes =
  att.ges.note.base.attributes, att.ges.note.tablature.attributes
att.log.note.attributes =
  att.event.attributes,
  att.log.note.attribute.accid,
  att.log.note.attribute.artic,
  att.log.note.attribute.beam,
  att.log.note.attribute.dots,
  att.log.note.attribute.dur,
  att.log.note.attribute.fermata,
  att.log.note.attribute.lv,
  att.log.note.attribute.oct,
  att.log.note.attribute.pname,
  att.log.note.attribute.slur,
  att.log.note.attribute.syl,
  att.log.note.attribute.tie,
  att.log.note.attribute.tuplet
att.log.note.attribute.accid =
  
  ## captures a written accidental symbol.
  attribute accid { data.ACCIDENTAL.EXPLICIT }?
att.log.note.attribute.artic =
  
  ## encodes the written articulation(s). Articulations are normally encoded in order
  ##                 from the notehead outward; that is, away from the stem. See additional notes at
  ##                 att.vis.note. Only articulations should be encoded in the artic attribute;
  ##                 fingerings should be encoded using the <dir> element.
  attribute artic { data.ARTICULATIONS }?
att.log.note.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
att.log.note.attribute.dots =
  
  ## encodes the number of written dots of augmentation.
  attribute dots { data.AUGMENTDOT }?
att.log.note.attribute.dur =
  
  ## encodes logical; that is, written, duration.
  attribute dur { data.DURATION }?
att.log.note.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information
  ##                 about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute fermata { data.PLACE }?
att.log.note.attribute.lv =
  
  ## indicates the attachment of an l.v. (laissez vibrer) sign to this
  ##                 element.
  attribute lv { data.BOOLEAN }?
att.log.note.attribute.oct =
  
  ## captures written octave information.
  attribute oct { data.OCTAVE }?
att.log.note.attribute.pname =
  
  ## contains the written pitch name.
  attribute pname { data.PITCHNAME }?
att.log.note.attribute.slur =
  
  ## indicates that this element participates in a slur.
  attribute slur { data.SLURS }?
att.log.note.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
att.log.note.attribute.tie =
  
  ## indicates that this element participates in a tie.
  attribute tie { data.TIE }?
att.log.note.attribute.tuplet =
  
  ## indicates that this element participates in a tuplet.
  attribute tuplet { data.TUPLET }?
att.vis.note.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.xy.attributes,
  att.vis.note.attribute.accid.ho,
  att.vis.note.attribute.beam.with,
  att.vis.note.attribute.coloration,
  att.vis.note.attribute.dot.ho,
  att.vis.note.attribute.dot.vo,
  att.vis.note.attribute.dot.x,
  att.vis.note.attribute.dot.y,
  att.vis.note.attribute.enclose.accid,
  att.vis.note.attribute.enclose.note,
  att.vis.note.attribute.headshape,
  att.vis.note.attribute.size,
  att.vis.note.attribute.slur.dir,
  att.vis.note.attribute.slur.rend,
  att.vis.note.attribute.stem.dir,
  att.vis.note.attribute.stem.len,
  att.vis.note.attribute.stem.mod,
  att.vis.note.attribute.stem.pos,
  att.vis.note.attribute.stem.with,
  att.vis.note.attribute.stem.x,
  att.vis.note.attribute.stem.y,
  att.vis.note.attribute.tie.dir,
  att.vis.note.attribute.tie.rend,
  att.vis.note.attribute.visible
att.vis.note.attribute.accid.ho =
  
  ## records the distance between the accidental and the note it modifies.
  attribute accid.ho { data.NUMBER }?
att.vis.note.attribute.beam.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.PLACE }?
att.vis.note.attribute.coloration =
  
  ## indicates inverse coloration; that is, the notehead is void when it would
  ##                 otherwise be filled and vice versa. Do not confuse this with visual color.
  attribute coloration {
    
    ##
    "inverse"
  }?
att.vis.note.attribute.dot.ho =
  
  ## records the horizontal offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.ho { data.VISUALOFFSET }?
att.vis.note.attribute.dot.vo =
  
  ## records the vertical offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.vo { data.VISUALOFFSET }?
att.vis.note.attribute.dot.x =
  
  ## records the absolute horizontal position of the augmentation dot.
  attribute dot.x { data.NUMBER }?
att.vis.note.attribute.dot.y =
  
  ## records the absolute vertical position of the augmentation dot.
  attribute dot.y { data.NUMBER }?
att.vis.note.attribute.enclose.accid =
  
  ## encodes the characters used to enclose the accidental when it has a cautionary
  ##                 or editorial function. For an example of cautionary accidentals enclosed in
  ##                 parentheses or brackets, see Read, p. 131, ex. 9-14.
  attribute enclose.accid { data.ENCLOSURE }?
att.vis.note.attribute.enclose.note =
  
  ## encodes the characters used to enclose the note when it has a cautionary or
  ##                 editorial function.
  attribute enclose.note { data.ENCLOSURE }?
att.vis.note.attribute.headshape =
  
  ## used to override the headshape normally used for the given duration.
  attribute headshape { data.HEADSHAPE }?
att.vis.note.attribute.size =
  
  ## describes the relative size of the note.
  attribute size { data.SIZE }?
att.vis.note.attribute.slur.dir =
  
  ## indicates the direction of a slur.
  attribute slur.dir { data.SLURDIRECTION }?
att.vis.note.attribute.slur.rend =
  
  ## describes the rendering style for slurs.
  attribute slur.rend {
    
    ##
    "dotted"
    | 
      ##
      "dashed"
  }?
att.vis.note.attribute.stem.dir =
  
  ## describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
att.vis.note.attribute.stem.len =
  
  ## encodes the stem length.
  attribute stem.len { data.NUMBER }?
att.vis.note.attribute.stem.mod =
  
  ## encodes any stem "modifiers"; that is, symbols rendered on the stem, such as
  ##                 tremolo or Sprechstimme indicators.
  attribute stem.mod { data.STEMMODIFIER }?
att.vis.note.attribute.stem.pos =
  
  ## records the position of the stem in relation to the notehead(s).
  attribute stem.pos { data.STEMPOSITION }?
att.vis.note.attribute.stem.with =
  
  ## contains an indication of which staff a note or chord that logically belongs to
  ##                 the current staff should be visually placed on.
  attribute stem.with { data.PLACE }?
att.vis.note.attribute.stem.x =
  
  ## records the x coordinate of the stem's attachment point.
  attribute stem.x { data.NUMBER }?
att.vis.note.attribute.stem.y =
  
  ## records the y coordinate of the stem's attachment point.
  attribute stem.y { data.NUMBER }?
att.vis.note.attribute.tie.dir =
  
  ## determines the direction of a tie.
  attribute tie.dir { data.TIEDIRECTION }?
att.vis.note.attribute.tie.rend =
  
  ## describes the rendering style of a tie.
  attribute tie.rend {
    
    ##
    "dotted"
    | 
      ##
      "dashed"
  }?
att.vis.note.attribute.visible =
  
  ## indicates if a note should be displayed when the notation is rendered. A note
  ##                 with this attribute set to 'false' should also not be included in a sounded
  ##                 rendition.
  attribute visible { data.BOOLEAN }?
att.anl.octave.attributes = att.common.anl.attributes
att.ges.octave.attributes = att.ges.octave.attribute.dur.ges
att.ges.octave.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.octave.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.octave.attribute.coll,
  att.log.octave.attribute.dis,
  att.log.octave.attribute.dur,
  att.log.octave.attribute.place
att.log.octave.attribute.coll =
  
  ## encodes whether the octave displacement should be performed simultaneously with
  ##                 the written notes, i.e., 'colla ottava'. See Read, p. 47-48.
  attribute coll {
    
    ##
    "coll"
  }?
att.log.octave.attribute.dis =
  
  ## states the amount of displacement.
  attribute dis { data.OCTAVE.DIS }
att.log.octave.attribute.dur =
  
  ## encodes the logical and visual duration of the octave displacement. If logical
  ##                 and visual duration differ, it may be necessary to add a dur.vis attribute. Please
  ##                 note that the dur attribute here is not a true duration, but rather a time stamp for
  ##                 the end point of the octave displacement. Note that the dur attribute is NOT
  ##                 REQUIRED because the octave displacement can be visually instantaneous.
  attribute dur { data.MEASUREBEAT }?
att.log.octave.attribute.place =
  
  ## indicates direction of displacement and display location and therefore is
  ##                 REQUIRED.
  attribute place { data.PLACE }
att.vis.octave.attributes =
  att.xy.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.vis.octave.attribute.rend
att.vis.octave.attribute.rend =
  
  ## captures the appearance of the continuation line associated with the octave
  ##                 shift.
  attribute rend { data.LINERENDITION }?
att.anl.ossia.attributes = att.common.anl.attributes
att.ges.ossia.attributes = empty
att.log.ossia.attributes = empty
att.vis.ossia.attributes = empty
att.anl.pad.attributes = empty
att.ges.pad.attributes = empty
att.log.pad.attributes = att.event.attributes, att.log.pad.attribute.num
att.log.pad.attribute.num =
  
  ## captures the amount of horizontal space to be added, expressed in one-half
  ##                 inter-line staff distance units.
  attribute num { data.NUMBER }
att.vis.pad.attributes = empty
att.anl.pedal.attributes = att.common.anl.attributes
att.ges.pedal.attributes = empty
att.log.pedal.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.pedal.attribute.dir
att.log.pedal.attribute.dir =
  
  ## records the position of the pedal.
  attribute dir {
    
    ##
    "down"
    | 
      ##
      "up"
    | 
      ##
      "half"
  }
att.vis.pedal.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.xy.attributes,
  att.visualoffset.attributes,
  att.vis.pedal.attribute.style
att.vis.pedal.attribute.style =
  
  ## When style is set to 'line', the pedal mark is rendered with a continuous line.
  ##                 When it's set to pedstar, a pedal down is rendered with "Ped.", a pedal up is
  ##                 rendered as "*", and a pedal "bounce" is rendered with "Ped. *". When set to
  ##                 altpedstar pedal up and down indications are the same as with pedstar but a bounce
  ##                 is rendered with "Ped." only.
  attribute style {
    
    ##
    "line"
    | 
      ##
      "pedstar"
    | 
      ##
      "altpedstar"
  }?
att.anl.phrase.attributes =
  att.common.anl.attributes, att.anl.phrase.attribute.join
att.anl.phrase.attribute.join =
  
  ## used for linking visually separate phrase marks, sometimes necessary due to
  ##                 system breaks, that form a single musical phrase.
  attribute join { xsd:IDREFS }?
att.ges.phrase.attributes = empty
att.log.phrase.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.phrase.attribute.dur
att.log.phrase.attribute.dur =
  
  ## encodes the logical and visual duration of the phrase mark. If logical and
  ##                 visual duration differ, it may be necessary to add a dur.vis attribute. Please note
  ##                 that the dur attribute here is not a true duration, but rather a time stamp for the
  ##                 end point of the phrase mark.
  attribute dur { data.MEASUREBEAT }?
att.vis.phrase.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.vis.phrase.attribute.bezier,
  att.vis.phrase.attribute.bulge,
  att.vis.phrase.attribute.rend
att.vis.phrase.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy
  ##                 coordinates, eg. 19 45 -32 118.
  attribute bezier { xsd:NMTOKENS }?
att.vis.phrase.attribute.bulge =
  
  ## describes the curve as a set of distance values above or below an imaginary line
  ##                 connecting the endpoints of the curve. The bulge attribute must contain one or more
  ##                 values of type NUMBER.
  attribute bulge { xsd:NMTOKENS }?
att.vis.phrase.attribute.rend =
  
  ## records the appearance of the phrase mark.
  attribute rend { data.CURVERENDITION }?
att.anl.reh.attributes = att.common.anl.attributes
att.ges.reh.attributes = empty
att.log.reh.attributes =
  att.nextprev.attributes,
  att.log.reh.attribute.staff,
  att.log.reh.attribute.startid,
  att.log.reh.attribute.tstamp,
  att.log.reh.attribute.tstamp.ges,
  att.log.reh.attribute.tstamp.real
att.log.reh.attribute.staff =
  
  ## signifies the staff to which the rehearsal mark applies.
  attribute staff { data.INTEGERPOSITIVE }?
att.log.reh.attribute.startid =
  
  ## holds a reference to the element to which the rehearsal mark is attached.
  attribute startid { xsd:IDREF }?
att.log.reh.attribute.tstamp =
  
  ##
  attribute tstamp { data.BEAT }?
att.log.reh.attribute.tstamp.ges =
  
  ##
  attribute tstamp.ges { data.INTEGERNONNEGATIVE }?
att.log.reh.attribute.tstamp.real =
  
  ##
  attribute tstamp.real { data.ISOTIME }?
att.vis.reh.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.reh.attribute.enclose
att.vis.reh.attribute.enclose =
  
  ## records the enclosing symbol for the rehearsal mark.
  attribute enclose {
    
    ##
    "box"
    | 
      ##
      "circle"
    | 
      ##
      "none"
  }?
att.anl.rest.attributes = att.common.anl.attributes
att.ges.rest.attributes =
  att.ges.rest.attribute.dur.ges, att.ges.rest.attribute.instr
att.ges.rest.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.rest.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.log.rest.attributes =
  att.event.attributes,
  att.log.rest.attribute.beam,
  att.log.rest.attribute.dots,
  att.log.rest.attribute.dur,
  att.log.rest.attribute.fermata,
  att.log.rest.attribute.tuplet
att.log.rest.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
att.log.rest.attribute.dots =
  
  ## encodes the number of written dots of augmentation.
  attribute dots { data.AUGMENTDOT }?
att.log.rest.attribute.dur =
  
  ## encodes the logical; that is, written, duration.
  attribute dur { data.DURATION }?
att.log.rest.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information
  ##                 about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute fermata { data.PLACE }?
att.log.rest.attribute.tuplet =
  
  ## indicates that this element participates in a tuplet.
  attribute tuplet { data.TUPLET }?
att.vis.rest.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.rest.attribute.beam.with,
  att.vis.rest.attribute.dot.ho,
  att.vis.rest.attribute.dot.vo,
  att.vis.rest.attribute.dot.x,
  att.vis.rest.attribute.dot.y,
  att.vis.rest.attribute.size
att.vis.rest.attribute.beam.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.PLACE }?
att.vis.rest.attribute.dot.ho =
  
  ## records the horizontal offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.ho { data.VISUALOFFSET }?
att.vis.rest.attribute.dot.vo =
  
  ## records the vertical offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.vo { data.VISUALOFFSET }?
att.vis.rest.attribute.dot.x =
  
  ## records the absolute horizontal position of the augmentation dot.
  attribute dot.x { data.NUMBER }?
att.vis.rest.attribute.dot.y =
  
  ## records the absolute vertical position of the augmentation dot.
  attribute dot.y { data.NUMBER }?
att.vis.rest.attribute.size =
  
  ## describes the relative size of the rest.
  attribute size { data.SIZE }?
att.anl.pausa.attributes = att.common.anl.attributes
att.ges.pausa.attributes =
  att.ges.pausa.attribute.dur.ges,
  att.ges.pausa.attribute.instr,
  att.ges.pausa.attribute.num,
  att.ges.pausa.attribute.numbase
att.ges.pausa.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.ges.pausa.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the
  ##                 ID of an instrdef element elsewhere in the document.
  attribute instr { xsd:IDREF }?
att.ges.pausa.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute num { data.INTEGERPOSITIVE }?
att.ges.pausa.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.INTEGERPOSITIVE }?
att.log.pausa.attributes =
  att.event.attributes,
  att.log.pausa.attribute.beam,
  att.log.pausa.attribute.corona,
  att.log.pausa.attribute.dots,
  att.log.pausa.attribute.dur,
  att.log.pausa.attribute.tuplet
att.log.pausa.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
att.log.pausa.attribute.corona =
  
  ## indicates the attachment of a corona (fermata) to this element. If visual
  ##                 information about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute corona { data.PLACE }?
att.log.pausa.attribute.dots =
  
  ## encodes the number of written dots of augmentation.
  attribute dots { data.AUGMENTDOT }?
att.log.pausa.attribute.dur =
  
  ## encodes the logical, that is, written, duration.
  attribute dur { data.DURATION.MENSURAL }?
att.log.pausa.attribute.tuplet =
  
  ## indicates that this element participates in a tuplet.
  attribute tuplet { data.TUPLET }?
att.vis.pausa.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.pausa.attribute.beam.with,
  att.vis.pausa.attribute.colored,
  att.vis.pausa.attribute.dot.ho,
  att.vis.pausa.attribute.dot.vo,
  att.vis.pausa.attribute.dot.x,
  att.vis.pausa.attribute.dot.y,
  att.vis.pausa.attribute.line,
  att.vis.pausa.attribute.size,
  att.vis.pausa.attribute.spaces
att.vis.pausa.attribute.beam.with =
  
  ## In the case of cross-staff beams, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.PLACE }?
att.vis.pausa.attribute.colored =
  
  ##
  attribute colored { data.BOOLEAN }?
att.vis.pausa.attribute.dot.ho =
  
  ## records the horizontal offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.ho { data.VISUALOFFSET }?
att.vis.pausa.attribute.dot.vo =
  
  ## records the vertical offset of the augmentation dot from its "normal",
  ##                 programmatically determined position.
  attribute dot.vo { data.VISUALOFFSET }?
att.vis.pausa.attribute.dot.x =
  
  ## records the absolute horizontal position of the augmentation dot.
  attribute dot.x { data.NUMBER }?
att.vis.pausa.attribute.dot.y =
  
  ## records the absolute vertical position of the augmentation dot.
  attribute dot.y { data.NUMBER }?
att.vis.pausa.attribute.line =
  
  ## indicates the line upon which the rest stands. The value must be in the range
  ##                 between 1 and the number of lines on the staff.
  attribute line { data.INTEGERPOSITIVE }?
att.vis.pausa.attribute.size =
  
  ## describes the relative size of the pausa.
  attribute size { data.SIZE }?
att.vis.pausa.attribute.spaces =
  
  ## states how many spaces are covered by the rest.
  attribute spaces { data.INTEGERPOSITIVE }?
att.anl.slur.attributes =
  att.common.anl.attributes, att.anl.slur.attribute.join
att.anl.slur.attribute.join =
  
  ## used for linking visually separate phrase marks, sometimes necessary due to
  ##                 system breaks, that form a single musical phrase.
  attribute join { xsd:IDREFS }?
att.ges.slur.attributes = empty
att.log.slur.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.slur.attribute.dur
att.log.slur.attribute.dur =
  
  ## encodes the logical and visual duration of the slur. If logical and visual
  ##                 duration differ, it may be necessary to add a dur.vis attribute. Please note that
  ##                 the dur attribute is not a true duration, but rather a time stamp for the end point
  ##                 of the slur. Durations of longer than one measure may give the number of measures
  ##                 followed by the timestamp, e.g. "1m+3". Values within the current measure may be
  ##                 expressed as "0m+3" or as simply "3".
  attribute dur { data.MEASUREBEAT }?
att.vis.slur.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.vis.slur.attribute.bezier,
  att.vis.slur.attribute.bulge,
  att.vis.slur.attribute.rend
att.vis.slur.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy
  ##                 coordinates, eg. 19 45 -32 118.
  attribute bezier { xsd:NMTOKENS }?
att.vis.slur.attribute.bulge =
  
  ## describes the curve as a set of distance values above or below an imaginary line
  ##                 connecting the endpoints of the curve. The bulge attribute must contain one or more
  ##                 values of type NUMBER.
  attribute bulge { xsd:NMTOKENS }?
att.vis.slur.attribute.rend =
  
  ## records the appearance of the slur.
  attribute rend { data.CURVERENDITION }?
att.anl.space.attributes = att.common.anl.attributes
att.ges.space.attributes = att.ges.space.attribute.dur.ges
att.ges.space.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.space.attributes =
  att.event.attributes,
  att.log.space.attribute.beam,
  att.log.space.attribute.dots,
  att.log.space.attribute.dur,
  att.log.space.attribute.fermata,
  att.log.space.attribute.tuplet
att.log.space.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
att.log.space.attribute.dots =
  
  ## encodes the number of written dots of augmentation.
  attribute dots { data.AUGMENTDOT }?
att.log.space.attribute.dur =
  
  ## records logical duration in musical terms; that is, beats.
  attribute dur { data.DURATION }?
att.log.space.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information
  ##                 about the fermata needs to be recorded, then a fermata element should be
  ##                 employed.
  attribute fermata { data.PLACE }?
att.log.space.attribute.tuplet =
  
  ## indicates that this element participates in a tuplet.
  attribute tuplet { data.TUPLET }?
att.vis.space.attributes = att.vis.space.attribute.compressable
att.vis.space.attribute.compressable =
  
  ## indicates that the space is 'compressable', i.e., it may be removed by
  ##                 processing software.
  attribute compressable { data.BOOLEAN }?
att.anl.syl.attributes = att.common.anl.attributes
att.ges.syl.attributes = empty
att.log.syl.attributes =
  att.log.syl.attribute.con, att.log.syl.attribute.wordpos
att.log.syl.attribute.con =
  
  ## describes the symbols typically used to indicate breaks between syllables: s
  ##                 (_s_pace) = word separator, d (_d_ash) = syllable separator, u (_u_nderscore) =
  ##                 syllable extension, t (_t_ilde) = syllable elision
  attribute con {
    
    ##
    "s"
    | 
      ##
      "d"
    | 
      ##
      "u"
    | 
      ##
      "t"
  }?
att.log.syl.attribute.wordpos =
  
  ## records the position of the syllable within a word.
  attribute wordpos {
    
    ##
    "i"
    | 
      ##
      "m"
    | 
      ##
      "t"
  }?
att.vis.syl.attributes =
  att.typography.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.vis.syl.attribute.halign,
  att.vis.syl.attribute.rend
att.vis.syl.attribute.halign =
  
  ## indicates the horizontal alignment of the syllable with respect to the note to
  ##                 which it is attached.
  attribute halign {
    
    ##
    "left"
    | 
      ##
      "right"
    | 
      ##
      "center"
    | 
      ##
      "justify"
  }?
att.vis.syl.attribute.rend =
  
  ## typographical appearance of the syllable text.
  attribute rend { data.TEXTRENDITION }?
att.anl.tempo.attributes = att.common.anl.attributes
att.ges.tempo.attributes =
  att.ges.tempo.attribute.midi, att.ges.tempo.attribute.value
att.ges.tempo.attribute.midi =
  
  ## contains a MIDI value, that is, the number of quarter notes per minute in the
  ##                 range from 10 to 1000.
  attribute midi { data.MIDITEMPO }?
att.ges.tempo.attribute.value =
  
  ## used to describe the tempo in beats-per-minute.
  attribute value { data.TEMPOVALUE }?
att.log.tempo.attributes =
  att.controlevent.attributes, att.log.tempo.attribute.startid
att.log.tempo.attribute.startid =
  
  ## holds a reference to the element to which the tempo mark is attached.
  attribute startid { xsd:IDREF }?
att.vis.tempo.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes,
  att.vis.tempo.attribute.dur.vis
att.vis.tempo.attribute.dur.vis =
  
  ##
  attribute dur.vis { text }?
att.anl.tie.attributes = att.common.anl.attributes
att.ges.tie.attributes = empty
att.log.tie.attributes =
  att.controlevent.attributes,
  att.log.tie.attribute.endid,
  att.log.tie.attribute.startid
att.log.tie.attribute.endid =
  
  ## holds a reference to the second note of the tie.
  attribute endid { xsd:IDREF }
att.log.tie.attribute.startid =
  
  ## holds a reference to first note of the tie.
  attribute startid { xsd:IDREF }
att.vis.tie.attributes =
  att.color.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.vis.tie.attribute.bezier,
  att.vis.tie.attribute.bulge,
  att.vis.tie.attribute.rend
att.vis.tie.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy
  ##                 coordinates, eg. 19 45 -32 118.
  attribute bezier { xsd:NMTOKENS }?
att.vis.tie.attribute.bulge =
  
  ## describes the tie as a set of distance values above or below an imaginary line
  ##                 connecting the endpoints of the curve. The bulge attribute must contain one or more
  ##                 values of type NUMBER.
  attribute bulge { xsd:NMTOKENS }?
att.vis.tie.attribute.rend =
  
  ## records the appearance of the tie.
  attribute rend { data.CURVERENDITION }?
att.anl.trill.attributes = att.common.anl.attributes
att.ges.trill.attributes = att.ges.trill.attribute.dur.ges
att.ges.trill.attribute.dur.ges =
  
  ## records performed duration information that differs from the written values. Its
  ##                 value may be expressed in one of several forms, such as measures[s]+
  ##                 beat[s].beatpart, ppq (MIDI clicks), Humdrum **recip values, or MusicXML
  ##                 'divisions', etc. 
  attribute dur.ges { text }?
att.log.trill.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.trill.attribute.accid,
  att.log.trill.attribute.dur
att.log.trill.attribute.accid =
  
  ## captures a written accidental symbol which accompanies the trill.
  attribute accid { data.ACCIDENTAL.EXPLICIT }?
att.log.trill.attribute.dur =
  
  ## encodes the logical and visual duration of the trill. If logical and visual
  ##                 duration differ, it may be necessary to add a dur.vis attribute. Please note that
  ##                 the dur attribute is not a true duration, but rather a time stamp for the end point
  ##                 of the trill.
  attribute dur { data.MEASUREBEAT }?
att.vis.trill.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.anl.tuplet.attributes = att.common.anl.attributes
att.ges.tuplet.attributes = empty
att.log.tuplet.attributes =
  att.event.attributes,
  att.log.tuplet.attribute.dots,
  att.log.tuplet.attribute.dur,
  att.log.tuplet.attribute.num,
  att.log.tuplet.attribute.numbase,
  att.log.tuplet.attribute.with
att.log.tuplet.attribute.dots =
  
  ## records the number of augmentation dots required by a dotted duration.
  attribute dots { data.AUGMENTDOT }?
att.log.tuplet.attribute.dur =
  
  ## captures the time taken up by the tuplet. Unlike other control events where the
  ##                 dur attribute is expressed as a time stamp, dur here is a true duration. If dur is
  ##                 omitted, the default is to calculate the total duration of the included notes and
  ##                 use the next shorter un-dotted value.
  attribute dur { data.DURATION }?
att.log.tuplet.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second. These attributes may be used for explicit
  ##                 labelling of the tuplet, such as, '3' with an 8th-note triplet, '3:2' over a
  ##                 quarter-note triplet, etc. The rendering of the ratio, however, is dependent on the
  ##                 num.format attribute found in the att.vis.tuplet attribute class.
  attribute num { data.INTEGERPOSITIVE }?
att.log.tuplet.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.DURATION }?
att.log.tuplet.attribute.with =
  
  ## In the case of cross-staff tuplets, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute with { data.PLACE }?
att.vis.tuplet.attributes =
  att.vis.tuplet.attribute.bracket.place,
  att.vis.tuplet.attribute.bracket.visible,
  att.vis.tuplet.attribute.dur.visible,
  att.vis.tuplet.attribute.num.format,
  att.vis.tuplet.attribute.num.place,
  att.vis.tuplet.attribute.num.visible
att.vis.tuplet.attribute.bracket.place =
  
  ## used to state where the bracket will be placed in relation to the
  ##                 noteheads.
  attribute bracket.place { data.PLACE }?
att.vis.tuplet.attribute.bracket.visible =
  
  ## states whether a bracket should be rendered with the tuplet.
  attribute bracket.visible { data.BOOLEAN }?
att.vis.tuplet.attribute.dur.visible =
  
  ## determines if the tuplet duration is visible.
  attribute dur.visible { data.BOOLEAN }?
att.vis.tuplet.attribute.num.format =
  
  ## controls how the num:numbase ratio is to be displayed. When set to 'count' only
  ##                 the num attribute is displayed, e.g., '7'; however, when set to 'ratio', both the
  ##                 num and numbase attributes are displayed, e.g., '7:4'.
  attribute num.format {
    
    ##
    "count"
    | 
      ##
      "ratio"
  }?
att.vis.tuplet.attribute.num.place =
  
  ## states where the tuplet number will be placed in relation to the
  ##                 noteheads.
  attribute num.place { data.PLACE }?
att.vis.tuplet.attribute.num.visible =
  
  ## determines if the tuplet number is visible.
  attribute num.visible { data.BOOLEAN }?
att.anl.tupletspan.attributes = att.common.anl.attributes
att.ges.tupletspan.attributes = empty
att.log.tupletspan.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.log.tupletspan.attribute.dots,
  att.log.tupletspan.attribute.dur,
  att.log.tupletspan.attribute.num,
  att.log.tupletspan.attribute.numbase,
  att.log.tupletspan.attribute.with
att.log.tupletspan.attribute.dots =
  
  ## records the number of augmentation dots required by a dotted duration.
  attribute dots { data.AUGMENTDOT }?
att.log.tupletspan.attribute.dur =
  
  ## captures the time taken up by the tuplet. Unlike other control events where the
  ##                 dur attribute is expressed as a time stamp, dur here is a true duration. If dur is
  ##                 omitted, the default is to calculate the total duration of the included notes and
  ##                 use the next shorter un-dotted value.
  attribute dur { data.DURATION }?
att.log.tupletspan.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute num { data.INTEGERNONNEGATIVE }?
att.log.tupletspan.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the
  ##                 ratio, while numbase is the second.
  attribute numbase { data.DURATION }?
att.log.tupletspan.attribute.with =
  
  ## In the case of cross-staff tuplets, the with attribute is used to indicate which
  ##                 staff the beam is connected to; that is, the staff above or the staff below.
  attribute with { data.PLACE }?
att.vis.tupletspan.attributes =
  att.vis.tupletspan.attribute.bracket.place,
  att.vis.tupletspan.attribute.bracket.visible,
  att.vis.tupletspan.attribute.dur.visible,
  att.vis.tupletspan.attribute.num.format,
  att.vis.tupletspan.attribute.num.place,
  att.vis.tupletspan.attribute.num.visible
att.vis.tupletspan.attribute.bracket.place =
  
  ## used to state where the bracket will be placed in relation to the
  ##                 noteheads.
  attribute bracket.place { data.PLACE }?
att.vis.tupletspan.attribute.bracket.visible =
  
  ## states whether a bracket should be rendered with the tuplet.
  attribute bracket.visible { data.BOOLEAN }?
att.vis.tupletspan.attribute.dur.visible =
  
  ## determines if the tuplet duration is visible.
  attribute dur.visible { data.BOOLEAN }?
att.vis.tupletspan.attribute.num.format =
  
  ## controls how the num:numbase ratio is to be displayed. When set to 'count' only
  ##                 the num attribute is displayed, e.g., '7'; however, when set to 'ratio', both the
  ##                 num and numbase attributes are displayed, e.g., '7:4'.
  attribute num.format {
    
    ##
    "count"
    | 
      ##
      "ratio"
  }?
att.vis.tupletspan.attribute.num.place =
  
  ## states where the tuplet number will be placed in relation to the
  ##                 noteheads.
  attribute num.place { data.PLACE }?
att.vis.tupletspan.attribute.num.visible =
  
  ## determines if the tuplet number is visible.
  attribute num.visible { data.BOOLEAN }?
att.anl.turn.attributes = att.common.anl.attributes
att.ges.turn.attributes = empty
att.log.turn.attributes =
  att.controlevent.attributes,
  att.log.turn.attribute.accidupper,
  att.log.turn.attribute.accidlower,
  att.log.turn.attribute.delayed,
  att.log.turn.attribute.form,
  att.log.turn.attribute.startid
att.log.turn.attribute.accidupper =
  
  ## records the accidental associated with the upper neighboring note.
  attribute accidupper { data.ACCIDENTAL.EXPLICIT }?
att.log.turn.attribute.accidlower =
  
  ## records the accidental associated with the lower neighboring note.
  attribute accidlower { data.ACCIDENTAL.EXPLICIT }?
att.log.turn.attribute.delayed =
  
  ## When the delayed attribute is set to 'yes', the turn begins on the second half
  ##                 of the beat. See Read, p. 246.
  attribute delayed { data.BOOLEAN }?
att.log.turn.attribute.form =
  
  ## indicates whether the turn begins on the note above (norm) or on the note below
  ##                 (inv).
  attribute form {
    
    ##
    "inv"
    | 
      ##
      "norm"
  }?
att.log.turn.attribute.startid =
  
  ## holds a reference to the element to which the turn is attached.
  attribute startid { xsd:IDREF }?
att.vis.turn.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes
att.anl.verse.attributes = att.common.anl.attributes
att.ges.verse.attributes = empty
att.log.verse.attributes =
  att.log.verse.attribute.refrain, att.log.verse.attribute.rhythm
att.log.verse.attribute.refrain =
  
  ## used to indicate a common, usually centered, refrain (Mup User's Guide, p.
  ##                 44).
  attribute refrain { data.BOOLEAN }?
att.log.verse.attribute.rhythm =
  
  ## used to specify a rhythm for the lyrics that differs from that of the notes on
  ##                 the staff.
  attribute rhythm { text }?
att.vis.verse.attributes =
  att.typography.attributes,
  att.visualoffset.to.attributes,
  att.visualoffset.vo.attributes,
  att.xy.attributes
model.addressLike = address
model.annotLike = annot
model.biblLike = bibl
model.dateLike = date
model.editionLike = edition
model.editorialLike = abbr | expan
model.graphicLike = graphic
model.identifierLike = identifier
model.lbLike = lb
model.milestoneLike.text = lb | pb
model.nameLike = name
model.noteModifierLike = artic | accid | dot | verse | syl
model.numLike = notAllowed
model.pLike = p
model.pbLike = pb
model.rendLike = rend | stack
model.repositoryLike = repository
model.titleLike = title
model.pgmetaLike = fw | pgdesc
model.pgmetaLike.score = pgfoot1 | pgfoot2 | pghead1 | pghead2
model.eventLike.common = custos | clefchange | pad | space
model.eventLike.neume-mensural = ligature | mensurchange | proportchange
model.eventLike.neume-cmn = notAllowed
model.eventLike.mensural-cmn = accid | barline | dot | keychange
model.keyaccidLike = keyaccid
model.keysigLike = keysig
model.backLike = back
model.divLike = \div
model.frontLike = front
model.headLike = head
model.lLike = l
model.listLike = \list
model.quoteLike = blockquote
model.tableLike = table
model.lgLike = lg
model.labelLike = label
model.endingLike = ending
model.instrdefLike = instrdef
model.layerLike = layer
model.layerdefLike = layerdef
model.mdivLike = mdiv
model.milestoneLike.music = model.pbLike | sb
model.musicPart = model.backLike | model.frontLike | body | group
model.partLike = part
model.partsLike = parts
model.scoreLike = score
model.sectionLike = section
model.staffLike = staff
model.staffdefLike = staffdef
model.staffgrpLike = staffgrp
model.nameLike.agent = corpname | persname
model.nameLike.geogname = geogname
model.nameLike.place = model.repositoryLike | geogname
model.nameLike.label = periodname | stylename
model.figureLike = fig
model.captionLike = caption
model.availabilityPart =
  accessdesc | acqsource | price | sysreq | userestrict
model.biblPart = model.editionLike
model.editorialdeclPart =
  correction | interpretation | normalization | segmentation | stdvals
model.encodingPart =
  appinfo | editorialdecl | projectdesc | samplingdecl
model.locrefLike = extptr | extref | ptr | ref
model.ptrLike = ptr
model.measurementLike = model.numLike
model.lyricsLike = lyrics
model.sylLike = syl
model.verseLike = verse
model.ornamentLike.cmn = mordent | trill | turn
model.syllableLike = syllable
model.neumeModifierLike = model.verseLike | artic | accid | verse
model.eventLike.neume = syllable | ineume | uneume
model.eventLike.mensural = nota | pausa
model.measureLike = measure
model.ossiaLike = ossia
model.eventLike.cmn =
  beam
  | beatrpt
  | bend
  | btrem
  | chord
  | ftrem
  | gliss
  | halfmrpt
  | note
  | rest
  | tuplet
model.eventLike.cmn.measureFilling =
  mrest | mrpt | mrpt2 | mspace | multirest | multirpt
model.chordtableLike = chordtable
model.harmLike = harm
model.graphicprimitiveLike = anchoredtext | curve | line | symbol
model.symboltableLike = symboltable
model.apparatusLike = app
model.midiLike = midi
model.frontPart = titlepage
model.transcriptionLike =
  add
  | corr
  | damage
  | del
  | orig
  | reg
  | restore
  | sic
  | supplied
  | unclear
model.editLike = choice | gap | handshift | subst
model.choicePart =
  model.editorialLike | corr | orig | reg | sic | unclear
model.facsimileLike = facsimile
model.alignLike = timeline
model.headerPart = encodingdesc | profiledesc
model.physdescPart =
  model.frontPart
  | repository
  | condition
  | dimensions
  | exhibithist
  | extent
  | handlist
  | inscription
  | physloc
  | physmedium
  | provenance
  | treatmenthist
  | treatmentsched
model.profiledescPart = classification | creation | langusage
model.pubstmtPart =
  model.addressLike
  | model.dateLike
  | model.nameLike.geogname
  | identifier
  | availability
  | respstmt
model.textphraseLike =
  model.addressLike
  | model.annotLike
  | model.biblLike
  | model.dateLike
  | model.editorialLike
  | model.identifierLike
  | model.milestoneLike.text
  | model.nameLike
  | model.rendLike
  | model.titleLike
  | model.nameLike.agent
  | model.nameLike.place
  | model.nameLike.label
  | model.figureLike
  | model.locrefLike
  | model.measurementLike
model.textphraseLike.limited =
  model.addressLike
  | model.biblLike
  | model.dateLike
  | model.editorialLike
  | model.identifierLike
  | model.lbLike
  | model.nameLike
  | model.rendLike
  | model.titleLike
  | model.nameLike.agent
  | model.nameLike.place
  | model.nameLike.label
  | model.figureLike
  | model.locrefLike
  | model.measurementLike
model.paracontentPart =
  model.listLike
  | model.quoteLike
  | model.tableLike
  | model.transcriptionLike
  | model.editLike
  | model.textphraseLike
model.textcomponentLike =
  model.pLike
  | model.listLike
  | model.quoteLike
  | model.tableLike
  | model.lgLike
model.Incl =
  model.annotLike
  | model.divLike
  | model.milestoneLike.music
  | model.graphicprimitiveLike
  | model.apparatusLike
  | model.transcriptionLike
  | model.editLike
  | scoredef
  | staffdef
  | staffgrp
model.clefchangePart = clef
model.staffdefPart.multiplyDefinable = clef | mensur | proport
model.eventLike =
  model.eventLike.common
  | model.eventLike.neume-mensural
  | model.eventLike.neume-cmn
  | model.eventLike.mensural-cmn
  | model.eventLike.neume
  | model.eventLike.mensural
  | model.eventLike.cmn
model.controleventLike =
  model.harmLike
  | model.controleventLike.cmn
  | model.controleventLike.common
model.controleventLike.cmn =
  model.ornamentLike.cmn
  | model.controleventLike.instruments
  | arpeg
  | beamspan
  | breath
  | fermata
  | hairpin
  | octave
  | reh
  | slur
  | tie
  | tupletspan
model.controleventLike.common = dir | dynam | phrase | tempo
model.controleventLike.instruments = notAllowed
model.layerPart =
  model.noteModifierLike
  | model.lyricsLike
  | model.sylLike
  | model.verseLike
  | model.eventLike.cmn.measureFilling
  | model.midiLike
  | model.eventLike
  | model.controleventLike
model.syllablePart =
  model.noteModifierLike
  | model.lyricsLike
  | model.sylLike
  | model.verseLike
  | model.midiLike
  | model.eventLike
  | model.controleventLike
model.staffPart =
  model.layerLike | model.syllableLike | model.controleventLike
model.measurePart =
  model.staffLike
  | model.lyricsLike
  | model.ossiaLike
  | model.midiLike
  | model.controleventLike
model.sectionPart =
  model.endingLike
  | model.sectionLike
  | model.staffLike
  | model.measureLike
model.scorePart = model.endingLike | model.sectionLike
model.rdgPart =
  model.noteModifierLike
  | model.layerLike
  | model.lyricsLike
  | model.sylLike
  | model.verseLike
  | model.syllableLike
  | model.ossiaLike
  | model.eventLike.cmn.measureFilling
  | model.midiLike
  | model.eventLike
  | model.controleventLike
  | model.sectionPart
  | section
  | staffdef
  | syl
abbr =
  
  ## abbr (abbreviation) contains an abbreviation of any sort. The type attribute may be
  ##             used to classify the abbreviation according to some convenient typology. Sample values
  ##             include: suspension the abbreviation provides the first letter(s) of the word or phrase,
  ##             omitting the remainder. contraction the abbreviation omits some letter(s) in the middle.
  ##             brevigraph the abbreviation comprises a special symbol or mark. superscription the
  ##             abbreviation includes writing above the line. acronym the abbreviation comprises the
  ##             initial letters of the words of a phrase. title the abbreviation is for a title of
  ##             address (Dr, Ms, Mr, ...) organization the abbreviation is for the name of an
  ##             organization. geographic the abbreviation is for a geographic name. This tag is the
  ##             mirror image of the <expan> tag; both allow the encoder to transcribe both
  ##             an abbreviation and its expansion. In <abbr>, however, the original is
  ##             transcribed as the content of the element and the expansion as an attribute value;
  ##             <expan> reverses this. The choice between the two is up to the user. The
  ##             <abbr> tag is not required; if appropriate, the encoder may transcribe
  ##             abbreviations in the source text silently, without tagging them. If abbreviations are
  ##             not transcribed directly but expanded silently, then the MEI header should so indicate.
  ##             The cert attribute signifies the degree of certainty ascribed to the expansion of the
  ##             abbreviation. The expan attribute gives an expansion of the abbreviation. The resp
  ##             attribute contains an ID reference to an element containing the name of the editor or
  ##             transcriber responsible for supplying the expansion of the abbreviation.
  element abbr { abbr.content, abbr.localattributes }
abbr.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
abbr.localattributes =
  att.common.attributes,
  att.edit.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.trans.attributes,
  att.typed.attributes,
  
  ##
  attribute expan { text }?
address =
  
  ## A postal address.
  element address { address.content, address.localattributes }
address.content = addressline+
address.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
addressline =
  
  ## Single line of a postal address.
  element addressline {
    addressline.content, addressline.localattributes
  }
addressline.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
addressline.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
anchoredtext =
  
  ## Page-anchored text. The content model here is similar to paragraph without
  ##             model.textcomponent and pb sub-elements. If the startid attribute is present, then the
  ##             xy coordinates are relative to the xy coordinates of the referenced element. Otherwise,
  ##             they are assumed to be absolute page coordinate references.
  element anchoredtext {
    anchoredtext.content, anchoredtext.localattributes
  }
anchoredtext.content =
  (text
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
anchoredtext.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.typed.attributes,
  att.xy.required.attributes,
  
  ## holds a reference to the element to which the text is attached.
  attribute startid { xsd:IDREF }?
annot =
  
  ## The annot element provides a way to group participating *events* and/or *control
  ##             events*, the notes that form a descending bass line or phrase marks, for example, and
  ##             provide a label for or comment regarding the group. An enumerated list of event IDs may
  ##             be given in the plist attribute. Alternatively, if only the start and/or end events in a
  ##             group are to be marked, then use the startid and endid attributes. An editorial or
  ##             analytical comment or observation, encoded elsewhere, such as in the front or back
  ##             matter, in score text elements, or in an external document may be pointed to using the
  ##             link.common, link.internal, or link.external attributes. Alternatively, the observation
  ##             may be included directly within the annot element. The annot element, along with other
  ##             elements with attributes from the att.link.external class, may also be used to
  ##             link/synchronize elements within the MEI file to external media such as images or sound
  ##             recordings. The ID of the MEI element(s) to be linked from should be encoded in the
  ##             plist attribute while the link to the external media may be encoded in the href or
  ##             entityref attributes or in the body of the annotation using extref or extptr
  ##             elements.
  element annot { annot.content, annot.localattributes }
annot.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
annot.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.typed.attributes,
  att.log.annot.attributes,
  att.vis.annot.attributes,
  att.ges.annot.attributes,
  att.anl.annot.attributes,
  att.link.common.attributes,
  att.link.internal.attributes,
  att.link.external.attributes,
  
  ##
  attribute resp { xsd:IDREF }?,
  
  ## contains a list of one or more pointers indicating the sources that contain a
  ##                 given annotation. Each value should correspond to the ID of a source element given
  ##                 elsewhere in the document.
  attribute source { xsd:IDREFS }?
bibl =
  
  ## Bibliographic reference. May function as a hypertext reference to an external
  ##             electronic resource. A more structured content model, similar to TEI's biblFull,
  ##             requires new elements that function like those in the meiHead DTD, but that do not
  ##             duplicate their names.
  element bibl { bibl.content, bibl.localattributes }
bibl.content = (text | model.biblPart | model.textphraseLike)*
bibl.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.link.common.attributes,
  att.link.external.attributes
date =
  
  ## A date in any format.
  element date { date.content, date.localattributes }
date.content = (text | model.textphraseLike)*
date.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.date.attributes,
  att.facsimile.attributes,
  att.lang.attributes
edition =
  
  ## The edition designation is a word or text phrase that normally indicates a
  ##             difference in either content or form between the item being described and a related item
  ##             previously issued by the same publisher/distributor (e.g. 2nd edition, version 2.0,
  ##             etc.), or simultaneously issued by either the same publisher/distributor or another
  ##             publisher/distributor (e.g. large print edition, British edition, etc.).
  element edition { edition.content, edition.localattributes }
edition.content = (text | model.textphraseLike.limited)*
edition.localattributes = att.common.attributes, att.bibl.attributes
expan =
  
  ## expan (expansion) contains the expansion of an abbreviation. The type attribute may
  ##             be used to classify the abbreviation according to some convenient typology. See example
  ##             values above. This tag is the mirror image of the <abbr> tag; both allow
  ##             the encoder to transcribe both an abbreviation and its expansion. In
  ##             <abbr>, however, the original is transcribed as the content of the element
  ##             and the expansion as an attribute value; <expan> reverses this. The choice
  ##             between the two is up to the user. The <expan> tag is not required; if
  ##             appropriate, the encoder may expand abbreviations in the source text silently, without
  ##             tagging them. If this is done, the MEI header should so indicate. The abbr attribute
  ##             gives the abbreviation in its unexpanded form. The cert attribute signifies the degree
  ##             of certainty ascribed to the expansion of the abbreviation. The resp attribute contains
  ##             an ID reference to an element containing the name of the editor or transcriber
  ##             responsible for supplying the expansion of the abbreviation held as the content of the
  ##             <expan> element.
  element expan { expan.content, expan.localattributes }
expan.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
expan.localattributes =
  att.common.attributes,
  att.edit.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.trans.attributes,
  att.typed.attributes,
  
  ##
  attribute abbr { text }?
figdesc =
  
  ## Contains a brief prose description of the appearance or content of a graphic figure,
  ##             for use when documenting an image without displaying it. Best practice suggests the use
  ##             of controlled vocabulary. Don't confuse this element with a figure caption. A caption is
  ##             text primarily intended for display with an illustration. It may or may not function as
  ##             a description of the illustration.
  element figdesc { figdesc.content, figdesc.localattributes }
figdesc.content =
  (text
   | model.graphicprimitiveLike
   | model.textcomponentLike
   | model.annotLike)*
figdesc.localattributes = att.common.attributes, att.lang.attributes
fw =
  
  ## Forme work, e.g. header and footer. This element is intended for capture of
  ##             header/footer material that is non-repeating; that is, it occurs on isolated pages. For
  ##             running headers and footers use pgheadN and pgfootN elements. Auto-generated page
  ##             numbers may be included by using a processing instruction.
  element fw { fw.content, fw.localattributes }
fw.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
fw.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.typed.attributes
graphic =
  
  ## Indicates the location of an inline graphic, illustration, or figure.
  element graphic { graphic.content, graphic.localattributes }
graphic.content = empty
graphic.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.link.external.attributes,
  
  ##
  attribute height { data.INTEGERPOSITIVE }?,
  
  ##
  attribute units { text }?,
  
  ##
  attribute width { data.INTEGERPOSITIVE }?
identifier =
  
  ## Bibliographic, e.g., International Standard Book/Music Number, Library of Congress
  ##             Control Number, Publisher's Number, or personal identifier.
  element identifier { identifier.content, identifier.localattributes }
identifier.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
identifier.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes
lb =
  
  ## Text line break. The n attribute should be used to record a label for the line,
  ##             i.e., most likely a line number. See comment on verse element for description of func
  ##             attribute.
  element lb { lb.content, lb.localattributes }
lb.content = empty
lb.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  
  ##
  attribute func {
    
    ##
    "line"
    | 
      ##
      "group"
  }?,
  
  ## Source descriptions in the header may be pointed to by putting their IDs in the
  ##                 source attribute. This allows line breaks from multiple sources to be encoded with a
  ##                 single lb element.
  attribute source { xsd:IDREF }?
name =
  
  ## Contains the name of an individual, such as 'Henry VIII, King of England', a
  ##             corporate body, such as 'The Beatles', a geographical place or a generative mechanical
  ##             process. They are available here in order to record any identifiers or dates, associated
  ##             with the name, i.e., birth and death in the case of persons or creation and dissolution
  ##             in the case of a corporate entity or place. When name parts are needed, use name
  ##             sub-elements. The recommended values for the type attribute are: pers, corp, place,
  ##             process.
  element name { name.content, name.localattributes }
name.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
name.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
num.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
num.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  
  ##
  attribute units { text }?
p =
  
  ## Paragraph
  element p { p.content, p.localattributes }
p.content = (text | model.paracontentPart)*
p.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes
pb =
  
  ## Page break. The n attribute records the page number in the source. It need not be an
  ##             integer, e.g. 'iv', or 'p17-3'. The logical page number can be calculated by counting
  ##             previous pb ancestor elements. When used in a score context, a page break implies an
  ##             accompanying system break.
  element pb { pb.content, pb.localattributes }
pb.content = model.pgmetaLike?
pb.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.link.common.attributes,
  att.link.external.attributes,
  
  ##
  attribute func {
    
    ##
    "verso"
    | 
      ##
      "recto"
  }?,
  
  ## provided for linking to the bibliographic description of the source(s) that
  ##                 contains the page break. This allows page breaks from multiple sources to be encoded
  ##                 with a single pb element.
  attribute source { xsd:IDREFS }?
pgdesc =
  
  ## Contains a brief prose description of the appearance or description of the content
  ##             of a physical page. Best practice suggests the use of controlled vocabulary. Don't
  ##             confuse this element with a figure caption. A caption is text primarily intended for
  ##             display with an illustration. It may or may not function as a description of the
  ##             illustration.
  element pgdesc { pgdesc.content, pgdesc.localattributes }
pgdesc.content =
  (text
   | model.graphicprimitiveLike
   | model.textcomponentLike
   | model.annotLike
   | model.locrefLike)*
pgdesc.localattributes = att.common.attributes, att.lang.attributes
rend =
  
  ## Special visual rendering of text. A positive value for rotation rotates the text in
  ##             a counter-clockwise fashion, while negative values produce clockwise rotation. The rend
  ##             attribute captures the appearance of the text. The altrend attribute can be used to
  ##             extend the values of the rend attribute. One or the other of the rend and altrend
  ##             attributes is required.
  element rend { rend.content, rend.localattributes }
rend.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
rend.localattributes =
  att.color.attributes,
  att.common.attributes,
  att.lang.attributes,
  att.typography.attributes,
  
  ##
  attribute altrend { text }?,
  
  ##
  attribute halign {
    
    ##
    "left"
    | 
      ##
      "right"
    | 
      ##
      "center"
    | 
      ##
      "justify"
  }?,
  
  ##
  attribute rend { data.TEXTRENDITION }?,
  
  ##
  attribute rotation { data.DEGREES }?,
  
  ##
  attribute valign {
    
    ##
    "top"
    | 
      ##
      "middle"
    | 
      ##
      "bottom"
    | 
      ##
      "baseline"
  }?
repository =
  
  ## Institution which holds a bibliographic item. Sub-units of the institution may be
  ##             marked with nested repository elements.
  element repository { repository.content, repository.localattributes }
repository.content = (text | model.textphraseLike.limited)*
repository.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
stack =
  
  ## Stacked text, e.g. an inline table with a single column.
  element stack { stack.content, stack.localattributes }
stack.content = (text | model.textphraseLike)*
stack.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  
  ##
  attribute delim { text }?,
  
  ##
  attribute align {
    
    ##
    "left"
    | 
      ##
      "right"
    | 
      ##
      "center"
    | 
      ##
      "rightdigit"
  }?
title =
  
  ## Title of a bibliographic entity. The type attribute may be used to classify the
  ##             title according to some convenient typology. Sample values include: main main title
  ##             subordinate subtitle, title of part abbreviated abbreviated form of title alternative
  ##             alternate title by which the work is also known translated translated form of title
  ##             uniform uniform title The type attribute is provided for convenience in analysing titles
  ##             and processing them according to their type; where such specialized processing is not
  ##             necessary, there is no need for such analysis, and the entire title, including subtitles
  ##             and any parallel titles, may be enclosed within a single <title> element.
  ##             The level attribute indicates whether this is the title of an article, monograph,
  ##             journal, series, or unpublished material. Title parts may be encoded in title
  ##             sub-elements since title is included in model.textphrase.
  element title { title.content, title.localattributes }
title.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
title.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes,
  
  ##
  attribute level {
    
    ##
    "a"
    | 
      ##
      "m"
    | 
      ##
      "j"
    | 
      ##
      "s"
    | 
      ##
      "u"
  }?
clef =
  
  ## The clef element must be used instead of clef.* attributes when a staff employs
  ##             multiple simultaneous clefs.
  element clef { clef.content, clef.localattributes }
clef.content = empty
clef.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.anl.clef.attributes,
  att.ges.clef.attributes,
  att.log.clef.attributes,
  att.vis.clef.attributes
custos =
  
  ## Custos or direct. The symbol placed at the end of a staff to indicate the first note
  ##             of the next staff.
  element custos { custos.content, custos.localattributes }
custos.content = empty
custos.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.custos.attributes,
  att.vis.custos.attributes,
  att.ges.sb.attributes,
  att.anl.sb.attributes
clefchange =
  
  ## Mid-measure clef change. Coming as it does, in the middle of a measure, a clef
  ##             change is an event.
  element clefchange { clefchange.content, clefchange.localattributes }
clefchange.content = model.clefchangePart
clefchange.localattributes =
  att.common.attributes,
  att.event.attributes,
  att.facsimile.attributes,
  att.log.clefchange.attributes,
  att.vis.clefchange.attributes,
  att.ges.clefchange.attributes,
  att.anl.clefchange.attributes
pad =
  
  ## Used to create additional visual space between notational elements.
  element pad { pad.content, pad.localattributes }
pad.content = empty
pad.localattributes =
  att.common.attributes,
  att.log.pad.attributes,
  att.vis.pad.attributes,
  att.ges.pad.attributes,
  att.anl.pad.attributes
space =
  
  ## A placeholder used to fill an incomplete measure, layer, etc. most often so that the
  ##             combined duration of the events equals the number of beats in the measure.
  element space { space.content, space.localattributes }
space.content = empty
space.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.space.attributes,
  att.vis.space.attributes,
  att.ges.space.attributes,
  att.anl.space.attributes
dir =
  
  ## Directives, e.g. text expressions that are on the score (typically above, below, or
  ##             between staves), but not on the staff and not encoded elsewhere, such as in tempo or
  ##             dynam elements. Examples include text strings, such as 'affettuoso' or fingerings and
  ##             music symbols, such as segno and coda symbols, fermatas over a barline, etc. Unlike
  ##             generic text elements, directives can be control elements. That is, they can be used as
  ##             pointers to other events.
  element dir { dir.content, dir.localattributes }
dir.content =
  (text
   | model.textphraseLike.limited
   | model.graphicprimitiveLike
   | model.editLike
   | model.transcriptionLike)*
dir.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.typed.attributes,
  att.log.dir.attributes,
  att.vis.dir.attributes,
  att.ges.dir.attributes,
  att.anl.dir.attributes
dynam =
  
  ## The dynam element may be used for instantaneous or continuous textual dynamics, e.g.
  ##             'p', 'mf', or 'cresc. poco a poco'. See Read, p. 250-255. The hairpin element should be
  ##             used for graphical dynamic markings.
  element dynam { dynam.content, dynam.localattributes }
dynam.content =
  (text
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
dynam.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.dynam.attributes,
  att.vis.dynam.attributes,
  att.ges.dynam.attributes,
  att.anl.dynam.attributes
phrase =
  
  ## Phrase mark, used for a "unified melodic idea" (Read, p. 265).
  element phrase { phrase.content, phrase.localattributes }
phrase.content = empty
phrase.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.phrase.attributes,
  att.vis.phrase.attributes,
  att.ges.phrase.attributes,
  att.anl.phrase.attributes
tempo =
  
  ## Text and symbols descriptive of tempo, mood, or style, e.g., "allarg.", "a tempo",
  ##             "cantabile", "Moderato", "[qtrnote]=60", "Moderato [qtrnote] =60"). Both "instantaneous"
  ##             and "continuous" tempo markings may be encoded using this element.
  element tempo { tempo.content, tempo.localattributes }
tempo.content =
  (text
   | model.textphraseLike.limited
   | model.graphicprimitiveLike
   | model.editLike
   | model.transcriptionLike)*
tempo.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.log.tempo.attributes,
  att.vis.tempo.attributes,
  att.ges.tempo.attributes,
  att.anl.tempo.attributes
mensur =
  
  ## The mensur element is provided for the encoding of mensural notation.
  element mensur { mensur.content, mensur.localattributes }
mensur.content = empty
mensur.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.mensur.attributes,
  att.vis.mensur.attributes,
  att.ges.mensur.attributes,
  att.anl.mensur.attributes
proport =
  
  ## Proportion.
  element proport { proport.content, proport.localattributes }
proport.content = empty
proport.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.proport.attributes,
  att.vis.proport.attributes,
  att.ges.proport.attributes,
  att.anl.proport.attributes
ligature =
  
  ## The ligature element is provided for the encoding of mensural notation.
  element ligature { ligature.content, ligature.localattributes }
ligature.content = model.layerPart*
ligature.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.ligature.attributes,
  att.vis.ligature.attributes,
  att.ges.ligature.attributes,
  att.anl.ligature.attributes
mensurchange =
  
  ## Mensuration change.
  element mensurchange {
    mensurchange.content, mensurchange.localattributes
  }
mensurchange.content = mensur+
mensurchange.localattributes =
  att.common.attributes, att.facsimile.attributes
proportchange =
  
  ## Proportion change.
  element proportchange {
    proportchange.content, proportchange.localattributes
  }
proportchange.content = proport+
proportchange.localattributes =
  att.common.attributes, att.facsimile.attributes
artic =
  
  ## Articulation. This element provides an alternative to the artic attributes on the
  ##             note and chord elements. The element should be used when when specific display info,
  ##             such as size or color, needs to be recorded for the articulation.
  element artic { artic.content, artic.localattributes }
artic.content = empty
artic.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typography.attributes,
  att.log.artic.attributes,
  att.vis.artic.attributes,
  att.ges.artic.attributes,
  att.anl.artic.attributes
keyaccid =
  
  ## Accidental in a key signature. It is a semantic error not to provide x and y or
  ##             staffloc attributes.
  element keyaccid { keyaccid.content, keyaccid.localattributes }
keyaccid.content = empty
keyaccid.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.xy.attributes,
  
  ## encodes the characters used to enclose the accidental when it has a cautionary
  ##                 or editorial function.
  attribute enclose { data.ENCLOSURE }?,
  
  ##
  attribute form {
    
    ##
    "implicit"
    | 
      ##
      "explicit"
  }?,
  
  ## captures written octave information.
  attribute oct { data.OCTAVE }?,
  
  ## contains the written pitch name.
  attribute pname { data.PITCHNAME },
  
  ##
  attribute staffloc { data.STAFFLOC }?,
  
  ##
  attribute value { data.ACCIDENTAL.EXPLICIT }
keysig =
  
  ## Key signature. This element may be used as an alternative to the key.* attributes
  ##             (especially key.sig.mixed) on scoredef and staffdef.
  element keysig { keysig.content, keysig.localattributes }
keysig.content = model.keyaccidLike*
keysig.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  
  ## captures a written accidental symbol.
  attribute accid { data.ACCIDENTAL.IMPLICIT }?,
  
  ##
  attribute mode { data.MODE }?,
  
  ## contains the written pitch name.
  attribute pname { data.PITCHNAME }?
accid =
  
  ## Accidental. This element provides an alternative to the acci attributes on the note
  ##             element. The element should be used when specific display info, such as size or color,
  ##             needs to be recorded for the accidental. The func attribute can be used to differentiate
  ##             different functions, such as 'cautionary' or 'editorial'. Used by:
  ##             model.noteModifierLike model.notaModifierLike model.neumeModifierLike
  ##             model.eventLike.mensural-cmn Module: meiShared
  element accid { accid.content, accid.localattributes }
accid.content = empty
accid.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typography.attributes,
  att.log.accid.attributes,
  att.vis.accid.attributes,
  att.ges.accid.attributes,
  att.anl.accid.attributes
barline =
  
  ## The barline element may be used instead of the measure element. It has the same
  ##             attributes as measure.
  element barline { barline.content, barline.localattributes }
barline.content = empty
barline.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.link.common.attributes,
  att.link.internal.attributes,
  att.link.external.attributes,
  att.log.barline.attributes,
  att.vis.barline.attributes,
  att.ges.barline.attributes,
  att.anl.barline.attributes
dot =
  
  ## The dot element is provided for the encoding of mensural notation. The dot element
  ##             may be used for dots of augmentation or division.
  element dot { dot.content, dot.localattributes }
dot.content = empty
dot.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.dot.attributes,
  att.vis.dot.attributes,
  att.ges.dot.attributes,
  att.anl.dot.attributes
keychange =
  
  ## Key change.
  element keychange { keychange.content, keychange.localattributes }
keychange.content = model.keyaccidLike*
keychange.localattributes =
  att.common.attributes, att.facsimile.attributes
back =
  
  ## Back matter such as indexes, advertisements, etc.
  element back { back.content, back.localattributes }
back.content =
  model.milestoneLike.text*, model.divLike+, model.milestoneLike.text*
back.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
blockquote =
  
  ## Blockquote contains a text phrase or passage attributed to a source external to the
  ##             text. The source for the quote may be included in the optional bibl sub-element.
  element blockquote { blockquote.content, blockquote.localattributes }
blockquote.content = model.textcomponentLike+, model.biblLike?
blockquote.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes
\div =
  
  ## Textual division.
  element div { div.content, div.localattributes }
div.content =
  model.milestoneLike.text*,
  model.headLike?,
  (model.divLike | model.textcomponentLike)+,
  model.milestoneLike.text*
div.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.typed.attributes
front =
  
  ## Front matter. The pb element is allowed here in order to accommodate page images,
  ##             e.g. cover, endpapers, etc. before and after the actual textual matter.
  element front { front.content, front.localattributes }
front.content =
  model.milestoneLike.text*,
  (model.divLike | model.frontPart)+,
  model.milestoneLike.text*
front.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
head =
  
  ## Contains any heading, for example, the title of a text division, or the heading of a
  ##             list. A head is not allowed to contain a sub-head in order to encourage the proper
  ##             nesting of div elements.
  element head { head.content, head.localattributes }
head.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
head.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes
item =
  
  ## Single item in a list.
  element item { item.content, item.localattributes }
item.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
item.localattributes = att.common.attributes, att.facsimile.attributes
l =
  
  ## The l element contains a single line of text. The n attribute should be used to
  ##             record a label for the line, i.e., most likely a line number. Do not confuse this
  ##             element with the line element, which is used for typographical lines.
  element l { l.content, l.localattributes }
l.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
l.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
lg =
  
  ## Line group usually contains verse although it may be used for any section of text
  ##             that is organized as a group of lines.
  element lg { lg.content, lg.localattributes }
lg.content = model.headLike?, model.lLike+
lg.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes
\list =
  
  ## List. N.B. A definition list should be encoded as a 2-column table.
  element list { list.content, list.localattributes }
list.content = model.headLike?, item+
list.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes,
  
  ##
  attribute form {
    
    ##
    "simple"
    | 
      ##
      "marked"
    | 
      ##
      "ordered"
  }?
table =
  
  ## Visual layout in tabular form.
  element table { table.content, table.localattributes }
table.content = model.captionLike?, tr+
table.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes
td =
  
  ## Table cell containing data.
  element td { td.content, td.localattributes }
td.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
td.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes,
  
  ##
  attribute colspan { data.INTEGERPOSITIVE }?,
  
  ##
  attribute rowspan { data.INTEGERPOSITIVE }?
th =
  
  ## Table cell containing header information.
  element th { th.content, th.localattributes }
th.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
th.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes,
  
  ##
  attribute colspan { data.INTEGERPOSITIVE }?,
  
  ##
  attribute rowspan { data.INTEGERPOSITIVE }?
tr =
  
  ## Table row.
  element tr { tr.content, tr.localattributes }
tr.content = (th | td)+
tr.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.xy.attributes
corpname =
  
  ## Identifies an organization or group of people that acts as a single entity. May
  ##             contain name parts in corpname sub-elements since corpname is included in
  ##             model.textphraseLike.
  element corpname { corpname.content, corpname.localattributes }
corpname.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
corpname.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
geogname =
  
  ## Geographic name. The proper noun designation for a place, natural feature, or
  ##             political jurisdiction. May contain name sub-parts in geogname sub-elements since
  ##             geogname is included in model.textphrase.
  element geogname { geogname.content, geogname.localattributes }
geogname.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
geogname.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
periodname =
  
  ## A label that describes a period of time, such as 'Baroque' or '3rd Style
  ##             period'.
  element periodname { periodname.content, periodname.localattributes }
periodname.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
periodname.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
persname =
  
  ## Designation for an individual, including any or all of that individual's forenames,
  ##             surnames, honorific titles, and added names. May contain name parts in persname
  ##             sub-elements since persname is included in model.textphrase.
  element persname { persname.content, persname.localattributes }
persname.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
persname.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
stylename =
  
  ## A label for a characteristic style of writing or performance, such as 'bebop' or
  ##             'rock-n-roll'. Do not confuse this element with the periodname element.
  element stylename { stylename.content, stylename.localattributes }
stylename.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
stylename.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.name.attributes,
  att.typed.attributes
caption =
  
  ## A label which accompanies an illustration or a table.
  element caption { caption.content, caption.localattributes }
caption.content =
  (text
   | model.textphraseLike
   | model.editLike
   | model.transcriptionLike)*
caption.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
fig =
  
  ## An illustration.
  element fig { fig.content, fig.localattributes }
fig.content = caption?, figdesc?, model.graphicLike*
fig.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.link.common.attributes,
  att.link.external.attributes,
  att.xy.attributes
extptr =
  
  ## An empty linking element that uses attributes to connect the MEI document to an
  ##             external electronic object. Don't confuse this element with the ptr element, which is an
  ##             internal link for movement from one place in the MEI document to another in the same
  ##             document.
  element extptr { extptr.content, extptr.localattributes }
extptr.content = empty
extptr.localattributes =
  att.common.attributes,
  att.link.common.attributes,
  att.link.external.attributes
extref =
  
  ## A linking element that can include text and subelements as part of its reference to
  ##             an electronic object that is external to the MEI document. Don't confuse this element
  ##             with the ref element, which is an internal link for movement from one place in the MEI
  ##             document to another in the same document.
  element extref { extref.content, extref.localattributes }
extref.content = (text | model.textphraseLike)*
extref.localattributes =
  att.common.attributes,
  att.lang.attributes,
  att.link.common.attributes,
  att.link.external.attributes
ptr =
  
  ## An empty internal linking element that uses attributes to provide for movement from
  ##             one place in a MEI document to another place in the same document. Unlike the ref
  ##             element, the ptr element cannot contain text or subelements to describe the referenced
  ##             object. Don't confuse this element with extptr which is used to connect the MEI document
  ##             to an external electronic object.
  element ptr { ptr.content, ptr.localattributes }
ptr.content = empty
ptr.localattributes =
  att.common.attributes,
  att.link.common.attributes,
  att.link.internal.attributes
ref =
  
  ## An internal linking element that provides for movement from one place in a MEI
  ##             document to another point in the same document. Unlike the ptr element, ref may contain
  ##             text and subelements to describe the destination. Don't confuse this element with extref
  ##             which provides for linking to an electronic object that is external to the MEI
  ##             document.
  element ref { ref.content, ref.localattributes }
ref.content = (text | model.textphraseLike)*
ref.localattributes =
  att.common.attributes,
  att.lang.attributes,
  att.link.common.attributes,
  att.link.internal.attributes
body =
  
  ## The body element contains the actual music data. When the music can be broken into
  ##             high-level, discrete, linear segments, such as movements in the case of a symphony,
  ##             there may be multiple mdiv elements within the body. This is the highest level
  ##             indication of the structure of the music.
  element body { body.content, body.localattributes }
body.content = model.mdivLike+
body.localattributes = att.common.attributes
ending =
  
  ## Alternative ending. The scoredef element is allowed so that an ending may have its
  ##             own meta-data without the overhead of child <section>s. Div sub-elements
  ##             are not allowed within ending in order to avoid collisions with the brackets that are
  ##             usually displayed over endings. Endings may *not* contain other ending elements.
  element ending { ending.content, ending.localattributes }
ending.content = model.Incl*, (model.sectionPart, model.Incl*)*
ending.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  att.link.common.attributes,
  att.link.external.attributes,
  att.link.internal.attributes,
  att.anl.ending.attributes,
  att.ges.ending.attributes,
  att.log.ending.attributes,
  att.vis.ending.attributes
group =
  
  ## The group element enables the gathering of multiple documents into a single file.
  ##             Because its model contains the music element, each of the documents can have its own
  ##             front and back matter.
  element group { group.content, group.localattributes }
group.content = (music | group), (music | group)*
group.localattributes = att.common.attributes
grpsym =
  
  ## Group symbol, i.e., a brace or bracket. This element may be used instead of the
  ##             staffgrp element's symbol attribute when exact placement or editorial details for the
  ##             brace must be recorded.
  element grpsym { grpsym.content, grpsym.localattributes }
grpsym.content = model.labelLike*
grpsym.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.grpsym.attributes,
  att.vis.grpsym.attributes,
  att.ges.grpsym.attributes,
  att.anl.grpsym.attributes
instrdef =
  
  ## Default MIDI instrument declaration. This element provides a starting or default
  ##             instrument declaration for a staff, a group of staves, or a layer. MIDI prog elements
  ##             may then change the instrument as necessary.
  element instrdef { instrdef.content, instrdef.localattributes }
instrdef.content = empty
instrdef.localattributes =
  att.common.attributes,
  
  ## sets the default MIDI channel.
  attribute midi.channel { data.MIDICHANNEL }?,
  
  ## specifies the 'on' part of the duty cycle as a percentage.
  attribute midi.duty { data.PERCENT }?,
  
  ## sets the default MIDI instrument number.
  attribute midi.instr { data.MIDIVALUE }?,
  
  ## provides a label for the MIDI instrument.
  attribute midi.instrname { text }?,
  
  ## sets the default MIDI port value.
  attribute midi.port { data.MIDIVALUE }?,
  
  ## sets the default MIDI track.
  attribute midi.track { data.INTEGERPOSITIVE }?
label =
  
  ## Staff, staffgrp, or grpsym label.
  element label { label.content, label.localattributes }
label.content =
  (text
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
label.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  
  ## Source descriptions in the header may be pointed to by putting their IDs in the
  ##                 source attribute. This allows labels from multiple sources to be encoded with a
  ##                 single label element.
  attribute source { xsd:IDREF }?
layer =
  
  ## Layer (voice). An independent stream of events on a staff. The term 'layer' in used
  ##             in order to avoid confusion between 'voice' and 'voice leading'. The n attribute should
  ##             be used to establish a connection back to the appropriate layerdef element. Usually, the
  ##             topmost layer is "1", next is "2", etc. *regardless of voicing*). If the n attribute is
  ##             omitted, encoding order is presumed to match the layer order. Of course, if data is
  ##             supplied for only a subset of layers, the n attribute must be supplied.
  element layer { layer.content, layer.localattributes }
layer.content = model.Incl*, (model.layerPart, model.Incl*)*
layer.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.layer.attributes,
  att.vis.layer.attributes,
  att.ges.layer.attributes,
  att.anl.layer.attributes
layerdef =
  
  ## Container for layer (e.g. voice) meta-information.
  element layerdef { layerdef.content, layerdef.localattributes }
layerdef.content = model.instrdefLike*
layerdef.localattributes =
  att.common.attributes,
  att.log.layerdef.attributes,
  att.vis.layerdef.attributes,
  att.ges.layerdef.attributes,
  att.anl.layerdef.attributes
mdiv =
  
  ## The mdiv element may contain one or both of 2 possible views of the music. The score
  ##             view is the traditional full and open score while the parts view contains each
  ##             performer's view of the score; that is, his part. These 2 views are necessary because it
  ##             is not always possible or desirable to generate one from the other. The score and parts
  ##             elements are placed here and not directly within the body element because score and part
  ##             characteristics may change from mdiv to mdiv. For example, the 2nd movement of a
  ##             symphony may require different performing forces (and therefore different score and part
  ##             layout) than the other movements. The mdiv element may be recursively nested in order to
  ##             represent music which exhibits this kind of structure. For example, an opera is normally
  ##             divided into acts, which are in turn divided into scenes. This may be represented by the
  ##             following markup: <mdiv> <- the opera <mdiv>
  ##             <- act I <mdiv> <- scene i <mdiv> <-
  ##             scene ii </mdiv> <mdiv> <- act II
  ##             <mdiv> <- scene i <mdiv> <- scene ii
  ##             </mdiv> </mdiv>
  element mdiv { mdiv.content, mdiv.localattributes }
mdiv.content = (model.scoreLike?, model.partsLike?) | model.mdivLike*
mdiv.localattributes =
  att.common.attributes, att.facsimile.attributes, att.typed.attributes
part =
  
  ## A part is an alternative visual rendition of the score from a particular performer's
  ##             point of view. Part elements are not used in the score to indicate voice leading. Next
  ##             attributes on event elements should be used for this purpose. Part elements are useful
  ##             for encoding individual parts when there is no score, such as early music part books,
  ##             when the music has non-aligning barlines, when different layout, such as page turns, are
  ##             needed for the score and parts, or for accommodating software that requires part-by-part
  ##             encoding. When assembly of the parts into a score is desired and there are non-aligning
  ##             barlines, barlines which indicate points of alignment across all the parts may be marked
  ##             as 'controlling', while non-aligning ones may be marked as 'non- controlling'.
  element part { part.content, part.localattributes }
part.content = model.scorePart*
part.localattributes =
  att.common.attributes,
  att.typed.attributes,
  att.log.part.attributes,
  att.vis.part.attributes,
  att.ges.part.attributes,
  att.anl.part.attributes
parts =
  
  ## Parts view of the mdiv.
  element parts { parts.content, parts.localattributes }
parts.content = model.partLike*
parts.localattributes =
  att.common.attributes,
  att.typed.attributes,
  att.log.parts.attributes,
  att.vis.parts.attributes,
  att.ges.parts.attributes,
  att.anl.parts.attributes
pgfoot1 =
  
  ## A running footer on the first page. This element is a specialized form of the fw
  ##             element. Auto-generated page numbers may be indicated with a processing instruction. The
  ##             pgheadN and pgfootN elements should *not* be used to encode textual
  ##             notes/annotations.
  element pgfoot1 { pgfoot1.content, pgfoot1.localattributes }
pgfoot1.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
pgfoot1.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
pgfoot2 =
  
  ## A running header on the pages following the first. This element is a specialized
  ##             form of the fw element. Auto-generated page numbers may be indicated with a processing
  ##             instruction. The pgheadN and pgfootN elements should *not* be used to encode textual
  ##             notes/annotations.
  element pgfoot2 { pgfoot2.content, pgfoot2.localattributes }
pgfoot2.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
pgfoot2.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
pghead1 =
  
  ## A running header on the first page. This element is a specialized form of the fw
  ##             element for capturing the table-formatted textual data that often appears on the first
  ##             page of printed music. It may also be used for similarly formatted material in
  ##             manuscripts. The pgheadN and pgfootN elements should *not* be used to encode textual
  ##             notes/annotations. Auto-generated page numbers may be indicated with a processing
  ##             instruction.
  element pghead1 { pghead1.content, pghead1.localattributes }
pghead1.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
pghead1.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
pghead2 =
  
  ## A running header on the pages following the first. This element is a specialized
  ##             form of the fw element. The pgheadN and pgfootN elements should *not* be used to encode
  ##             textual notes/annotations. Auto-generated page numbers may be indicated with a
  ##             processing instruction.
  element pghead2 { pghead2.content, pghead2.localattributes }
pghead2.content =
  (text
   | model.textcomponentLike
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
pghead2.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
sb =
  
  ## System break. Allowing staffdef within content.sb would make it possible to record
  ##             layout changes without requiring these changes to be made at section boundaries.
  ##             However, it would also allow meter and key changes, which is probably
  ##             undesirable.
  element sb { sb.content, sb.localattributes }
sb.content = custos?
sb.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.sb.attributes,
  att.vis.sb.attributes,
  att.ges.sb.attributes,
  att.anl.sb.attributes
score =
  
  ## Full score view of the mdiv. Since the measure element is optional, a score may
  ##             consist entirely of pagebreaks, each of which points to a page image. Div elements are
  ##             allowed preceding and following sections of music data in order to accommodate blocks of
  ##             explanatory text.
  element score { score.content, score.localattributes }
score.content = model.Incl*, (model.scorePart, model.Incl*)*
score.localattributes =
  att.common.attributes,
  att.typed.attributes,
  att.log.score.attributes,
  att.vis.score.attributes,
  att.ges.score.attributes,
  att.anl.score.attributes
scoredef =
  
  ## Container for score meta-information. Score-level encoding strategies for: a)
  ##             alternating meter sig, e.g. 2/4 3/4 in alternating measures (Read, p. 164-165) and
  ##             combined meters (Read, p.166-168): explicitly encode meters, make them invisible,
  ##             display both meter sigs at the start of the section b) compound meter sig, e.g. 2+3+2/4
  ##             (Read, p. 168-170): set meter.count=2+3+2 c) polymeters, e.g. different simultaneous
  ##             meters (Read, p. 170-173): 1. where barlines coincide, use beaming to elucidate the
  ##             polymeter 2. where barlines sometimes coincide, break into measures according to a
  ##             common unit of time, draw barlines where visually required 3. where barlines never
  ##             coincide, encode as parts only d) mixed meter sig, e.g. 2/4 + 3/16 in the same measure
  ##             (Read, p. 173-174): encode in common time base, e.g. 11/16, make meter invisible,
  ##             display both meter sigs at the start of the measure e) fractional meter sig, e.g. 3.5/4
  ##             (Read, p. 175-177): set meter.count=3.5 The beat count may be displayed as a fraction or
  ##             as its decimal equivalent.
  element scoredef { scoredef.content, scoredef.localattributes }
scoredef.content =
  model.alignLike*,
  model.chordtableLike?,
  model.symboltableLike?,
  model.keysigLike?,
  model.pgmetaLike.score?,
  (model.staffgrpLike? | model.staffdefLike?)
scoredef.localattributes =
  att.common.attributes,
  att.log.scoredef.attributes,
  att.vis.scoredef.attributes,
  att.ges.scoredef.attributes,
  att.anl.scoredef.attributes
section =
  
  ## The section element contains actual music data. The linking attributes are available
  ##             here so that this element can point to external media objects or to related internal
  ##             elements, such as annotations.
  element section { section.content, section.localattributes }
section.content = model.Incl*, (model.sectionPart, model.Incl*)*
section.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  att.link.common.attributes,
  att.link.external.attributes,
  att.link.internal.attributes,
  att.log.section.attributes,
  att.vis.section.attributes,
  att.ges.section.attributes,
  att.anl.section.attributes
staff =
  
  ## Staff. The n attribute is a connection back to the appropriate staffdef element. If
  ##             the n attribute is omitted, encoding order is presumed to match the staff order. Of
  ##             course, if data is supplied for only a subset of staves, the n attribute must be
  ##             supplied.
  element staff { staff.content, staff.localattributes }
staff.content = model.Incl*, (model.staffPart, model.Incl*)*
staff.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.staff.attributes,
  att.vis.staff.attributes,
  att.ges.staff.attributes,
  att.anl.staff.attributes
staffdef =
  
  ## Container for staff meta-information.
  element staffdef { staffdef.content, staffdef.localattributes }
staffdef.content =
  model.labelLike*,
  model.keysigLike?,
  (model.instrdefLike
   | model.layerdefLike
   | model.staffdefPart.multiplyDefinable)*
staffdef.localattributes =
  att.common.attributes,
  att.log.staffdef.attributes,
  att.vis.staffdef.attributes,
  att.ges.staffdef.attributes,
  att.anl.staffdef.attributes
staffgrp =
  
  ## A group of staves. Bracketed staff groups may contain other bracketed or braced
  ##             staff groups or single staves. See Read, p. 35-38, examples p. 434, 438. System is the
  ##             more proper name for this concept (Read, p. 37-38).
  element staffgrp { staffgrp.content, staffgrp.localattributes }
staffgrp.content =
  grpsym*,
  model.labelLike*,
  model.instrdefLike*,
  (model.staffgrpLike | model.staffdefLike)+,
  grpsym*
staffgrp.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.staffgrp.attributes,
  att.vis.staffgrp.attributes,
  att.ges.staffgrp.attributes,
  att.anl.staffgrp.attributes
syllable =
  
  ## The syllable element is used only for neume notation. Most neume notation can be
  ##             thought of as "neumed text".
  element syllable { syllable.content, syllable.localattributes }
syllable.content = model.Incl*, (model.syllablePart, model.Incl*)*
syllable.localattributes = att.common.attributes
ineume =
  
  ## The interrupted neume element is provided for the encoding of neume notation.
  element ineume { ineume.content, ineume.localattributes }
ineume.content =
  (model.eventLike
   | model.neumeModifierLike
   | model.apparatusLike
   | model.editLike
   | model.transcriptionLike)*
ineume.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  att.log.ineume.attributes,
  att.vis.ineume.attributes,
  att.ges.ineume.attributes,
  att.anl.ineume.attributes
uneume =
  
  ## A single, uninterrupted neume sign. While ineume is allowed as a sub-element of
  ##             uneume here as part of the model.eventLike.neume class, it is unlikely that an
  ##             uninterrupted neume containing an interrupted neume is a meaningful construct.
  element uneume { uneume.content, uneume.localattributes }
uneume.content =
  (model.eventLike
   | model.neumeModifierLike
   | model.apparatusLike
   | model.editLike
   | model.transcriptionLike)*
uneume.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  att.log.uneume.attributes,
  att.vis.uneume.attributes,
  att.ges.uneume.attributes,
  att.anl.uneume.attributes
nota =
  
  ## A single pitched event in the mensural repertoire. The nota element is allowed to
  ##             contain other events for situations where a single written note may be representative of
  ##             a group of performed notes. The accid and artic sub-elements may be used instead of the
  ##             note element's attributes when accid and artic represent first-class objects, e.g. when
  ##             they require attributes, such as x and y location attributes. Similarly, the syl
  ##             sub-element may be used instead of the syl attribute. The verse sub-element may be used
  ##             to group text syllables by verse.
  element nota { nota.content, nota.localattributes }
nota.content =
  (model.eventLike
   | model.noteModifierLike
   | model.sylLike
   | model.verseLike
   | model.apparatusLike
   | model.editLike
   | model.transcriptionLike)*
nota.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.nota.attributes,
  att.vis.nota.attributes,
  att.ges.nota.attributes,
  att.anl.nota.attributes
pausa =
  
  ## A rest in the mensural repertoire.
  element pausa { pausa.content, pausa.localattributes }
pausa.content = empty
pausa.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.pausa.attributes,
  att.vis.pausa.attributes,
  att.ges.pausa.attributes,
  att.anl.pausa.attributes
measure =
  
  ## Measure. "In Western notation a vertical line drawn through the staff to mark off
  ##             metrical units. Hence also the metrical unit thus indicated, which in American usage is
  ##             called 'measure'. English usage often relies on context alone to make the distinction
  ##             clear (e.g. 'up to the double bar', 'the end of the bar'), but 'bar-line' is also
  ##             common." (New Grove) In MEI, the measure element is also a linking element that uses
  ##             attributes to connect the MEI document to an external electronic object or to another
  ##             location within the MEI instance. Any number of alternative encodings for the measure
  ##             (ossia) can be included.
  element measure { measure.content, measure.localattributes }
measure.content = model.Incl*, (model.measurePart, model.Incl*)*
measure.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  att.link.common.attributes,
  att.link.internal.attributes,
  att.link.external.attributes,
  att.log.measure.attributes,
  att.vis.measure.attributes,
  att.ges.measure.attributes,
  att.anl.measure.attributes
ossia =
  
  ## The term "ossia" indicates an alternative, usually simpler, version of a measure
  ##             *present in the source being transcribed*. An ossia may be treated as a substitute for
  ##             the measure, in which case it is rendered on the current staff, or it may be rendered in
  ##             addition to the measure's contents, in which case it is rendered above the staff on a
  ##             reduced-size staff.
  element ossia { ossia.content, ossia.localattributes }
ossia.content = model.Incl*, (model.measurePart, model.Incl*)*
ossia.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.ossia.attributes,
  att.vis.ossia.attributes,
  att.ges.ossia.attributes,
  att.anl.ossia.attributes
beam =
  
  ## Beam. A container for a series of explicitly beamed events (Read, p. 80-94) which
  ##             begins and ends entirely within a measure. For beams which cross the barline, use the
  ##             beamspan element. Beaming may be indicated for an entire score, part or section by using
  ##             the beamgroup attribute on these elements. Secondary beams may be broken explicitly
  ##             using the breaksec attribute. Stem direction determines whether beams are centered
  ##             between notes with alternating stems (Read, p. 88-89).
  element beam { beam.content, beam.localattributes }
beam.content = (model.eventLike.common | model.eventLike.cmn)+
beam.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.beam.attributes,
  att.vis.beam.attributes,
  att.ges.beam.attributes,
  att.anl.beam.attributes
beatrpt =
  
  ## A repeated single beat (Read, p. 223-224).
  element beatrpt { beatrpt.content, beatrpt.localattributes }
beatrpt.content = empty
beatrpt.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.beatrpt.attributes,
  att.vis.beatrpt.attributes,
  att.ges.beatrpt.attributes,
  att.anl.beatrpt.attributes
bend =
  
  ## Bend (stretching a string to make it sound higher than normal). The bend element can
  ##             also be used for scoop, plop, falloff, and doit performance effects. It should *not* be
  ##             used for l.v. (laissez vibrer) indications. Precise performance data that differs from
  ##             the logical events in a measure may be recorded within the bend element.
  element bend { bend.content, bend.localattributes }
bend.content = (note | rest | tuplet)*
bend.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.bend.attributes,
  att.vis.bend.attributes,
  att.ges.bend.attributes,
  att.anl.bend.attributes
btrem =
  
  ## Bowed tremolo (Read, p. 393-394) is a rapid alternation on a single pitch or chord.
  ##             This element should also be used for wind double and triple tonguing and for flutter
  ##             tonguing when these are expressed as tremolandi.
  element btrem { btrem.content, btrem.localattributes }
btrem.content = chord | note
btrem.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.btrem.attributes,
  att.vis.btrem.attributes,
  att.ges.btrem.attributes,
  att.anl.btrem.attributes
chord =
  
  ## Chord, a simultaneous sounding of 2 or more notes in the same layer *with the same
  ##             duration*. See Read, p. 69.
  element chord { chord.content, chord.localattributes }
chord.content = (note | artic)*
chord.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.chord.attributes,
  att.vis.chord.attributes,
  att.ges.chord.attributes,
  att.anl.chord.attributes
ftrem =
  
  ## Fingered tremolo (Read, p. 235-238) is a rapid alternation between a pair of notes
  ##             (or chords or perhaps between a note and a chord) that are (usually) farther apart than
  ##             a major second. For rapid alternation between notes on the same pitch (bowed tremolo,
  ##             double &amp; triple tonguing, and flutter tonguing) use the btrem
  ##             element.
  element ftrem { ftrem.content, ftrem.localattributes }
ftrem.content =
  (chord, (chord | note))
  | (note, (chord | note))
ftrem.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.ftrem.attributes,
  att.vis.ftrem.attributes,
  att.ges.ftrem.attributes,
  att.anl.ftrem.attributes
gliss =
  
  ## Glissando (Read, p. 243-245, 397-398). Sometimes called a 'slide'. More precise
  ##             performance data may be recorded within the gliss element.
  element gliss { gliss.content, gliss.localattributes }
gliss.content = (note | rest | tuplet)*
gliss.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.gliss.attributes,
  att.vis.gliss.attributes,
  att.ges.gliss.attributes,
  att.anl.gliss.attributes
halfmrpt =
  
  ## A half-measure repeat in any meter.
  element halfmrpt { halfmrpt.content, halfmrpt.localattributes }
halfmrpt.content = model.eventLike*
halfmrpt.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.halfmrpt.attributes,
  att.vis.halfmrpt.attributes,
  att.ges.halfmrpt.attributes,
  att.anl.halfmrpt.attributes
note =
  
  ## Note (Read, p. 63), a single pitched event. The note element is allowed to contain
  ##             other events for situations where a single written note may be representative of a group
  ##             of performed notes. The accid and artic sub-elements may be used instead of the note
  ##             element's attributes when accid and artic represent first-class objects, e.g. when they
  ##             require attributes, such as x and y location attributes. Similarly, the syl sub-element
  ##             may be used instead of the syl attribute. The verse sub- element may be used to group
  ##             text syllables by verse.
  element note { note.content, note.localattributes }
note.content =
  (model.eventLike
   | model.noteModifierLike
   | model.verseLike
   | model.sylLike
   | model.apparatusLike
   | model.editLike
   | model.transcriptionLike)*
note.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.note.attributes,
  att.vis.note.attributes,
  att.ges.note.attributes,
  att.anl.note.attributes
rest =
  
  ## Rest (Read, p. 96-102), i.e., a non-sounding event, found in the source being
  ##             transcribed. Do not confuse this element with the space element which is used as an aid
  ##             for visual alignment.
  element rest { rest.content, rest.localattributes }
rest.content = empty
rest.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.rest.attributes,
  att.vis.rest.attributes,
  att.ges.rest.attributes,
  att.anl.rest.attributes
tuplet =
  
  ## Tuplet (Read, p. 187-215), bowed tremolo (Read, p. 394) and double, triple, or
  ##             flutter tonguing (Read, p. 348-349). The beam sub- element is allowed so that custom
  ##             beaming may be indicated, i.e., a septuplet may be divided into a group of 3 plus a
  ##             group of 4 notes.
  element tuplet { tuplet.content, tuplet.localattributes }
tuplet.content = (model.eventLike.common | model.eventLike.cmn)+
tuplet.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.tuplet.attributes,
  att.vis.tuplet.attributes,
  att.ges.tuplet.attributes,
  att.anl.tuplet.attributes
mrest =
  
  ## Complete measure rest in any meter (Read, p. 97-98). The numbering of consecutive
  ##             measures of rest may be controlled via the multi.number attribute on the scoredef or
  ##             staffdef elements.
  element mrest { mrest.content, mrest.localattributes }
mrest.content = empty
mrest.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.mrest.attributes,
  att.vis.mrest.attributes,
  att.ges.mrest.attributes,
  att.anl.mrest.attributes
mrpt =
  
  ## A repeated measure (Read, p. 224-225). The numbering of consecutive measures of rest
  ##             may be controlled via the multi.number attribute on the scoredef or staffdef
  ##             elements.
  element mrpt { mrpt.content, mrpt.localattributes }
mrpt.content = empty
mrpt.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.mrpt.attributes,
  att.vis.mrpt.attributes,
  att.ges.mrpt.attributes,
  att.anl.mrpt.attributes
mrpt2 =
  
  ## 2-measure repeat sign.
  element mrpt2 { mrpt2.content, mrpt2.localattributes }
mrpt2.content = empty
mrpt2.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.mrpt2.attributes,
  att.vis.mrpt2.attributes,
  att.ges.mrpt2.attributes,
  att.anl.mrpt2.attributes
mspace =
  
  ## Complete measure of space in any meter. The numbering of consecutive measures of
  ##             space may be controlled via the multi.number attribute on the scoredef or staffdef
  ##             elements.
  element mspace { mspace.content, mspace.localattributes }
mspace.content = empty
mspace.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.mspace.attributes,
  att.vis.mspace.attributes,
  att.ges.mspace.attributes,
  att.anl.mspace.attributes
multirest =
  
  ## Multiple measures of rest.
  element multirest { multirest.content, multirest.localattributes }
multirest.content = empty
multirest.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.multirest.attributes,
  att.vis.multirest.attributes,
  att.ges.multirest.attributes,
  att.anl.multirest.attributes
multirpt =
  
  ## Multiple repeated measures. Read (p. 225-226) says repeats of more than 2 measures
  ##             should be written out using repeat signs.
  element multirpt { multirpt.content, multirpt.localattributes }
multirpt.content = empty
multirpt.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.multirpt.attributes,
  att.vis.multirpt.attributes,
  att.ges.multirpt.attributes,
  att.anl.multirpt.attributes
arpeg =
  
  ## Arpeggiation, roll (Read, p. 241-243).
  element arpeg { arpeg.content, arpeg.localattributes }
arpeg.content = empty
arpeg.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.arpeg.attributes,
  att.vis.arpeg.attributes,
  att.ges.arpeg.attributes,
  att.anl.arpeg.attributes
beamspan =
  
  ## Alternative element for encoding beams, especially useful for beams which extend
  ##             across barlines.
  element beamspan { beamspan.content, beamspan.localattributes }
beamspan.content = empty
beamspan.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.beamspan.attributes,
  att.vis.beamspan.attributes,
  att.ges.beamspan.attributes,
  att.anl.beamspan.attributes
breath =
  
  ## The breathmark element is a specialized form of, i.e., syntactic sugar for,
  ##             dir/@type="breathmark" with "," as its PCDATA content.
  element breath { breath.content, breath.localattributes }
breath.content = empty
breath.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.breath.attributes,
  att.vis.breath.attributes,
  att.ges.breath.attributes,
  att.anl.breath.attributes
fermata =
  
  ## The fermata element is a specialized form of, i.e., syntactic sugar for,
  ##             dir/@type="fermata" with &amp;ferm; or &amp;uferm; as its PCDATA
  ##             content.
  element fermata { fermata.content, fermata.localattributes }
fermata.content = empty
fermata.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.fermata.attributes,
  att.vis.fermata.attributes,
  att.ges.fermata.attributes,
  att.anl.fermata.attributes
hairpin =
  
  ## Hairpin. (Read, p. 250-255) Indicates continuous dynamics expressed on the score as
  ##             graphics, e.g. &lt; and >.
  element hairpin { hairpin.content, hairpin.localattributes }
hairpin.content = empty
hairpin.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.hairpin.attributes,
  att.vis.hairpin.attributes,
  att.ges.hairpin.attributes,
  att.anl.hairpin.attributes
harppedal.content = empty
harppedal.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.harppedal.attributes,
  att.vis.harppedal.attributes,
  att.ges.harppedal.attributes,
  att.anl.harppedal.attributes
octave =
  
  ## Octave displacement. (Read, p. 45).
  element octave { octave.content, octave.localattributes }
octave.content = empty
octave.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.octave.attributes,
  att.vis.octave.attributes,
  att.ges.octave.attributes,
  att.anl.octave.attributes
pedal.content = empty
pedal.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.pedal.attributes,
  att.vis.pedal.attributes,
  att.ges.pedal.attributes,
  att.anl.pedal.attributes
reh =
  
  ## Rehearsal mark (Read, p. 443). Reh uses a subset of model.textphraseLike.limited. If
  ##             the entire rehearsal mark is boxed or circled, the enclose attribute is preferred over a
  ##             rend sub-element.
  element reh { reh.content, reh.localattributes }
reh.content = (text | lb | model.rendLike)*
reh.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.reh.attributes,
  att.vis.reh.attributes,
  att.ges.reh.attributes,
  att.anl.reh.attributes
slur =
  
  ## Slur, 2 notes performed legato (Read, p. 265-266). The slur element will use either
  ##             tstamp, duration, and place attributes or start, end, and bulge attributes. It is a
  ##             semantic error not to specify one of these groups of attributes. The slur and tie
  ##             elements may be used instead of the slur.* and tie.* attributes provided on chord and
  ##             note elements when 1) they are required by software, or 2) multiple, alternative slurs
  ##             are needed. Normally, a slur has only 2 participating events - the starting and ending
  ##             notes/chords.
  element slur { slur.content, slur.localattributes }
slur.content = empty
slur.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.slur.attributes,
  att.vis.slur.attributes,
  att.ges.slur.attributes,
  att.anl.slur.attributes
tie =
  
  ## Tie (Read, p. 110-111, 122).
  element tie { tie.content, tie.localattributes }
tie.content = empty
tie.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.tie.attributes,
  att.vis.tie.attributes,
  att.ges.tie.attributes,
  att.anl.tie.attributes
tupletspan =
  
  ## Alternative element for encoding tuplets, especially useful for those which extend
  ##             across barlines.
  element tupletspan { tupletspan.content, tupletspan.localattributes }
tupletspan.content = empty
tupletspan.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.tupletspan.attributes,
  att.vis.tupletspan.attributes,
  att.ges.tupletspan.attributes,
  att.anl.tupletspan.attributes
lyrics =
  
  ## Lyrics. The staff attribute gives the staff to which the lyrics are attached. The
  ##             rhythm of the lyrics will be taken from the notes of that staff. If there is more than 1
  ##             layer on that staff, the layer attribute may be used to indicate the layer from which
  ##             the rhythm should be taken.
  element lyrics { lyrics.content, lyrics.localattributes }
lyrics.content = verse+
lyrics.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.log.lyrics.attributes,
  att.vis.lyrics.attributes,
  att.ges.lyrics.attributes,
  att.anl.lyrics.attributes
verse =
  
  ## Lyric verse. The lb element is allowed here in order to facilitate karaoke
  ##             applications. The func attribute on lb may be used to distinguish true line ends from
  ##             line group ends for these applications.
  element verse { verse.content, verse.localattributes }
verse.content = (dir | dynam | tempo | space)*, syl+, lb*
verse.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.lang.attributes,
  att.log.verse.attributes,
  att.vis.verse.attributes,
  att.ges.verse.attributes,
  att.anl.verse.attributes
syl =
  
  ## Individual lyric syllable.
  element syl { syl.content, syl.localattributes }
syl.content =
  (text
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
syl.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.syl.attributes,
  att.vis.syl.attributes,
  att.ges.syl.attributes,
  att.anl.syl.attributes
mordent =
  
  ## Mordent (Read, p. 245-246). Events may be contained within mordent in order to
  ##             record precise performance data.
  element mordent { mordent.content, mordent.localattributes }
mordent.content = model.eventLike*
mordent.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.mordent.attributes,
  att.vis.mordent.attributes,
  att.ges.mordent.attributes,
  att.anl.mordent.attributes
trill =
  
  ## Trill (Read, p. 232-235). Events may be contained within trill in order to record
  ##             precise performance data.
  element trill { trill.content, trill.localattributes }
trill.content = model.eventLike*
trill.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.trill.attributes,
  att.vis.trill.attributes,
  att.ges.trill.attributes,
  att.anl.trill.attributes
turn =
  
  ## Turn (Read, p. 246-247). Events may be contained within turn in order to record
  ##             precise performance data. Whether the turn is accented or unaccented may be inferred
  ##             from the timestamp - accented turns occur directly on the affected beat, unaccented ones
  ##             do not.
  element turn { turn.content, turn.localattributes }
turn.content = model.eventLike*
turn.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.turn.attributes,
  att.vis.turn.attributes,
  att.ges.turn.attributes,
  att.anl.turn.attributes
barre =
  
  ## An indication of fingering in a chord tablature grid. The from and to attributes
  ##             should each contain the id of a chordmember element.
  element barre { barre.content, barre.localattributes }
barre.content = empty
barre.localattributes =
  att.common.attributes,
  
  ##
  attribute fret { data.FRET },
  
  ##
  attribute from { xsd:IDREF },
  
  ##
  attribute to { xsd:IDREF }
chorddef =
  
  ## Chord/tablature definition. An individual chord in the chord table. An id isn't
  ##             required here but harm elements can only reference a particular chorddef via an id.
  ##             Therefore, if a chorddef will ever be referenced, an id is necessary. The pos (position)
  ##             attribute is provided in order to create displayable chord tablature grids. (Read, p.
  ##             409-410)
  element chorddef { chorddef.content, chorddef.localattributes }
chorddef.content = chordmember*, barre*
chorddef.localattributes =
  att.common.attributes,
  
  ##
  attribute pos { text }?
chordmember =
  
  ## Chord member. An individual pitch in a chord. The fing and fret attributes are
  ##             provided in order to create displayable chord tablature grids. The inth (harmonic
  ##             interval) attribute may be used to facilitate automated performance of a chord. It gives
  ##             the number of 1/2 steps above the bass. Of course, for the bass note itself, inth should
  ##             be set to '0'.
  element chordmember {
    chordmember.content, chordmember.localattributes
  }
chordmember.content = empty
chordmember.localattributes =
  att.common.attributes,
  
  ## captures a written accidental symbol.
  attribute accid { data.ACCIDENTAL.IMPLICIT }?,
  
  ##
  attribute fing { data.FINGER.FRET }?,
  
  ##
  attribute fret { data.FRET }?,
  
  ##
  attribute inth { data.INTEGERNONNEGATIVE }?,
  
  ## contains the written pitch name.
  attribute pname { data.PITCHNAME }
chordtable =
  
  ## Chord/tablature look-up table. A table may be shared between mei instances through
  ##             the use of an external parsed entity containing the look-up table to be shared.
  element chordtable { chordtable.content, chordtable.localattributes }
chordtable.content = chorddef+
chordtable.localattributes = att.common.attributes
harm =
  
  ## Indication of harmony, e.g. chord names, tablature grids, harmonic analysis, figured
  ##             bass. Read, p. 411.
  element harm { harm.content, harm.localattributes }
harm.content =
  (text
   | model.textphraseLike.limited
   | model.graphicprimitiveLike
   | model.editLike
   | model.transcriptionLike)*
harm.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.log.harm.attributes,
  att.vis.harm.attributes,
  att.ges.harm.attributes,
  att.anl.harm.attributes
curve =
  
  ## Curve. The x1,y1 and x2,y2 attributes identify the two terminal points of the curve.
  ##             If the startid or endid attributes are present, then the x,y and x2,y2 coordinates are
  ##             relative to the xy coordinates of the referenced element(s). Otherwise, they are assumed
  ##             to be absolute page coordinate references. The bulge or, alternatively, the bezier
  ##             attribute, describe the shape of the curve. The bulge attribute describes the curve as a
  ##             set of distance values above or below an imaginary line connecting the endpoints of the
  ##             curve while the bezier attribute records the placement of Bezier control points as a
  ##             series of space-separated xy coordinate pairs, eg. 19 45 -32 118. The bulge attribute
  ##             must contain one or more values of the NUMBER datatype. Either the bezier attribute or
  ##             the bulge and xy coordinates are required. The rend attribute captures the appearance of
  ##             the curve.
  element curve { curve.content, curve.localattributes }
curve.content = empty
curve.localattributes =
  att.common.anl.attributes,
  att.color.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.startendid.attributes,
  att.typed.attributes,
  att.xy.required.attributes,
  att.xy2.required.attributes,
  
  ## records the placement of Bezier control points as a series of space-separated xy
  ##                 coordinates, eg. 19 45 -32 118.
  attribute bezier { xsd:NMTOKENS }?,
  
  ## describes the curve as a set of distance values above or below an imaginary line
  ##                 connecting the endpoints of the curve. The bulge attribute must contain one or more
  ##                 values of type NUMBER.
  attribute bulge { xsd:NMTOKENS }?,
  
  ## records the appearance of the curve.
  attribute rend { data.CURVERENDITION }?
line =
  
  ## Line. The x,y and x2,y2 attributes identify the two terminal points of the line.
  ##             Text content of the line element, e.g. 'gliss.', may be rendered with the line. If the
  ##             startid or endid attributes are present, then the x,y and x2,y2 coordinates are relative
  ##             to the xy coordinates of the referenced element(s). Otherwise, they are assumed to be
  ##             absolute page coordinate references. The appearance of the line is captured in the rend
  ##             attribute.
  element line { line.content, line.localattributes }
line.content = (text | model.textphraseLike.limited)*
line.localattributes =
  att.common.anl.attributes,
  att.color.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.startendid.attributes,
  att.typed.attributes,
  att.xy.required.attributes,
  att.xy2.required.attributes,
  
  ##
  attribute rend { data.LINERENDITION }?
symbol =
  
  ## A reference to a previously defined symbol. The x and y attributes identify the
  ##             starting point, e.g. "hotspot" of the symbol. If the startid attribute is present, then
  ##             the xy coordinates are relative to the xy coordinates of the referenced element.
  ##             Otherwise, they are assumed to be absolute page coordinate references. The ref attribute
  ##             must contain the id of a symboldef element. The scale attribute indicates that the
  ##             printed output must be scaled by the specified percentage.
  element symbol { symbol.content, symbol.localattributes }
symbol.content = empty
symbol.localattributes =
  att.common.anl.attributes,
  att.color.attributes,
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  att.xy.required.attributes,
  
  ## contains a reference to a previously-declared user-defined symbol.
  attribute ref { xsd:IDREF },
  
  ## indicates by what percentage the symbol should be scaled when rendered.
  attribute scale { data.PERCENT }?,
  
  ## holds a reference to the element to which the symbol is attached.
  attribute startid { xsd:IDREF }?
symboldef =
  
  ## Declaration of an individual symbol in a symboltable.
  element symboldef { symboldef.content, symboldef.localattributes }
symboldef.content = model.graphicprimitiveLike+
symboldef.localattributes = att.common.attributes
symboltable =
  
  ## Symboltable contains individual, user-defined symbols. Like a chord table, a
  ##             symboltable may be shared between mei instances through the use of an external parsed
  ##             entity containing the symboltable to be shared.
  element symboltable {
    symboltable.content, symboltable.localattributes
  }
symboltable.content = symboldef+
symboltable.localattributes = att.common.attributes
app =
  
  ## An app (apparatus) element contains one or more alternative encodings. The
  ##             alternatives may be thought of as exclusive or as parallel. The type attribute may
  ##             contain any convenient descriptive word, describing the extent of the variation (e.g.
  ##             note, phrase, measure, etc.), its text-critical significance (e.g. significant,
  ##             accidental, unclear), or the nature of the variation or the principles required to
  ##             understand it (e.g. lectio difficilior, usus auctoris, etc.).
  element app { app.content, app.localattributes }
app.content = rdg, rdg*
app.localattributes = att.common.attributes, att.typed.attributes
rdg =
  
  ## Reading. Since a reading can be a multi-measure section, the scoredef element is
  ##             allowed so that a reading may have its own meta-data without the overhead of child
  ##             sections. The measure sub-element is declared in the meiBase DTD and the pb sub-element
  ##             is declared in the meiShared DTD. The app sub-element is permitted in order to allow
  ##             nested sub-variants.
  element rdg { rdg.content, rdg.localattributes }
rdg.content = model.Incl*, (model.rdgPart, model.Incl*)*
rdg.localattributes =
  att.common.attributes,
  att.crit.attributes,
  att.typed.attributes,
  att.link.common.attributes,
  att.link.external.attributes,
  att.link.internal.attributes,
  att.anl.rdg.attributes,
  att.ges.rdg.attributes,
  att.log.rdg.attributes,
  att.vis.rdg.attributes
accessdesc =
  
  ## Description of the access that may be obtained to the MEI file.
  element accessdesc { accessdesc.content, accessdesc.localattributes }
accessdesc.content = (text | model.textphraseLike.limited)*
accessdesc.localattributes = att.common.attributes, att.bibl.attributes
acqsource =
  
  ## Source from which access to this item may be obtained, e.g. vendor, distributor,
  ##             etc.
  element acqsource { acqsource.content, acqsource.localattributes }
acqsource.content = (text | model.textphraseLike.limited)*
acqsource.localattributes = att.common.attributes, att.bibl.attributes
altmeiid =
  
  ## The altmeiid element may contain a bibliographic identifier that does not fit within
  ##             the meihead id attribute, for example because the id does not fit the definition of an
  ##             XML id or because multiple identifiers are needed.
  element altmeiid { altmeiid.content, altmeiid.localattributes }
altmeiid.content = (text | model.textphraseLike.limited)*
altmeiid.localattributes =
  att.bibl.attributes, att.common.attributes, att.typed.attributes
appinfo =
  
  ## Appinfo (application information) groups information about applications which have
  ##             acted upon the MEI file. This is not to be confused with applications which were used to
  ##             create the MEI file. These are recorded in the projectdesc element.
  element appinfo { appinfo.content, appinfo.localattributes }
appinfo.content = application*
appinfo.localattributes = att.common.attributes
application =
  
  ## Application provides information about an application which has acted upon the
  ##             document.
  element application {
    application.content, application.localattributes
  }
application.content = name+, (model.ptrLike* | model.pLike*)
application.localattributes =
  att.common.attributes,
  att.date.attributes,
  att.typed.attributes,
  
  ##
  attribute version { text }?
availability =
  
  ## Availability information/qualifications.
  element availability {
    availability.content, availability.localattributes
  }
availability.content = model.availabilityPart
availability.localattributes =
  att.common.attributes, att.bibl.attributes
change =
  
  ## Individual change within the revision description. The resp attribute contains a
  ##             pointer to an element containing info about the person/entity responsible for
  ##             change.
  element change { change.content, change.localattributes }
change.content = respstmt, changedesc, model.dateLike
change.localattributes = att.common.attributes, att.bibl.attributes
changedesc =
  
  ## Description of a revision of the MEI file.
  element changedesc { changedesc.content, changedesc.localattributes }
changedesc.content = model.pLike+
changedesc.localattributes = att.common.attributes, att.bibl.attributes
classcode =
  
  ## A classification code, i.e., LC subject or call number, or a thesaurus or ontology
  ##             citation. The source of controlled-vocabulary terms used in the keywords element.
  element classcode { classcode.content, classcode.localattributes }
classcode.content = text
classcode.localattributes = att.common.attributes, att.bibl.attributes
classification =
  
  ## The classification element groups information which describes the nature or topic of
  ##             a musical work in terms of a standard classification scheme, thesaurus, etc.
  element classification {
    classification.content, classification.localattributes
  }
classification.content = (classcode | keywords)+
classification.localattributes =
  att.common.attributes, att.bibl.attributes
condition =
  
  ## The physical condition of an item, particularly any variances between the physical
  ##             makeup of the item and that of other copies of the same item (e.g., missing pages,
  ##             plates, etc.). Condition may reflect other aspects of the physical condition of the item
  ##             as well (e.g., brittleness, faded images, etc.).
  element condition { condition.content, condition.localattributes }
condition.content = (text | model.textphraseLike.limited)*
condition.localattributes = att.common.attributes, att.bibl.attributes
correction =
  
  ## States how and under what circumstances corrections have been made in the
  ##             music/text.
  element correction { correction.content, correction.localattributes }
correction.content = model.pLike+
correction.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute method {
    
    ##
    "silent"
    | 
      ##
      "tags"
  }?,
  
  ##
  attribute status {
    
    ##
    "high"
    | 
      ##
      "medium"
    | 
      ##
      "low"
    | 
      ##
      "unknown"
  }?
creation =
  
  ## Non-bibliographic creation details for the work being encoded, in narrative
  ##             form.
  element creation { creation.content, creation.localattributes }
creation.content = model.textcomponentLike+
creation.localattributes = att.common.attributes, att.bibl.attributes
dimensions =
  
  ## Physical dimensions of a bibliographic source. There are no height and width
  ##             sub-elements; however, num sub-elements may be used with appropriate n attribute
  ##             values.
  element dimensions { dimensions.content, dimensions.localattributes }
dimensions.content = (text | model.textphraseLike.limited)*
dimensions.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute units { text }?
editionstmt =
  
  ## Container for meta-data pertaining to the edition.
  element editionstmt {
    editionstmt.content, editionstmt.localattributes
  }
editionstmt.content = (edition, respstmt*)+
editionstmt.localattributes = att.common.attributes, att.bibl.attributes
editorialdecl =
  
  ## Editorialdecl should be used to provide details of editorial principles and
  ##             practices applied during the encoding of musical text.
  element editorialdecl {
    editorialdecl.content, editorialdecl.localattributes
  }
editorialdecl.content =
  model.pLike+ | (model.editorialdeclPart+, model.pLike*)
editorialdecl.localattributes =
  att.common.attributes, att.bibl.attributes
encodingdesc =
  
  ## Documents the relationship between an electronic file and the source or sources from
  ##             which it was derived as well as applications used in the encoding/editing
  ##             process.
  element encodingdesc {
    encodingdesc.content, encodingdesc.localattributes
  }
encodingdesc.content = model.encodingPart
encodingdesc.localattributes =
  att.bibl.attributes, att.common.attributes
exhibithist =
  
  ## Exhibition history is a record of public exhibitions, including dates, venues,
  ##             etc.
  element exhibithist {
    exhibithist.content, exhibithist.localattributes
  }
exhibithist.content = (text | model.textphraseLike.limited)*
exhibithist.localattributes = att.common.attributes, att.bibl.attributes
extent =
  
  ## The extent element is used to express size in terms other than physical dimensions,
  ##             such as number of pages, number of records in file, number of bytes, performance
  ##             duration for music, audio recordings and visual projections, etc. For physical
  ##             dimensions use the dimensions element.
  element extent { extent.content, extent.localattributes }
extent.content = (text | model.textphraseLike.limited)*
extent.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute units { text }?
filedesc =
  
  ## Filedesc contains a full bibliographic description of the MEI file. Extent in this
  ##             context is file size.
  element filedesc { filedesc.content, filedesc.localattributes }
filedesc.content =
  titlestmt,
  editionstmt?,
  extent?,
  fingerprint?,
  pubstmt,
  seriesstmt?,
  notesstmt?,
  sourcedesc?
filedesc.localattributes = att.bibl.attributes, att.common.attributes
fingerprint =
  
  ## Traditionally, an identifier constructed by combining groups of characters
  ##             transcribed from specified pages of a printed item. For an electronic item, however, the
  ##             fingerprint should be a checksum. The checksum makes it possible to signal differences
  ##             between copies of the item.
  element fingerprint {
    fingerprint.content, fingerprint.localattributes
  }
fingerprint.content = text
fingerprint.localattributes = att.common.attributes
hand =
  
  ## The hand element is used to define each distinct scribe or handwriting style. The
  ##             initial attribute indicates whether this is the first or main scribe of the document.
  ##             The medium attribute describes the writing medium, e.g., 'pencil', or the tint or type
  ##             of ink, e.g. 'brown'. The resp attribute contains an ID reference to an element
  ##             containing the name of the editor or transcriber responsible for identifying the hand.
  ##             The characteristics of the hand, particularly those related to the quality of the
  ##             writing, such as 'shaky', 'thick', etc. may be described within the content of the hand
  ##             element.
  element hand { hand.content, hand.localattributes }
hand.content = (text | model.textphraseLike.limited)*
hand.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute initial { data.BOOLEAN }?,
  
  ##
  attribute medium { text }?,
  
  ##
  attribute resp { xsd:IDREF }?
handlist =
  
  ## The handlist element contains a series of <hand> elements listing the
  ##             different hands of the source.
  element handlist { handlist.content, handlist.localattributes }
handlist.content = hand+
handlist.localattributes = att.common.attributes, att.bibl.attributes
inscription =
  
  ## An inscription added to an item, such as a bookplate, a note designating the item as
  ##             a gift, and/or the author's signature.
  element inscription {
    inscription.content, inscription.localattributes
  }
inscription.content =
  (text
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
inscription.localattributes = att.common.attributes, att.bibl.attributes
interpretation =
  
  ## Describes the scope of any analytic or interpretive information added to the
  ##             transcription of the music.
  element interpretation {
    interpretation.content, interpretation.localattributes
  }
interpretation.content = model.pLike+
interpretation.localattributes =
  att.common.attributes, att.bibl.attributes
keywords =
  
  ## Collection of keywords or text phrases which describe the work.
  element keywords { keywords.content, keywords.localattributes }
keywords.content = term+
keywords.localattributes = att.common.attributes, att.bibl.attributes
language =
  
  ## The name of a language. The language of text elements may be related to this element
  ##             via its id, which may take the form of a code, drawn from a coded list, such as RFC 3066
  ##             or iso639-2b. The authority attribute should contain the name of the list from which a
  ##             controlled value is taken.
  element language { language.content, language.localattributes }
language.content = (text | model.textphraseLike.limited)*
language.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute authority { text }?
langusage =
  
  ## Langusage describes the languages, sublanguages, dialects, etc., represented within
  ##             the encoded work.
  element langusage { langusage.content, langusage.localattributes }
langusage.content = language+
langusage.localattributes = att.common.attributes, att.bibl.attributes
normalization =
  
  ## Indicates the extent of normalization or regularization of the original source
  ##             carried out in converting it to electronic form.
  element normalization {
    normalization.content, normalization.localattributes
  }
normalization.content = model.pLike+
normalization.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute method {
    
    ##
    "silent"
    | 
      ##
      "tags"
  }?
notesstmt =
  
  ## Collects together any bibliographic notes providing information additional to that
  ##             recorded in other parts of the bibliographic description.
  element notesstmt { notesstmt.content, notesstmt.localattributes }
notesstmt.content = model.annotLike+
notesstmt.localattributes = att.common.attributes, att.bibl.attributes
physdesc =
  
  ## Physical description of a source for the electronic edition. Dedicatory text and
  ##             title page features may be encoded here when they are not transcribed as part of the
  ##             front or back matter; i.e., when they are considered to be meta-data.
  element physdesc { physdesc.content, physdesc.localattributes }
physdesc.content = model.physdescPart+
physdesc.localattributes = att.common.attributes, att.bibl.attributes
physloc =
  
  ## Location of the source within a repository, e.g., shelf mark or other locational
  ##             information.
  element physloc { physloc.content, physloc.localattributes }
physloc.content = (text | model.textphraseLike.limited)*
physloc.localattributes = att.common.attributes, att.bibl.attributes
physmedium =
  
  ## Physmedium is used to record the physical materials used in the source, such as ink
  ##             and paper. The authority attribute should contain the name of the list from which a
  ##             controlled value is taken.
  element physmedium { physmedium.content, physmedium.localattributes }
physmedium.content = (text | model.textphraseLike.limited)*
physmedium.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute authority { text }?
price =
  
  ## The cost of access.
  element price { price.content, price.localattributes }
price.content = (text | model.textphraseLike.limited)*
price.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute units { text }?
profiledesc =
  
  ## Profiledesc provides a detailed description of the non- bibliographic aspects of the
  ##             creation of a work, specifically the languages and sublanguages used, the situation in
  ##             which it was produced, e.g. the participants, setting, reception history, etc.
  element profiledesc {
    profiledesc.content, profiledesc.localattributes
  }
profiledesc.content = model.profiledescPart
profiledesc.localattributes = att.bibl.attributes, att.common.attributes
projectdesc =
  
  ## Project-level meta-data describing the aim or purpose for which the electronic file
  ##             was encoded, funding agencies, etc. together with any other relevant information
  ##             concerning the process by which it was assembled or collected.
  element projectdesc {
    projectdesc.content, projectdesc.localattributes
  }
projectdesc.content = model.pLike+
projectdesc.localattributes = att.common.attributes, att.bibl.attributes
provenance =
  
  ## The record of ownership or custodianship of an item.
  element provenance { provenance.content, provenance.localattributes }
provenance.content =
  (text | model.listLike | model.textphraseLike.limited)*
provenance.localattributes = att.common.attributes, att.bibl.attributes
pubstmt =
  
  ## Publication meta-data.
  element pubstmt { pubstmt.content, pubstmt.localattributes }
pubstmt.content = unpub? | model.pubstmtPart*
pubstmt.localattributes = att.common.attributes, att.bibl.attributes
resp =
  
  ## Contains a phrase describing the nature of a person's intellectual responsibility.
  ##             The authority attribute should contain the name of the list from which a controlled
  ##             value is taken.
  element resp { resp.content, resp.localattributes }
resp.content = text
resp.localattributes =
  
  ##
  attribute authority { text }?
respstmt =
  
  ## A statement of responsibility names one or more individuals, groups, or in rare
  ##             cases, mechanical processes, responsible for creation or realization of the intellectual
  ##             or artistic content.
  element respstmt { respstmt.content, respstmt.localattributes }
respstmt.content = (resp | model.nameLike | model.nameLike.agent)*
respstmt.localattributes = att.bibl.attributes, att.common.attributes
revisiondesc =
  
  ## The revision history for an MEI file.
  element revisiondesc {
    revisiondesc.content, revisiondesc.localattributes
  }
revisiondesc.content = change+
revisiondesc.localattributes =
  att.common.attributes, att.bibl.attributes
samplingdecl =
  
  ## Contains a prose description of the rationale and methods used in sampling texts in
  ##             the creation of a corpus or collection.
  element samplingdecl {
    samplingdecl.content, samplingdecl.localattributes
  }
samplingdecl.content = model.pLike+
samplingdecl.localattributes =
  att.common.attributes, att.bibl.attributes
segmentation =
  
  ## Describes the principles according to which the musical text has been segmented, for
  ##             example into movements, sections, etc.
  element segmentation {
    segmentation.content, segmentation.localattributes
  }
segmentation.content = model.pLike+
segmentation.localattributes =
  att.common.attributes, att.bibl.attributes
seriesstmt =
  
  ## Groups information about the series, if any, to which a publication belongs. In this
  ##             context, the title element records the series title, the respStmt element records the
  ##             person or group responsible for the series, and the identifier element contains a series
  ##             identifier. The list element should be used when it is necessary to enumerate the
  ##             contents of the series. The seriesstmt is provided within seriesstmt for the description
  ##             of a sub-series.
  element seriesstmt { seriesstmt.content, seriesstmt.localattributes }
seriesstmt.content =
  title+, respstmt?, identifier*, (model.listLike | seriesstmt*)
seriesstmt.localattributes = att.common.attributes, att.bibl.attributes
source =
  
  ## Source contains a bibliographic description of a source for the electronic file.
  ##             When there are multiple sources, the data attribute may be used to link the description
  ##             to a particular data element, i.e., mdiv, part, section, ending, reading, measure, staff
  ##             or layer. Within source, the extent element may be used when only a portion of the
  ##             source, pages 1-3 for example, are encoded. If extent is absent, then the entire source
  ##             is presumed to have been encoded. Multiple physdesc sub-elements may be used to describe
  ##             the physically separate parts of a single source.
  element source { source.content, source.localattributes }
source.content =
  identifier*,
  titlestmt?,
  editionstmt?,
  pubstmt,
  physdesc?,
  seriesstmt?,
  notesstmt?,
  langusage?,
  classification?
source.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute data { xsd:IDREFS }?
sourcedesc =
  
  ## Sourcedesc is a container for the descriptions of the source(s) used in the creation
  ##             of the electronic file. The sourcedesc element is recommended where the MEI file is a
  ##             transcription of existing music, but is not required when the data is originally created
  ##             in MEI form.
  element sourcedesc { sourcedesc.content, sourcedesc.localattributes }
sourcedesc.content = source+
sourcedesc.localattributes = att.common.attributes
stdvals =
  
  ## Specifies the format used when standardized date or number values are
  ##             supplied.
  element stdvals { stdvals.content, stdvals.localattributes }
stdvals.content = model.pLike+
stdvals.localattributes = att.common.attributes, att.bibl.attributes
sysreq =
  
  ## System requirements for using the electronic item.
  element sysreq { sysreq.content, sysreq.localattributes }
sysreq.content = (text | model.textphraseLike.limited)*
sysreq.localattributes = att.common.attributes, att.bibl.attributes
term =
  
  ## Individual keywords or phrases which describe the work. The classcode attribute may
  ##             be used to link the term to a terminological source given in a classcode element. The
  ##             term element may include other term elements in order to allow the creation of
  ##             coordinated terms; i.e., terms created from a combination of other, independent
  ##             terms.
  element term { term.content, term.localattributes }
term.content = (text | term | model.textphraseLike.limited)*
term.localattributes =
  att.common.attributes,
  att.bibl.attributes,
  
  ##
  attribute classcode { xsd:IDREF }?
titlestmt =
  
  ## Container for title and responsibility meta-data.
  element titlestmt { titlestmt.content, titlestmt.localattributes }
titlestmt.content = title+, respstmt?
titlestmt.localattributes = att.bibl.attributes, att.common.attributes
treatmenthist =
  
  ## A record of the treatment the item has undergone (e.g., deacidification,
  ##             restoration, etc.) Treatment history may also comprise details of the treatment process
  ##             (e.g., chemical solutions used, techniques applied, etc.), the date the treatment was
  ##             applied, etc.
  element treatmenthist {
    treatmenthist.content, treatmenthist.localattributes
  }
treatmenthist.content = (text | model.textphraseLike.limited)*
treatmenthist.localattributes =
  att.common.attributes, att.bibl.attributes
treatmentsched =
  
  ## Scheduled treatment, e.g. deacidification, restoration, etc., for an item.
  element treatmentsched {
    treatmentsched.content, treatmentsched.localattributes
  }
treatmentsched.content = (text | model.textphraseLike.limited)*
treatmentsched.localattributes =
  att.common.attributes, att.bibl.attributes
unpub =
  
  ## The unpub element should be used to explicitly indicate that a bibliographic source
  ##             is unpublished.
  element unpub { unpub.content, unpub.localattributes }
unpub.content = empty
unpub.localattributes = att.common.attributes, att.bibl.attributes
userestrict =
  
  ## Usage restrictions, e.g., copyright statement in the filedesc, or (re-)publication
  ##             rights in the source element.
  element userestrict {
    userestrict.content, userestrict.localattributes
  }
userestrict.content = (text | model.textphraseLike.limited)*
userestrict.localattributes = att.common.attributes, att.bibl.attributes
cc =
  
  ## Parameter/control change. The num attribute specifies parameter number, while val
  ##             contains the parameter value. Each must fall in the range 0-127. A sampling of controllers and their numbers0Bank Select MSB1Modulation2Breath Control5Portamento Time7Main Volume10Pan11Expression32Bank Select LSB64Sustain Pedal (0=up, 127=down)65Portamento Pedal (0=off, 127=on)91Reverb93Chorus Depth120All Sounds Off (0)121Reset All Controllers (0)123All Notes Off (0)
  element cc { cc.content, cc.localattributes }
cc.content = empty
cc.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDIVALUE },
  
  ##
  attribute val { data.MIDIVALUE }
chan =
  
  ## Channel assignment.
  element chan { chan.content, chan.localattributes }
chan.content = empty
chan.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDICHANNEL }
chanpr =
  
  ## Channel pressure/after touch. The value of the num attribute must be in the range
  ##             0-127.
  element chanpr { chanpr.content, chanpr.localattributes }
chanpr.content = empty
chanpr.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDIVALUE }
cue =
  
  ## Cue point.
  element cue { cue.content, cue.localattributes }
cue.content = text
cue.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes
hex =
  
  ## Arbitrary MIDI data in hexadecimal form.
  element hex { hex.content, hex.localattributes }
hex.content = text
hex.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes
marker =
  
  ## Marker meta event.
  element marker { marker.content, marker.localattributes }
marker.content = text
marker.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes
metatext =
  
  ## Text meta event.
  element metatext { metatext.content, metatext.localattributes }
metatext.content = text
metatext.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes
midi =
  
  ## Container for a collection of elements which contain information useful when
  ##             generating MIDI output. The n attribute can be used to differentiate between multiple
  ##             MIDI data streams, e.g. quantized/unquantized, straight/swing, ornamented/as notated,
  ##             etc.
  element midi { midi.content, midi.localattributes }
midi.content =
  (cc
   | chan
   | chanpr
   | cue
   | hex
   | marker
   | metatext
   | noteoff
   | noteon
   | port
   | prog
   | seqnum
   | trkname
   | vel)*
midi.localattributes =
  att.common.attributes,
  att.log.midi.attributes,
  att.vis.midi.attributes,
  att.ges.midi.attributes,
  att.anl.midi.attributes
noteoff =
  
  ## Note-off.
  element noteoff { noteoff.content, noteoff.localattributes }
noteoff.content = empty
noteoff.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDIVALUE }
noteon =
  
  ## Note-on.
  element noteon { noteon.content, noteon.localattributes }
noteon.content = empty
noteon.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDIVALUE }
port =
  
  ## MIDI port. The num attribute must be in the range 0-127.
  element port { port.content, port.localattributes }
port.content = empty
port.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDIVALUE }
prog =
  
  ## Program change/new instrument. The num attribute must be in the range 0-127.
  element prog { prog.content, prog.localattributes }
prog.content = empty
prog.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.MIDIVALUE }
seqnum =
  
  ## Sequence number. The num attribute must be in the range 0-65535.
  element seqnum { seqnum.content, seqnum.localattributes }
seqnum.content = empty
seqnum.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute num { data.INTEGERNONNEGATIVE }
trkname =
  
  ## Track/sequence name.
  element trkname { trkname.content, trkname.localattributes }
trkname.content = text
trkname.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes
vel =
  
  ## Note-on/off velocity. The num attribute must be in the range 1-127.
  element vel { vel.content, vel.localattributes }
vel.content = empty
vel.localattributes =
  att.common.anl.attributes,
  att.common.attributes,
  att.midi.event.attributes,
  
  ##
  attribute form {
    
    ##
    "on"
    | 
      ##
      "off"
  },
  
  ##
  attribute num { text }
add =
  
  ## Marks an addition to the musical text. The add element contains material inserted by
  ##             an author, scribe, annotator, or corrector. The resp attribute contains a ID reference
  ##             to an element containing the editor or transcriber responsible for identifying the hand
  ##             of the addition. The cert attribute signifies the degree of certainty ascribed to the
  ##             identification of the hand of the addition. The hand attribute signifies the hand of the
  ##             agent which made the addition.
  element add { add.content, add.localattributes }
add.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
add.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.edit.attributes,
  att.trans.attributes
choice =
  
  ## Choice groups a number of alternative encodings for the same point in a text.
  ##             Because the children of a choice element all represent alternative ways of encoding the
  ##             same sequence, it is natural to think of them as mutually exclusive. However, there may
  ##             be cases where a full representation of a text requires the alternative encodings to be
  ##             considered as parallel. Note also that choice elements may be recursively nested.
  element choice { choice.content, choice.localattributes }
choice.content = (choice | model.choicePart)*
choice.localattributes = att.common.attributes
corr =
  
  ## Correction contains the correct form of an apparent erroneous passage. The resp
  ##             attribute contains an ID reference to an element containing the name of the editor or
  ##             transcriber responsible for suggesting the correction held as the content of the
  ##             <corr> element. If the correction was made in the source, resp should be
  ##             used to identify the hand of the corrector.
  element corr { corr.content, corr.localattributes }
corr.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
corr.localattributes =
  att.common.attributes, att.edit.attributes, att.trans.attributes
damage =
  
  ## Contains an area of damage to the carrier. In the case of damage resulting from an
  ##             identifiable cause, the agent attribute signifies the causative agent. The degree
  ##             attribute signifies the degree of damage according to a convenient scale. A
  ##             <damage> tag with this attribute should only be used where the text may be
  ##             read with some confidence; data supplied from other sources should be tagged as
  ##             <supplied>. The extent attribute indicates approximately how much text is
  ##             in the damaged area, in notes, measures, inches, or any appropriate unit, where this
  ##             cannot be deduced from the contents of the tag. For example, the damage may span
  ##             structural divisions in the text so that the tag must then be empty of content. In the
  ##             case of damage (deliberate defacement, etc.) assignable to an identifiable hand, the
  ##             hand attribute signifies the hand responsible for the damage.
  element damage { damage.content, damage.localattributes }
damage.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
damage.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.typed.attributes,
  
  ##
  attribute agent { text }?,
  
  ##
  attribute degree { text }?,
  
  ##
  attribute extent { text }?,
  
  ##
  attribute hand { xsd:IDREF }?
del =
  
  ## Del contains information deleted, marked as deleted, or otherwise indicated as
  ##             superfluous or spurious in the copy text by an author, scribe, annotator, or corrector.
  ##             The resp attribute contains an ID reference to an element containing the name of the
  ##             editor or transcriber responsible for identifying the hand of the deletion. The cert
  ##             attribute signifies the degree of certainty ascribed to the identification of the hand
  ##             of the deletion. The hand of the agent which made the deletion should be pointed to
  ##             using the hand attribute. The rend attribute may be used to record the method used to
  ##             make the deletion (overstrike, strike[through], etc.) or how the deleted matter should
  ##             be displayed.
  element del { del.content, del.localattributes }
del.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
del.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.trans.attributes,
  
  ##
  attribute rend { text }?
gap =
  
  ## Indicates a point where material has been omitted in a transcription, whether as
  ##             part of sampling practice or for editorial reasons described in the MEI header. When
  ##             material is omitted because it is illegible or inaudible, <unclear> should
  ##             be used instead. Similarly, use <damage> if the omission is due to damage
  ##             and <del> if the omission is because the material is marked as deleted, or
  ##             otherwise indicated as superfluous or spurious in the copy text by an author, scribe,
  ##             annotator, or corrector. An indication of how much material has been omitted from the
  ##             transcription may be recorded in the extent attribute. The unit attribute names the unit
  ##             used for describing the extent of the gap. The reason attribute gives the reason for
  ##             omission. Sample values include 'sampling', 'irrelevant', 'cancelled'. The resp
  ##             attribute contains an ID reference to an element containing the name of the editor,
  ##             transcriber or encoder responsible for the decision not to provide any transcription of
  ##             the material and hence the application of the <gap> tag.
  element gap { gap.content, gap.localattributes }
gap.content = empty
gap.localattributes =
  att.common.attributes,
  att.edit.attributes,
  
  ##
  attribute extent { text }?,
  
  ##
  attribute hand { xsd:IDREF }?,
  
  ##
  attribute reason { text }?,
  
  ##
  attribute unit { text }?
handshift =
  
  ## Marks the beginning of a passage written in a new hand, or of a change in the
  ##             scribe, writing style, ink or character of the document hand. The character attribute
  ##             describes characteristics of the hand, particularly those related to the quality of the
  ##             writing, e.g., 'shaky', 'thick', regular'. A description of the tint or type of ink,
  ##             e.g. 'brown' or the writing medium, e.g. 'pencil', may be placed in the medium
  ##             attribute. The new hand may be identified using the new attribute, while the previous
  ##             hand may be recorded in the old attribute. The resp attribute contains an ID reference
  ##             to an element containing the name of the editor or transcriber responsible for
  ##             identifying the change of hand.
  element handshift { handshift.content, handshift.localattributes }
handshift.content = empty
handshift.localattributes =
  att.common.attributes,
  att.edit.attributes,
  att.facsimile.attributes,
  
  ##
  attribute character { text }?,
  
  ##
  attribute medium { text }?,
  
  ##
  attribute new { xsd:IDREF }?,
  
  ##
  attribute old { xsd:IDREF }?
orig =
  
  ## Orig (original form) contains a reading which is marked as following the original,
  ##             rather than being normalized or corrected. An orig will often be combined with a
  ##             regularized form within a choice element.
  element orig { orig.content, orig.localattributes }
orig.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
orig.localattributes =
  att.common.attributes,
  att.edit.attributes,
  att.facsimile.attributes,
  att.typed.attributes
reg =
  
  ## Contains a reading which has been regularized or normalized in some sense. It is
  ##             possible to identify the individual responsible for the regularization, and, using the
  ##             choice and orig elements, to provide both original and regularized readings.
  element reg { reg.content, reg.localattributes }
reg.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
reg.localattributes = att.common.attributes, att.edit.attributes
restore =
  
  ## Restore indicates restoration of musical material to an earlier state by
  ##             cancellation of an editorial or authorial marking or instruction. The desc (description)
  ##             attribute gives a prose description of the means of restoration, 'stet' or
  ##             'strike-down', for example. The cert attribute signifies the degree of certainty
  ##             ascribed to the identification of the hand of the restoration. The type attribute may be
  ##             used to indicate the action cancelled by the restoration. The resp attribute contains an
  ##             ID reference to an element containing the name of the editor or transcriber responsible
  ##             for identifying the hand of the restoration. The hand attribute signifies the hand of
  ##             the agent which made the restoration.
  element restore { restore.content, restore.localattributes }
restore.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
restore.localattributes =
  att.common.attributes,
  att.facsimile.attributes,
  att.trans.attributes,
  att.typed.attributes,
  
  ##
  attribute desc { text }?
sic =
  
  ## Contains apparently incorrect or inaccurate musical material. A correction for the
  ##             apparent error may be given in an accompanying child or sibling corr element.
  element sic { sic.content, sic.localattributes }
sic.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
sic.localattributes = att.common.attributes, att.facsimile.attributes
subst =
  
  ## Substitution groups transcriptional elements when the combination is to be regarded
  ##             as a single intervention in the text.
  element subst { subst.content, subst.localattributes }
subst.content = model.transcriptionLike, model.transcriptionLike+
subst.localattributes =
  
  ##
  [ a:defaultValue = "subst" ]
  attribute meiform {
    
    ##
    "subst"
  }?
supplied =
  
  ## Supplied contains musical material supplied by the transcriber or editor in place of
  ##             text which cannot be read, either because of physical damage or loss in the original or
  ##             because it is illegible for any reason. When the presumed loss of text arises from an
  ##             identifiable cause, agent signifies the causative agent. When the presumed loss of text
  ##             arises from action (partial deletion, etc.) assignable to an identifiable hand, the hand
  ##             attribute signifies the hand responsible for the action. The reason attribute indicates
  ##             why the text has to be supplied, e.g. 'overbinding', 'faded ink', 'lost folio', 'omitted
  ##             in original', etc. The source attribute contains the source of the supplied text.
  element supplied { supplied.content, supplied.localattributes }
supplied.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
supplied.localattributes =
  att.common.attributes,
  att.edit.attributes,
  att.facsimile.attributes,
  
  ##
  attribute agent { text }?,
  
  ##
  attribute reason { text }?
titlepage =
  
  ## The titlepage element contains a transcription of the title page of a text. It may
  ##             be used within the physdesc element when no other transcription is provided.
  element titlepage { titlepage.content, titlepage.localattributes }
titlepage.content =
  (model.textcomponentLike | model.milestoneLike.text)+
titlepage.localattributes =
  att.common.attributes, att.facsimile.attributes, att.lang.attributes
unclear =
  
  ## Unclear contains musical material which cannot be transcribed with certainty because
  ##             it is illegible or inaudible in the source. Where the difficulty in transcription arises
  ##             from an identifiable cause, the agent attribute signifies the causative agent. The cert
  ##             attribute signifies the degree of certainty ascribed to the transcription of the text
  ##             contained within the <unclear> element. Where the difficulty in
  ##             transcription arises from action (partial deletion, etc.) assignable to an identifiable
  ##             hand, the hand attribute signifies the hand responsible for the action. The reason
  ##             attribute indicates why the material is difficult to transcribe. The resp attribute
  ##             indicates the individual responsible for the transcription of the word, phrase, or
  ##             passage contained with the <unclear> element.
  element unclear { unclear.content, unclear.localattributes }
unclear.content =
  (text
   | model.textphraseLike
   | model.eventLike
   | model.controleventLike
   | model.lyricsLike
   | model.midiLike
   | model.editLike
   | model.transcriptionLike
   | model.eventLike.cmn.measureFilling
   | model.noteModifierLike
   | model.sectionLike
   | model.measureLike
   | model.staffLike
   | model.layerLike)*
unclear.localattributes =
  att.common.attributes,
  att.edit.attributes,
  att.facsimile.attributes,
  
  ##
  attribute agent { text }?,
  
  ##
  attribute hand { xsd:IDREF }?,
  
  ##
  attribute reason { text }?
facsimile =
  
  ## Facsimile contains a representation of some written source in the form of a set of
  ##             images rather than as transcribed or encoded text. The source attribute may be used to
  ##             link the collection of images with a particular source.
  element facsimile { facsimile.content, facsimile.localattributes }
facsimile.content = (model.graphicLike | surface)*
facsimile.localattributes =
  att.common.attributes,
  
  ## Source descriptions in the header may be pointed to by putting their IDs in the
  ##                 source attribute. This allows facsimiles of multiple sources to be encoded with a
  ##                 single facsimile element.
  attribute source { xsd:IDREF }?
surface =
  
  ## The surface element defines a written surface in terms of a rectangular coordinate
  ##             space, optionally grouping one or more graphic representations of that space, and
  ##             rectangular zones of interest within it.
  element surface { surface.content, surface.localattributes }
surface.content = figdesc*, model.graphicLike*, zone*
surface.localattributes =
  att.common.attributes,
  att.coordinated.attributes,
  
  ## holds a reference to the first feature occurring on this surface.
  attribute startid { xsd:IDREF }?
zone =
  
  ## The zone element defines a rectangular area contained within a surface
  ##             element.
  element zone { zone.content, zone.localattributes }
zone.content = figdesc*, model.graphicLike*
zone.localattributes = att.common.attributes, att.coordinated.attributes
timeline =
  
  ## Timeline provides a set of ordered points in time to which musical elements can be
  ##             linked in order to create a temporal alignment of those elements. The origin attribute
  ##             designates the origin of the timeline, i.e., the time at which it begins. It must point
  ##             to one of the when elements in its content. Units specifies the unit of time
  ##             corresponding to the value of the interval attribute of the timeline or of its
  ##             constituent points in time. The mediacontent attribute is provided in order to link the
  ##             timeline to a particular external media file, such as an audio file. The medialength
  ##             attribute specifies the length of the external media file in terms of the units
  ##             attribute.
  element timeline { timeline.content, timeline.localattributes }
timeline.content = when*
timeline.localattributes =
  att.common.attributes,
  
  ##
  attribute mediacontent { data.URI }?,
  
  ##
  attribute medialength { data.INTEGERPOSITIVE }?,
  
  ##
  attribute origin { xsd:IDREF },
  
  ##
  attribute units { xsd:NMTOKEN }?
when =
  
  ## The when element indicates a point in time either absolutely (using the absolute
  ##             attribute), or relative to other elements in the same timeline element (using the
  ##             interval and since attributes). The absolute attribute provides an absolute value for
  ##             the time associated with this point. It is required for the element designated as the
  ##             origin by the parent timeline. Unit specifies the unit of time in which the @interval
  ##             value is expressed, if this is not inherited from the parent timeline. Interval
  ##             specifies a positive numeric time interval. The since attribute identifies the reference
  ##             point for determining the time of the current when element, which is obtained by adding
  ##             the interval to the time of the reference point. It should point to another when element
  ##             in the same timeline. If this attribute is omitted, and the absolute attribute is not
  ##             specified, then the reference point is understood to be the preceding when
  ##             element.
  element when { when.content, when.localattributes }
when.content = empty
when.localattributes =
  att.common.attributes,
  
  ##
  attribute absolute { text }?,
  
  ##
  attribute interval { data.NUMBERPOSITIVE }?,
  
  ##
  attribute since { xsd:IDREF }?,
  
  ##
  attribute unit { xsd:NMTOKEN }?
mei =
  
  ## The names of the potential document elements, i.e., mei, meicorpus, meihead, and
  ##             music, should not be changed in order to assure an absolute minimum level of MEI
  ##             compliance. The version attribute contains the version of the DTD used by the instance.
  ##             The document element for a single document contains a header and data.
  element mei { mei.content, mei.localattributes }
mei.content = meihead, music
mei.localattributes =
  
  ##
  attribute id { xsd:ID }?,
  
  ##
  [ a:defaultValue = "1.9b" ] attribute version { meiVersion }?
meiCorpus.content = meihead, mei+
meiCorpus.localattributes =
  
  ##
  attribute id { xsd:ID }?,
  
  ##
  [ a:defaultValue = "1.9b" ] attribute version { meiVersion }?
meihead =
  
  ## The meihead element contains general information about the encoded file.
  element meihead { meihead.content, meihead.localattributes }
meihead.content = altmeiid*, filedesc, model.headerPart, revisiondesc?
meihead.localattributes =
  att.bibl.attributes,
  att.common.attributes,
  att.lang.attributes,
  
  ##
  attribute type {
    
    ##
    "music"
    | 
      ##
      "corpus"
  }?,
  
  ##
  [ a:defaultValue = "1.9b" ] attribute version { meiVersion }?
music =
  
  ## This element is a container for everything else in the document besides the
  ##             header.
  element music { music.content, music.localattributes }
music.content = model.facsimileLike*, model.musicPart
music.localattributes =
  att.common.attributes,
  
  ##
  [ a:defaultValue = "1.9b" ] attribute version { meiVersion }?
start = mei
