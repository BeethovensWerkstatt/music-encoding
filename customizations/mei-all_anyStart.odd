<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>MEI Next Release (2015?) Testing</title>
        <respStmt>
          <resp>Authored by</resp>
          <name xml:id="PR">Perry Roland</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change n="1" when="2014-12-04" who="#PR">
        <desc>Creation of the initial ODD.</desc>
      </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <!-- This file is a superset of mei-all. It contains changes to both mei-all_anyStart and mei-all.
        This file permits the validation of MEI fragments, whereas mei-all presumes a smaller set of
        possible start elements: mei, meiHead, meiCorpus, and music. Some elements (line, marker, symbol, 
        and title) explicitly reference the element in the MEI namespace, since SVG also has elements 
        with these names. -->
      <schemaSpec ident="mei"
        start="abbr accessRestrict accid acqSource actor add address addrLine altId anchoredText annot app 
        appInfo application arpeg arranger artic audience author availability avFile back barLine barre beam 
        beamSpan beatRpt bend bibl biblList biblScope body breath bTrem byline caption captureMode carrierForm 
        castGrp castItem castList cc chan change changeDesc chanPr choice chord chordDef chordMember 
        chordTable classCode classification clef clefGrp clip componentGrp composer condition contentItem 
        contents context corpName corr correction creation cue curve custos damage date del depth dimensions
        dir distributor div dot dynam edition editionStmt editor editorialDecl encodingDesc ending  
        event eventList exhibHist expan expansion expression expressionList extent f facsimile fb fermata fig 
        figDesc fileChar fileDesc fing fingGrp fingerprint flags front fTrem funder fw gap genre geogName gliss 
        graphic group grpSym hairpin halfmRpt hand handList handShift harm harpPedal head height hex history 
        identifier imprint incip incipCode incipText ineume inscription instrDef instrGrp perfRes perfResList 
        interpretation item itemList key keyAccid keySig l label language langUsage  layer layerDef lb lem lg 
        li librettist ligature mei_line list lyricist lyrics mei_marker mdiv measure mei meiCorpus meiHead 
        mensur mensuration metaText meter meterSig meterSigGrp midi mordent mRest mRpt mRpt2 mSpace multiRest 
        multiRpt music name normalization note notehead noteOff noteOn notesStmt num octave orig ossia 
        otherChar p pad part parts pb pedal perfMedium performance periodName persName pgDesc pgFoot pgFoot2 
        pgHead pgHead2 phrase physDesc physLoc physMedium plateNum playingSpeed port price prog projectDesc 
        proport provenance ptr publisher pubPlace pubStmt quote rdg recipient recording ref reg reh relatedItem 
        relation relationList rend repository resp respStmt rest restore revisionDesc role roleDesc samplingDecl 
        sb score scoreDef scoreFormat section segmentation seqNum series seriesStmt sic slur soundChan source 
        sourceDesc space specRepro sponsor stack staff staffDef staffGrp stdVals stem styleName subst supplied 
        surface syl syllable mei_symbol symbolDef symbolTable sysReq table tapeConfig td tempo term termList 
        textLang th tie timeline mei_title titlePage titleStmt tr trackConfig treatHist treatSched trill trkName 
        tuplet tupletSpan turn unclear uneume unpub useRestrict vel verse watermark when width work workDesc zone"
        prefix="mei_" ns="http://www.music-encoding.org/ns/mei">

        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.cmn"/>
        <moduleRef key="MEI.mensural"/>
        <moduleRef key="MEI.neumes"/>
        <moduleRef key="MEI.analysis"/>
        <moduleRef key="MEI.cmnOrnaments"/>
        <moduleRef key="MEI.corpus"/>
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.edittrans"/>
        <moduleRef key="MEI.externalsymbols"/>
        <moduleRef key="MEI.facsimile"/>
        <moduleRef key="MEI.figtable"/>
        <moduleRef key="MEI.fingering"/>
        <moduleRef key="MEI.frbr"/>
        <moduleRef key="MEI.harmony"/>
        <moduleRef key="MEI.lyrics"/>
        <moduleRef key="MEI.midi"/>
        <moduleRef key="MEI.namesdates"/>
        <moduleRef key="MEI.performance"/>
        <moduleRef key="MEI.ptrref"/>
        <moduleRef key="MEI.tablature"/>
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.usersymbols"/>

        <!-- Include SVG -->
        <moduleRef url="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/svg11.rng">
          <content>
            <rng:define name="mei_model.graphicLike" combine="choice">
              <rng:ref name="svg"/>
            </rng:define>
          </content>
        </moduleRef>

        <!-- =============================== RESOLVE ISSUES =============================== -->

        <!-- THESE CHANGES BREAK BACKWARD COMPATIBILITY! -->
        <!-- Add data.FLAGSHAPE and data.FLAGPOSITION datatypes -->
        <!-- <macroSpec ident="data.FLAGSHAPE" module="MEI" type="dt" mode="add">
          <desc>Captures the general shape of flags on a stem.</desc>
          <content>
            <valList type="closed">
              <valItem ident="straight"/>
              <valItem ident="angled"/>
              <valItem ident="curled"/>
              <valItem ident="circular"/>
              <valItem ident="rounded"/>
              <valItem ident="flared"/>
              <valItem ident="extended"/>
              <valItem ident="hooked"/>
            </valList>
          </content>
        </macroSpec>
        <macroSpec ident="data.FLAGPOSITION" module="MEI" type="dt" mode="add">
          <desc>Captures the position of flags relative to the stem.</desc>
          <content>
            <valList type="closed">
              <valItem ident="left"/>
              <valItem ident="right"/>
              <valItem ident="end"/>
            </valList>
          </content>
        </macroSpec> -->
        <!-- Add notehead element -->
        <!--<classSpec ident="att.notehead.vis" module="MEI.shared" type="atts" mode="add">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.coloration"/>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.stems"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.to"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="fill" usage="opt">
              <desc>Describes how/if the notehead is filled.</desc>
              <datatype>
                <rng:ref name="data.FILL"/>
              </datatype>
            </attDef>
            <attDef ident="fillcolor" usage="opt">
              <desc>Captures the fill color of a notehead if it's different from the overall note
                color.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="mod" usage="opt">
              <desc>Records any additional symbols applied to the notehead.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.NOTEHEADMODIFIER"/>
              </datatype>
            </attDef>
            <attDef ident="rotation" usage="opt">
              <desc>A positive value for rotation rotates the notehead in a counter-clockwise
                fashion, while negative values produce clockwise rotation.</desc>
              <datatype>
                <rng:ref name="data.DEGREES"/>
              </datatype>
            </attDef>
            <attDef ident="shape" usage="opt">
              <desc>Used to override the head shape normally used for the given duration.</desc>
              <datatype>
                <rng:ref name="data.HEADSHAPE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="notehead" module="MEI.shared" mode="add">
          <desc>The part of the note that, when placed on a staff, indicates pitch (and often
            duration).</desc>
          <classes>
            <memberOf key="att.notehead.vis"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
        <!-\- Add stem element -\->
        <classSpec ident="att.stem.vis" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that describe the properties of stemmed features; that is, chords and
            notes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
          </classes>
          <attList>
            <attDef ident="dir" usage="opt">
              <desc>Describes the direction of a stem.</desc>
              <datatype>
                <rng:ref name="data.STEMDIRECTION"/>
              </datatype>
            </attDef>
            <attDef ident="len" usage="opt">
              <desc>Encodes the stem length.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="mod" usage="opt">
              <desc>Encodes any stem "modifiers"; that is, symbols rendered on the stem, such as
                tremolo or Sprechstimme indicators.</desc>
              <datatype>
                <rng:ref name="data.STEMMODIFIER"/>
              </datatype>
            </attDef>
            <attDef ident="pos" usage="opt">
              <desc>Records the position of the stem in relation to the note head(s).</desc>
              <datatype>
                <rng:ref name="data.STEMPOSITION"/>
              </datatype>
            </attDef>
            <attDef ident="with" usage="opt">
              <desc>Contains an indication of which staff a note or chord that logically belongs to
                the current staff should be visually placed on; that is, the one above or the one
                below.</desc>
              <datatype>
                <rng:ref name="data.OTHERSTAFF"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="stem" module="MEI.shared" mode="add">
          <desc>Part of the note that indicates duration or other modifications of the note.</desc>
          <classes>
            <memberOf key="att.stem.vis"/>
            <memberOf key="model.rdgPart.critapp"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="flags"/>
            </rng:optional>
          </content>
          <constraintSpec ident="stem_must_have_note_or_chord_ancestor" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:stem">
                <sch:assert test="ancestor::mei:note or ancestor::mei:chord">A stem must have a note
                  or chord ancestor.</sch:assert>
                <sch:assert test="not(ancestor::mei:note and ancestor::mei:chord)">Stems for notes
                  in a chord must be specified as children of the chord, not the note.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <!-\- Does this constraint only apply to CMN? -\->
          <constraintSpec ident="chord_single_stem" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:chord[mei:stem]">
                <sch:assert test="not(count(mei:stem) &gt; 1)">A chord may only have one stem
                  subelement.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        <!-\- Add flags element -\->
        <classSpec ident="att.flags.vis" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture information regarding flags.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="color" usage="opt">
              <desc>The color of the flags when different from stem, note, and chord ancestors.
                Multiple values are permitted if flags have differing colors.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="pos" usage="opt">
              <desc>Position of flags relative to the stem. Multiple values are permitted if flags
                have differing positions.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.FLAGPOSITION"/>
              </datatype>
            </attDef>
            <attDef ident="shape" usage="opt">
              <desc>Captures the general shape of flags on a stem. Multiple values are permitted if
                flags have differing shapes.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.FLAGSHAPE"/>
              </datatype>
            </attDef>
            <attDef ident="fillcolor" usage="opt">
              <desc>Captures the fill color of flags when different from stem, note, and chord
                ancestors. Multiple values are permitted if flags have differing shapes.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="flags" module="MEI.shared" mode="add">
          <desc>The part of a note that, along with a stem, indicates duration.</desc>
          <classes>
            <memberOf key="att.flags.vis"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
        <!-\- Revise content of note -\->
        <elementSpec ident="note" module="MEI.shared" mode="replace">
          <desc>A single pitched event. <!-\- (Read, p. 63) -\->
          </desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.note.log"/>
            <memberOf key="att.note.vis"/>
            <memberOf key="att.note.ges"/>
            <memberOf key="att.note.anl"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <!-\-<rng:ref name="notehead"/>
                <rng:ref name="stem"/>-\->
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.verseLike"/>
                <rng:ref name="model.sylLike"/>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="note_only_one_notehead" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:note[mei:notehead]">
                <sch:assert test="count(mei:notehead) = 1">A note may only have one
                  notehead.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <gi scheme="MEI">accid</gi>, <gi scheme="MEI">artic</gi>, <gi scheme="MEI"
                >dot</gi>, and <gi scheme="MEI">stem</gi> sub-elements may be used instead of the
              note element's attributes when accid and artic represent first-class objects, e.g.,
              when they require attributes, such as <att>x</att> and <att>y</att> location
              attributes. Similarly, the <gi scheme="MEI">syl</gi> sub-element may be used instead
              of the <att>syl</att> attribute. The verse sub-element may be used to group text
              syllables by verse. The <att>colored</att> attribute may be used to indicate
              coloration. In the mensural repertoire, coloration is a temporary change in the
              underlying mensuration from perfect to imperfect. In the CMN repertoire, coloration is
              an inversion of the note head's normal rendition, that is, the note head is void when
              it would otherwise be filled and vice versa. Do not confuse this with visual
              color.</p>
          </remarks>
        </elementSpec>
        <!-\- Revise content of chord -\->
        <elementSpec ident="chord" module="MEI.shared" mode="replace">
          <desc>A simultaneous sounding of two or more notes in the same layer *with the same
            duration*.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.chord.log"/>
            <memberOf key="att.chord.vis"/>
            <memberOf key="att.chord.ges"/>
            <memberOf key="att.chord.anl"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="note"/>
                <rng:ref name="artic"/>
                <rng:ref name="stem"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>-->


        <!-- merge @dbkey and @code into att.canonical/@codedval -->
        <classSpec ident="att.coded" module="MEI.shared" type="atts" mode="delete"/>
        <classSpec ident="att.canonical" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that can be used to associate a representation such as a name or title
            with canonical information about the object being named or referenced.</desc>
          <attList>
            <attDef ident="codedval" usage="opt">
              <desc>a value that represents or identifies the element content. May serve as a
                primary key in a web-accessible database identified by the authURI attribute.</desc>
              <datatype maxOccurs="unbounded">
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="resp" module="MEI.shared" mode="replace">
          <desc>(responsibility) – A phrase describing the nature of intellectual
            responsibility.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:text/>
          </content>
          <remarks>
            <p>The name of the list from which a controlled value is taken may be recorded using the
                <att>authority</att> attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Add a generic ornam element, issue #253 -->
        <classSpec ident="att.ornam.log" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.controlevent"/>
            <memberOf key="att.duration.additive"/>
            <memberOf key="att.ornamentaccid"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.timestamp2.musical"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ornam.vis" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2.ho"/>
            <memberOf key="att.visualoffset2.to"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ornam.ges" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.duration.performed"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ornam.anl" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.common.anl"/>
          </classes>
        </classSpec>
        <elementSpec ident="ornam" module="MEI.shared" mode="add">
          <desc>A generic ornament not encoded elsewhere using more specific elements, such as
            &lt;mordent&gt;, &lt;turn&gt;, or &lt;trill&gt;.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.ornam.log"/>
            <memberOf key="att.ornam.vis"/>
            <memberOf key="att.ornam.ges"/>
            <memberOf key="att.ornam.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="ornam_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:ornam">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>


        <!-- =============================== BUG FIXES =============================== -->



        <!-- =============================== NEW FEATURES =============================== -->



      </schemaSpec>
    </body>
  </text>
</TEI>
