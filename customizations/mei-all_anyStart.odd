<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>MEI Next Release (2015?) Testing</title>
        <respStmt>
          <resp>Authored by</resp>
          <name xml:id="PR">Perry Roland</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change n="1" when="2014-12-04" who="#PR">
        <desc>Creation of the initial ODD.</desc>
      </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <!-- This file is a superset of mei-all. It contains changes to both mei-all_anyStart and mei-all.
        This file permits the validation of MEI fragments, whereas mei-all presumes a smaller set of
        possible start elements: mei, meiHead, meiCorpus, and music. Some elements (line, marker, symbol, 
        and title) explicitly reference the element in the MEI namespace, since SVG also has elements 
        with these names. -->
      <schemaSpec ident="mei"
        start="abbr accessRestrict accid acqSource actor add address addrLine altId anchoredText annot app 
        appInfo application arpeg arranger artic audience author availability avFile back barLine barre beam 
        beamSpan beatRpt bend bibl biblList biblScope body breath bTrem byline caption captureMode carrierForm 
        castGrp castItem castList cc chan change changeDesc chanPr choice chord chordDef chordMember 
        chordTable classCode classification clef clefGrp clip componentGrp composer condition contentItem 
        contents context corpName corr correction creation cue curve custos damage date del depth dimensions
        dir distributor div dot dynam edition editionStmt editor editorialDecl encodingDesc ending  
        event eventList exhibHist expan expansion expression expressionList extent f facsimile fb fermata fig 
        figDesc fileChar fileDesc fing fingGrp fingerprint flags front fTrem funder fw gap genre geogName gliss 
        graphic group grpSym hairpin halfmRpt hand handList handShift harm harpPedal head height hex history 
        identifier imprint incip incipCode incipText ineume inscription instrDef instrGrp perfRes perfResList 
        interpretation item itemList key keyAccid keySig l label language langUsage  layer layerDef lb lem lg 
        li librettist ligature mei_line list lyricist lyrics mei_marker mdiv measure mei meiCorpus meiHead 
        mensur mensuration metaText meter meterSig meterSigGrp midi mordent mRest mRpt mRpt2 mSpace multiRest 
        multiRpt music name normalization note notehead noteOff noteOn notesStmt num octave orig ossia 
        otherChar p pad part parts pb pedal perfMedium performance periodName persName pgDesc pgFoot pgFoot2 
        pgHead pgHead2 phrase physDesc physLoc physMedium plateNum playingSpeed port price prog projectDesc 
        proport provenance ptr publisher pubPlace pubStmt quote rdg recipient recording ref reg reh relatedItem 
        relation relationList rend repository resp respStmt rest restore revisionDesc role roleDesc samplingDecl 
        sb score scoreDef scoreFormat section segmentation seqNum series seriesStmt sic slur soundChan source 
        sourceDesc space specRepro sponsor stack staff staffDef staffGrp stdVals stem styleName subst supplied 
        surface syl syllable mei_symbol symbolDef symbolTable sysReq table tapeConfig td tempo term termList 
        textLang th tie timeline mei_title titlePage titleStmt tr trackConfig treatHist treatSched trill trkName 
        tuplet tupletSpan turn unclear uneume unpub useRestrict vel verse watermark when width work workDesc zone"
        prefix="mei_" ns="http://www.music-encoding.org/ns/mei">

        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.cmn"/>
        <moduleRef key="MEI.mensural"/>
        <moduleRef key="MEI.neumes"/>
        <moduleRef key="MEI.analysis"/>
        <moduleRef key="MEI.cmnOrnaments"/>
        <moduleRef key="MEI.corpus"/>
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.edittrans"/>
        <!-- Support SMuFL, issue #213 -->
        <!-- Add MEI.externalsymbols module -->
        <moduleRef key="MEI.externalsymbols"/>
        <moduleRef key="MEI.facsimile"/>
        <moduleRef key="MEI.figtable"/>
        <moduleRef key="MEI.fingering"/>
        <moduleRef key="MEI.frbr"/>
        <moduleRef key="MEI.harmony"/>
        <!-- Revise timeline and performance, issue #94 -->
        <!-- Remove MEI.linkalign module -->
        <!--<moduleRef key="MEI.linkalign"/>-->
        <moduleRef key="MEI.lyrics"/>
        <moduleRef key="MEI.midi"/>
        <moduleRef key="MEI.namesdates"/>
        <moduleRef key="MEI.performance"/>
        <moduleRef key="MEI.ptrref"/>
        <moduleRef key="MEI.tablature"/>
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.usersymbols"/>

        <!-- =============================== RESOLVE ISSUES =============================== -->

        <!-- Include SVG, issue #53 -->
        <moduleRef url="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/svg11.rng">
          <content>
            <rng:define name="mei_model.graphicLike" combine="choice">
              <rng:ref name="svg"/>
            </rng:define>
          </content>
        </moduleRef>
        <!-- Revise content model of midi element to explicitly reference marker in the MEI namespace.
          This is necessary because SVG has a marker element. -->
        <elementSpec ident="midi" module="MEI.midi" mode="replace">
          <desc>Container for elements that contain information useful when generating MIDI
            output.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.midi.log"/>
            <memberOf key="att.midi.vis"/>
            <memberOf key="att.midi.ges"/>
            <memberOf key="att.midi.anl"/>
            <memberOf key="model.midiLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="cc"/>
                <rng:ref name="chan"/>
                <rng:ref name="chanPr"/>
                <rng:ref name="cue"/>
                <rng:ref name="hex"/>
                <rng:ref name="mei_marker"/>
                <rng:ref name="metaText"/>
                <rng:ref name="noteOff"/>
                <rng:ref name="noteOn"/>
                <rng:ref name="port"/>
                <rng:ref name="prog"/>
                <rng:ref name="seqNum"/>
                <rng:ref name="trkName"/>
                <rng:ref name="vel"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <att>label</att> attribute can be used to differentiate between multiple MIDI
              data streams, e.g. quantized/unquantized, straight/swing, ornamented/as notated,
              etc.</p>
          </remarks>
        </elementSpec>

        <!-- Revise timeline and performance, issue #94 -->
        <!-- Create new datatype for begin/end and interval types -->
        <macroSpec ident="data.BETYPE" module="MEI.shared" type="dt" mode="add">
          <desc>Datatypes for values in begin, end, abstype and inttype attributes.</desc>
          <content>
            <valList type="closed">
              <valItem ident="byte">
                <desc>Bytes.</desc>
              </valItem>
              <valItem ident="smil">
                <desc>Synchronized Multimedia Integration Language.</desc>
              </valItem>
              <valItem ident="midi">
                <desc>MIDI clicks.</desc>
              </valItem>
              <valItem ident="mmc">
                <desc>MIDI machine code.</desc>
              </valItem>
              <valItem ident="mtc">
                <desc>MIDI time code.</desc>
              </valItem>
              <valItem ident="smpte-25">
                <desc>SMPTE 25 EBU.</desc>
              </valItem>
              <valItem ident="smpte-24">
                <desc>SMPTE 24 Film Sync.</desc>
              </valItem>
              <valItem ident="smpte-df30">
                <desc>SMPTE 30 Drop.</desc>
              </valItem>
              <valItem ident="smpte-ndf30">
                <desc>SMPTE 30 Non-Drop.</desc>
              </valItem>
              <valItem ident="smpte-df29.97">
                <desc>SMPTE 29.97 Drop.</desc>
              </valItem>
              <valItem ident="smpte-ndf29.97">
                <desc>SMPTE 29.97 Non-Drop.</desc>
              </valItem>
              <valItem ident="tcf">
                <desc>AES Time-code character format.</desc>
              </valItem>
              <valItem ident="time">
                <desc>ISO 24-hour time format: HH:MM:SS.ss.</desc>
              </valItem>
            </valList>
          </content>
        </macroSpec>
        <!-- Revise att.mediabounds to refer to new BETYPEs -->
        <classSpec ident="att.mediabounds" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that establish the boundaries of a media object.</desc>
          <attList>
            <attDef ident="begin" usage="opt">
              <desc>Specifies a point where the relevant content begins. A numerical value must be
                less and a time value must be earlier than that given by the end attribute.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="end" usage="opt">
              <desc>Specifies a point where the relevant content ends. If not specified, the end of
                the content is assumed to be the end point. A numerical value must be greater and a
                time value must be later than that given by the begin attribute.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="betype" usage="opt">
              <desc>Type of values used in the begin/end attributes. The begin and end attributes
                can only be interpreted meaningfully in conjunction with this attribute.</desc>
              <datatype>
                <rng:ref name="data.BETYPE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Remove reference to model.alignLike in music element -->
        <elementSpec ident="music" module="MEI.shared" mode="replace">
          <desc>Contains a single musical text of any kind, whether unitary or composite, for
            example, an etude, opera, song cycle, symphony, or anthology of piano solos.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.meiversion"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.resourceLike"/>
            </rng:zeroOrMore>
            <rng:ref name="macro.musicPart"/>
          </content>
        </elementSpec>
        <!-- Remove reference to model.alignLike in scoreDef element -->
        <elementSpec ident="scoreDef" module="MEI.shared" mode="replace">
          <desc>(score definition) – Container for score meta-information.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.scoreDef.log"/>
            <memberOf key="att.scoreDef.vis"/>
            <memberOf key="att.scoreDef.ges"/>
            <memberOf key="att.scoreDef.anl"/>
            <memberOf key="model.scoreDefLike"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="model.chordTableLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="model.symbolTableLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="model.keySigLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="model.meterSigLike"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgHead"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgHead2"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgFoot"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="pgFoot2"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="instrGrp"/>
            </rng:optional>
            <rng:choice>
              <rng:optional>
                <rng:ref name="model.staffGrpLike"/>
              </rng:optional>
            </rng:choice>
            <!-- Facilitate overlapping staff groups, issue #178 -->
            <!-- Allow grpSym in scoreDef -->
            <rng:zeroOrMore>
              <rng:ref name="grpSym"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <!-- Re-create att.alignment in MEI.performance (now that MEI.linkalign has been removed) -->
        <classSpec ident="att.alignment" module="MEI.performance" type="atts" mode="add">
          <desc>Temporal alignment attributes.</desc>
          <constraintSpec ident="check_whenTarget" scheme="isoschematron">
            <constraint>
              <sch:rule context="@when">
                <sch:assert role="warning" test="not(normalize-space(.) eq '')">@when attribute has
                  no content.</sch:assert>
                <sch:assert role="warning"
                  test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:when/@xml:id"
                  >The value in @when must correspond to the @xml:id attribute of a when
                  element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="when" usage="opt">
              <desc>Indicates the point of occurrence of this feature along a time line. Its value
                must be the ID of a <gi scheme="MEI">when</gi> element elsewhere in the
                document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Re-create when element in MEI.performance (now that MEI.linkalign has been removed) -->
        <elementSpec ident="when" module="MEI.performance" mode="add">
          <desc>Indicates a point in time either absolutely (using the absolute attribute), or
            relative to another when element (using the interval and since attributes).</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.datapointing"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="check_when_interval" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:when[@interval]">
                <sch:assert test="@since">@since must be present when @interval is
                  used.</sch:assert>
                <sch:assert
                  test="every $i in tokenize(@since, '\s+') satisfies substring($i,2)=//mei:when/@xml:id"
                  >The value in @since must correspond to the @xml:id attribute of a when
                  element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="absolute" usage="opt">
              <desc>Provides an absolute value for the time point.</desc>
              <datatype>
                <rng:text/>
              </datatype>
            </attDef>
            <attDef ident="interval" usage="opt">
              <desc>Specifies the time interval between this time point and the one designated by
                the since attribute. This attribute can only be interpreted meaningfully in
                conjunction with the inttype attribute.</desc>
              <datatype>
                <rng:data type="decimal">
                  <rng:param name="minInclusive">1</rng:param>
                </rng:data>
              </datatype>
            </attDef>
            <attDef ident="abstype" usage="opt">
              <desc>Specifies the kind of values used in the absolute attribute.</desc>
              <datatype>
                <rng:ref name="data.BETYPE"/>
              </datatype>
            </attDef>
            <attDef ident="inttype" usage="opt">
              <desc>Specifies the kind of values used in the interval attribute.</desc>
              <datatype>
                <rng:ref name="data.BETYPE"/>
              </datatype>
            </attDef>
            <!-- Enforce constraints on attribute targets, issue #226 -->
            <attDef ident="since" usage="opt">
              <desc>Identifies the reference point for determining the time of the current when
                element, which is obtained by adding the interval to the time of the reference
                point. The value should be the ID of another when element within the same parent
                element. If the since attribute is omitted and the absolute attribute is not
                specified, then the reference point is understood to be the immediately preceding
                when element.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_sinceTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@since">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@since attribute
                      has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:when/@xml:id"
                      >The value in @since must correspond to the @xml:id attribute of a when
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>data</att> attribute may be used to reference one or more features that
              occur at this point in time.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <!-- Allow <when> as child of recording; make recording a member of att.datapointing -->
        <elementSpec ident="recording" module="MEI.performance" mode="replace">
          <desc>A recorded performance.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.mediabounds"/>
            <memberOf key="att.startid"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="avFile"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="when"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="clip"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <att>startid</att> attribute may be used to hold a reference to the first feature
              occurring in this performance. This element is analogous to the <gi scheme="MEI"
                >surface</gi> element in the facsimile module.</p>
          </remarks>
        </elementSpec>
        <!-- Allow <when> as child of clip; make clip a member of att.datapointing -->
        <elementSpec ident="clip" module="MEI.performance" mode="replace">
          <desc>Defines a time segment of interest within a recording or within a digital audio or
            video file.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.mediabounds"/>
            <memberOf key="att.startid"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="avFile"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="when"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>This element is analogous to the <gi scheme="MEI">zone</gi> element in the facsimile
              module.</p>
          </remarks>
        </elementSpec>

        <!-- Reserve @rend and @style for CSS-like renditional information, issue #144 -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <classSpec ident="att.barLine.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.meterconformance.bar"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Records the appearance and usually the function of the bar line.</desc>
              <datatype>
                <rng:ref name="data.BARRENDITION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.beamrend" module="MEI.cmn" type="atts" mode="replace">
          <desc>Attributes that record the visual rendition of beams.</desc>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Captures whether a beam is "feathered" and in which direction.</desc>
              <valList type="closed">
                <valItem ident="acc">
                  <desc>(accelerando) indicates that the secondary beams get progressively closer
                    together toward the end of the beam.</desc>
                </valItem>
                <valItem ident="mixed">
                  <desc>(mixed acc and rit) for beams that are "feathered" in both
                    directions.</desc>
                </valItem>
                <valItem ident="rit">
                  <desc>(ritardando) means that the secondary beams become progressively more
                    distant toward the end of the beam.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>(normal) indicates that the secondary beams are equidistant along the course
                    of the beam.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="slope" usage="opt">
              <desc>Records the slope of the beam.</desc>
              <datatype>
                <rng:data type="decimal"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.beatRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <!-- Make member of att.altsym and att.typography -->
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="form" usage="req">
              <desc>Indicates the number of slashes required to render the appropriate beat repeat
                symbol. When a single beat is repeated, consisting of a single note or chord, it is
                indicated by a single thick, slanting slash; therefore, the value '1' should be
                used. The following values should be used when the beat is divided into even notes:
                4ths or 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5. When the beat is comprised of
                mixed duration values, the symbol is always rendered as 2 slashes and 2 dots.</desc>
              <datatype>
                <rng:ref name="data.BEATRPT.REND"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.chord.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes for chord. The slur, slur.dir, slur.rend, tie, tie.dir, and
            tie.rend attributes here are syntactic sugar for these attributes on each of the chord's
            individual notes. The values here apply to all the notes in the chord. If some notes are
            slurred or tied while others aren't, then the individual note attributes must be
            used.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Make att.chord.vis a member of att.enclosingchars -->
            <memberOf key="att.enclosingchars"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.stems"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.to"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.chord.vis.cmn"/>
          </classes>
          <attList>
            <attDef ident="cluster" usage="opt">
              <desc>Indicates a single, alternative note head should be displayed instead of
                individual note heads. The highest and lowest notes of the chord usually indicate
                the upper and lower boundaries of the cluster note head.</desc>
              <datatype>
                <rng:ref name="data.CLUSTER"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.meterSig.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <!-- Make member of att.altsym and att.typography -->
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Contains an indication of how the meter signature should be rendered.</desc>
              <valList type="closed">
                <valItem ident="num">
                  <desc>Show only the number of beats.</desc>
                </valItem>
                <valItem ident="denomsym">
                  <desc>The lower number in the meter signature is replaced by a note symbol.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>Meter signature rendered using traditional numeric values.</desc>
                </valItem>
                <valItem ident="invis">
                  <desc>Meter signature not rendered.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.note.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.coloration"/>
            <memberOf key="att.enclosingchars"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.noteheads"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.stems"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.to"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.note.vis.cmn"/>
          </classes>
        </classSpec>
        <classSpec ident="att.proport.vis" module="MEI.mensural" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.rest.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.enclosingchars"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.rest.vis.cmn"/>
            <memberOf key="att.rest.vis.mensural"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.sb.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <!-- Make member of att.altsym and att.typography -->
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Indicates whether hash marks should be rendered between systems. See Read, p.
                436, ex. 26-3.</desc>
              <valList type="closed">
                <valItem ident="hash">
                  <desc>Display hash marks between systems.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.pedal.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes. The place attribute captures the placement of the pedal
            marking with respect to the staff with which it is associated. Modern publishing
            standards require the place to be 'below'; however, for transcriptions of manuscript
            works, this attribute class allows the full range of values.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.linerend"/>
            <memberOf key="att.placement"/>
            <!-- Make member of att.altsym and att.typography -->
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Determines whether piano pedal marks should be rendered as lines or as
                terms.</desc>
              <valList type="closed">
                <valItem ident="line">
                  <desc>Continuous line with start and end positions rendered by vertical bars and
                    bounces shown by upward-pointing "blips".</desc>
                </valItem>
                <valItem ident="pedstar">
                  <desc>Pedal down and half pedal rendered with "Ped.", pedal up rendered by "*",
                    pedal "bounce" rendered with "* Ped.".</desc>
                </valItem>
                <valItem ident="altpedstar">
                  <desc>Pedal up and down indications same as with "pedstar", but bounce is rendered
                    with "Ped." only.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.bTrem.log" module="MEI.cmn" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.event"/>
            <memberOf key="att.augmentdots"/>
            <memberOf key="att.duration.musical"/>
            <memberOf key="att.numbered"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Indicates whether the tremolo is measured or unmeasured.</desc>
              <valList type="closed">
                <valItem ident="meas">
                  <desc>Measured tremolo.</desc>
                </valItem>
                <valItem ident="unmeas">
                  <desc>Unmeasured tremolo.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>

        <!-- Support SMuFL, issue #213 -->
        <classSpec ident="att.breath.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>

        <!-- Facilitate overlapping staff groups, issue #178 -->
        <elementSpec ident="grpSym" module="MEI.shared" mode="replace">
          <desc>(group symbol) – A brace or bracket used to group two or more staves of a score or
            part.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.grpSym.log"/>
            <memberOf key="att.grpSym.vis"/>
            <memberOf key="att.grpSym.ges"/>
            <memberOf key="att.grpSym.anl"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.labelLike"/>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="check_grpSym_attributes_scoreDef" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:grpSym[parent::mei:scoreDef]">
                <sch:assert test="@startid and @endid and @level">In this context, grpSym must have
                  startid, endid, and level attributes.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="check_grpSym_attributes_staffDef" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:grpSym[parent::mei:staffGrp]">
                <sch:assert test="not(@startid or @endid or @level)">In this context, grpSym must
                  not have startid, endid, or level attributes.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>This element provides an alternative to the <gi scheme="MEI">staffGrp</gi> element's
                <att>symbol</att> attribute. It may be used when exact placement or editorial
              details for the grouping symbol must be recorded.</p>
          </remarks>
        </elementSpec>
        <classSpec ident="att.grpSym.log" module="MEI.shared" type="atts" mode="replace">
          <desc>Logical domain attributes.</desc>
          <classes>
            <memberOf key="att.staffgroupingsym"/>
            <memberOf key="att.startendid"/>
          </classes>
          <attList>
            <attDef ident="level" usage="opt">
              <desc>Indicates the nesting level of staff grouping symbols.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>

        <!-- Include SVG, issue #53: add @prefix to explicitly reference title in MEI namespace -->
        <elementSpec ident="title" module="MEI.shared" mode="replace" prefix="mei_">
          <desc>Title of a bibliographic entity.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.filing"/>
            <memberOf key="att.lang"/>
            <memberOf key="model.titleLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="level" usage="opt">
              <desc>Indicates the bibliographic level for a title.</desc>
              <valList type="closed">
                <valItem ident="a">
                  <desc>Analyzed component, such as an article or chapter, within a larger
                    bibliographic entity.</desc>
                </valItem>
                <valItem ident="m">
                  <desc>Monograph.</desc>
                </valItem>
                <valItem ident="j">
                  <desc>Journal.</desc>
                </valItem>
                <valItem ident="s">
                  <desc>Series.</desc>
                </valItem>
                <valItem ident="u">
                  <desc>Unpublished (including theses and dissertations unless published by a
                    commercial press).</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="type" usage="opt">
              <desc>Characterizes the element in some sense, using any convenient classification
                scheme or typology.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
              <valList type="semi">
                <valItem ident="main">
                  <desc>Main title.</desc>
                </valItem>
                <valItem ident="subordinate">
                  <desc>Subtitle or title of part.</desc>
                </valItem>
                <valItem ident="abbreviated">
                  <desc>Abbreviated form of title.</desc>
                </valItem>
                <valItem ident="alternative">
                  <desc>Alternate title by which the item is also known.</desc>
                </valItem>
                <valItem ident="translated">
                  <desc>Translated form of title.</desc>
                </valItem>
                <valItem ident="uniform">
                  <desc>Collective title.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="subtype" usage="opt">
              <desc>Provide any sub-classification for the element, additional to that given by its
                type attribute.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>type</att> attribute may be used to classify the title according to some
              convenient typology. Sample values include: main (main title), subordinate (subtitle,
              title of part), abbreviated (abbreviated form of title), alternative (alternate title
              by which the work is also known), translated (translated form of title), uniform
              (collective title). The <att>type</att> attribute is provided for convenience in
              analysing titles and processing them according to their type; where such specialized
              processing is not necessary, there is no need for such analysis, and the entire title,
              including subtitles and any parallel titles, may be enclosed within a single <gi
                scheme="MEI">title</gi> element. Title parts may be encoded in <gi scheme="MEI"
                >title</gi> sub-elements. The name of the list from which a controlled value is
              taken may be recorded using the <att>authority</att> attribute. The number of initial
              characters (such as those constituing an article or preposition) that should not be
              used for sorting a title or name may be indicated in the <att>nonfiling</att>
              attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Support SMuFL, issue #213 -->
        <!-- Add att.extsym attribute class. -->
        <classSpec ident="att.extsym" module="MEI.externalsymbols" type="atts" mode="add">
          <desc>Attributes used to associated MEI features with corresponding glyphs in an
            externally-defined standard such as SMuFL.</desc>
          <attList>
            <attDef ident="glyphname" usage="opt">
              <desc>Glyph name.</desc>
              <datatype>
                <rng:data type="string"/>
              </datatype>
            </attDef>
            <attDef ident="glyphnum" usage="opt">
              <desc>Numeric glyph reference.</desc>
              <datatype>
                <rng:data type="string">
                  <rng:param name="pattern">#x[A-F0-9]+</rng:param>
                </rng:data>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <!-- Provide more granular and more TEI-like description of user-defined symbols -->
        <elementSpec ident="symbolDef" module="MEI.usersymbols" mode="replace">
          <desc>(symbol definition) – Declaration of an individual symbol in a symbolTable.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.coordinated"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="symName"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="symProp"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="mapping"/>
            </rng:zeroOrMore>
            <!-- Use either SVG or MEI elements to "draw" the symbol -->
            <rng:choice>
              <rng:optional>
                <rng:ref name="svg"/>
              </rng:optional>
              <rng:zeroOrMore>
                <rng:choice>
                  <rng:ref name="model.graphicprimitiveLike"/>
                  <!-- With symbol no longer in model.graphicprimitiveLike, it must be added. -->
                  <rng:ref name="mei_symbol"/>
                  <rng:ref name="graphic"/>
                </rng:choice>
              </rng:zeroOrMore>
            </rng:choice>
            <rng:zeroOrMore>
              <rng:ref name="model.annotLike"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>Like a chord table, a symbolTable may be shared between MEI instances through the use
              of an external parsed entity containing the symbolTable to be shared.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="symName" module="MEI.usersymbols" mode="add">
          <desc>(symbol name) – Contains the name of a symbol, expressed following Unicode
            conventions.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:text/>
          </content>
        </elementSpec>
        <elementSpec ident="symProp" module="MEI.usersymbols" mode="add">
          <desc>(symbol property) – Provides a name and value for some property of the parent
            symbol.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:ref name="propName"/>
            <rng:ref name="propValue"/>
          </content>
        </elementSpec>
        <elementSpec ident="propName" module="MEI.usersymbols" mode="add">
          <desc>(property name) – Name of a property of the symbol.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:text/>
          </content>
          <attList>
            <attDef ident="type" usage="req">
              <desc>Characterizes the property name.</desc>
              <valList type="closed">
                <valItem ident="unicode">
                  <desc>A registered Unicode normative or informative property name.</desc>
                </valItem>
                <valItem ident="local">
                  <desc>A locally defined name.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </elementSpec>
        <elementSpec ident="propValue" module="MEI.usersymbols" mode="add">
          <desc>(property value) – A single property value.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:text/>
          </content>
        </elementSpec>
        <elementSpec ident="mapping" module="MEI.usersymbols" mode="add">
          <desc>One or more characters which are related to the parent symbol in some respect, as
            specified by the type attribute.</desc>
          <classes>
            <memberOf key="att.common"/>
            <!--<memberOf key="att.authorized"/>
            <memberOf key="att.extsym"/>-->
            <memberOf key="att.responsibility"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <!-- Include SVG, issue #53: add @prefix to explicitly reference symbol in MEI namespace -->
                <rng:ref name="mei_symbol"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <!-- Allow the use of symbol to include music characters anywhere text is permitted. Make 
          symbol member of att.altsym. The @ref attribute is no longer necessary. Its function can 
          be performed by @altsym. Remove symbol from model.graphicprimitiveLike class and add to 
          model.textphraseLike.imited class. This last change fixes a problem that allowed symbol to 
          occur in too many places, for instance, within measure. With this change, symbol can only 
          occur if wrapped by anchoredText. -->
        <!-- Include SVG, issue #53: add @prefix to explicitly reference symbol in MEI namespace -->
        <elementSpec ident="symbol" module="MEI.usersymbols" mode="replace" prefix="mei_">
          <desc>A reference to a previously defined symbol.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.common.anl"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.scalable"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-- Make member of att.altsym and att.typography -->
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
            <memberOf key="model.textphraseLike.limited"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>The starting point, e.g. "hotspot", of the symbol may be identified in absolute
              output coordinate terms using the <att>x</att> and <att>y</att> attributes or relative
              to another element using the <att>startid</att> attribute. Attributes in the
              att.visualoffset class may be used to record horizontal, vertical, or time offsets
              from the absolute coordinates or from the location of the referenced element. The
                <att>ref</att> attribute must contain the id of a <gi scheme="MEI">symbolDef</gi>
              element. The <att>scale</att> attribute indicates that the printed output must be
              scaled by the specified percentage.</p>
          </remarks>
        </elementSpec>
        <!-- THESE CHANGES BREAK BACKWARD COMPATIBILITY! -->
        <!-- Add data.FLAGSHAPE and data.FLAGPOSITION datatypes -->
        <!-- <macroSpec ident="data.FLAGSHAPE" module="MEI" type="dt" mode="add">
          <desc>Captures the general shape of flags on a stem.</desc>
          <content>
            <valList type="closed">
              <valItem ident="straight"/>
              <valItem ident="angled"/>
              <valItem ident="curled"/>
              <valItem ident="circular"/>
              <valItem ident="rounded"/>
              <valItem ident="flared"/>
              <valItem ident="extended"/>
              <valItem ident="hooked"/>
            </valList>
          </content>
        </macroSpec>
        <macroSpec ident="data.FLAGPOSITION" module="MEI" type="dt" mode="add">
          <desc>Captures the position of flags relative to the stem.</desc>
          <content>
            <valList type="closed">
              <valItem ident="left"/>
              <valItem ident="right"/>
              <valItem ident="end"/>
            </valList>
          </content>
        </macroSpec> -->
        <!-- Add notehead element -->
        <!--<classSpec ident="att.notehead.vis" module="MEI.shared" type="atts" mode="add">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.coloration"/>
            <memberOf key="att.enclosingchars"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.stems"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.to"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="fill" usage="opt">
              <desc>Describes how/if the notehead is filled.</desc>
              <datatype>
                <rng:ref name="data.FILL"/>
              </datatype>
            </attDef>
            <attDef ident="fillcolor" usage="opt">
              <desc>Captures the fill color of a notehead if it's different from the overall note
                color.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="mod" usage="opt">
              <desc>Records any additional symbols applied to the notehead.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.NOTEHEADMODIFIER"/>
              </datatype>
            </attDef>
            <attDef ident="rotation" usage="opt">
              <desc>A positive value for rotation rotates the notehead in a counter-clockwise
                fashion, while negative values produce clockwise rotation.</desc>
              <datatype>
                <rng:ref name="data.DEGREES"/>
              </datatype>
            </attDef>
            <attDef ident="shape" usage="opt">
              <desc>Used to override the head shape normally used for the given duration.</desc>
              <datatype>
                <rng:ref name="data.HEADSHAPE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="notehead" module="MEI.shared" mode="add">
          <desc>The part of the note that, when placed on a staff, indicates pitch (and often
            duration).</desc>
          <classes>
            <memberOf key="att.notehead.vis"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
        <!-\- Add stem element -\->
        <classSpec ident="att.stem.vis" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that describe the properties of stemmed features; that is, chords and
            notes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
          </classes>
          <attList>
            <attDef ident="dir" usage="opt">
              <desc>Describes the direction of a stem.</desc>
              <datatype>
                <rng:ref name="data.STEMDIRECTION"/>
              </datatype>
            </attDef>
            <attDef ident="len" usage="opt">
              <desc>Encodes the stem length.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>
            <attDef ident="mod" usage="opt">
              <desc>Encodes any stem "modifiers"; that is, symbols rendered on the stem, such as
                tremolo or Sprechstimme indicators.</desc>
              <datatype>
                <rng:ref name="data.STEMMODIFIER"/>
              </datatype>
            </attDef>
            <attDef ident="pos" usage="opt">
              <desc>Records the position of the stem in relation to the note head(s).</desc>
              <datatype>
                <rng:ref name="data.STEMPOSITION"/>
              </datatype>
            </attDef>
            <attDef ident="with" usage="opt">
              <desc>Contains an indication of which staff a note or chord that logically belongs to
                the current staff should be visually placed on; that is, the one above or the one
                below.</desc>
              <datatype>
                <rng:ref name="data.OTHERSTAFF"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="stem" module="MEI.shared" mode="add">
          <desc>Part of the note that indicates duration or other modifications of the note.</desc>
          <classes>
            <memberOf key="att.stem.vis"/>
            <memberOf key="model.rdgPart.critapp"/>
          </classes>
          <content>
            <rng:optional>
              <rng:ref name="flags"/>
            </rng:optional>
          </content>
          <constraintSpec ident="stem_must_have_note_or_chord_ancestor" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:stem">
                <sch:assert test="ancestor::mei:note or ancestor::mei:chord">A stem must have a note
                  or chord ancestor.</sch:assert>
                <sch:assert test="not(ancestor::mei:note and ancestor::mei:chord)">Stems for notes
                  in a chord must be specified as children of the chord, not the note.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <!-\- Does this constraint only apply to CMN? -\->
          <constraintSpec ident="chord_single_stem" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:chord[mei:stem]">
                <sch:assert test="not(count(mei:stem) &gt; 1)">A chord may only have one stem
                  subelement.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        <!-\- Add flags element -\->
        <classSpec ident="att.flags.vis" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes that capture information regarding flags.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="color" usage="opt">
              <desc>The color of the flags when different from stem, note, and chord ancestors.
                Multiple values are permitted if flags have differing colors.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="pos" usage="opt">
              <desc>Position of flags relative to the stem. Multiple values are permitted if flags
                have differing positions.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.FLAGPOSITION"/>
              </datatype>
            </attDef>
            <attDef ident="shape" usage="opt">
              <desc>Captures the general shape of flags on a stem. Multiple values are permitted if
                flags have differing shapes.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.FLAGSHAPE"/>
              </datatype>
            </attDef>
            <attDef ident="fillcolor" usage="opt">
              <desc>Captures the fill color of flags when different from stem, note, and chord
                ancestors. Multiple values are permitted if flags have differing shapes.</desc>
              <datatype maxOccurs="unbounded">
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="flags" module="MEI.shared" mode="add">
          <desc>The part of a note that, along with a stem, indicates duration.</desc>
          <classes>
            <memberOf key="att.flags.vis"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>
        <!-\- Revise content of note -\->
        <elementSpec ident="note" module="MEI.shared" mode="replace">
          <desc>A single pitched event. <!-\- (Read, p. 63) -\->
          </desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.note.log"/>
            <memberOf key="att.note.vis"/>
            <memberOf key="att.note.ges"/>
            <memberOf key="att.note.anl"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <!-\-<rng:ref name="notehead"/>
                <rng:ref name="stem"/>-\->
                <rng:ref name="model.noteModifierLike"/>
                <rng:ref name="model.verseLike"/>
                <rng:ref name="model.sylLike"/>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="note_only_one_notehead" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:note[mei:notehead]">
                <sch:assert test="count(mei:notehead) = 1">A note may only have one
                  notehead.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <gi scheme="MEI">accid</gi>, <gi scheme="MEI">artic</gi>, <gi scheme="MEI"
                >dot</gi>, and <gi scheme="MEI">stem</gi> sub-elements may be used instead of the
              note element's attributes when accid and artic represent first-class objects, e.g.,
              when they require attributes, such as <att>x</att> and <att>y</att> location
              attributes. Similarly, the <gi scheme="MEI">syl</gi> sub-element may be used instead
              of the <att>syl</att> attribute. The verse sub-element may be used to group text
              syllables by verse. The <att>colored</att> attribute may be used to indicate
              coloration. In the mensural repertoire, coloration is a temporary change in the
              underlying mensuration from perfect to imperfect. In the CMN repertoire, coloration is
              an inversion of the note head's normal rendition, that is, the note head is void when
              it would otherwise be filled and vice versa. Do not confuse this with visual
              color.</p>
          </remarks>
        </elementSpec>
        <!-\- Revise content of chord -\->
        <elementSpec ident="chord" module="MEI.shared" mode="replace">
          <desc>A simultaneous sounding of two or more notes in the same layer *with the same
            duration*.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.chord.log"/>
            <memberOf key="att.chord.vis"/>
            <memberOf key="att.chord.ges"/>
            <memberOf key="att.chord.anl"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="note"/>
                <rng:ref name="artic"/>
                <rng:ref name="stem"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>-->

        <classSpec ident="att.gliss.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <!-- Make att.["musical" element].vis members of att.altsym and att.typography -->
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.xy2"/>
            <memberOf key="att.linerend"/>
          </classes>
        </classSpec>

        <!--<!-\- Add clones of SVG elements to model.graphicprimitives, issue #216 -\->
        <!-\- Add circle element -\->
        <elementSpec ident="circle" module="MEI.usersymbols" mode="add">
          <desc>A circle.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the circle relative to the 
              entity referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <!-\- @x & @y record the center of the circle -\->
            <memberOf key="att.xy"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.LINEWIDTH"/>
              </datatype>
            </attDef>
            <attDef ident="r" usage="opt">
              <desc>Radius</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the circle. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>
        <!-\- Add ellipse element -\->
        <elementSpec ident="ellipse" module="MEI.usersymbols" mode="add">
          <desc>An ellipse.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the ellipse relative to the entity 
              referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <!-\- cs, cy, rx, ry determine the location & extent of the ellipse -\->
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.LINEWIDTH"/>
              </datatype>
            </attDef>
            <attDef ident="cx" usage="opt">
              <desc>the x-axis center of the ellipse.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="cy" usage="opt">
              <desc>the y-axis center of the ellipse.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="rx" usage="req">
              <desc>the length of the ellipse's radius along the x-axis.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="ry" usage="req">
              <desc>the length of the ellipse's radius along the y-axis.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the ellipse. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>
        <!-\- Add polyline element -\->
        <elementSpec ident="polyline" module="MEI.usersymbols" mode="add">
          <desc>Defines any shape that consists of only straight lines.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.color"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the starting point of the shape relative 
              to the entity referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <!-\- the @points attribute contains the defining points of the shape -\->
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Visual form of the line.</desc>
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>
            <attDef ident="points" usage="opt">
              <desc>describes a polyline as a set of xy coordinates, e.g., 19 45, -32 118.</desc>
              <constraintSpec ident="polylinepoints_constraint" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:polyline[@points]">
                    <sch:assert test="matches(normalize-space(@points),
                      '^[0-9]+(\.[0-9]+)?\s*,\s*([0-9]+(\.[0-9]+)?)((\s+[0-9]+(\.[0-9]+)?\s*,\s*[0-9]+(\.[0-9]+)?)){1,}$')"
                      >The points attribute must contain at least two comma-separated xy
                      coordinates.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="width" usage="opt">
              <desc>Width of the line.</desc>
              <datatype>
                <rng:ref name="data.LINEWIDTH"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>
        <!-\- Add a polygon element -\->
        <elementSpec ident="polygon" module="MEI.usersymbols" mode="add">
          <desc>Defines any shape that has at least three sides.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.color"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startid"/>
            <memberOf key="att.typed"/>
            <!-\- att.visualoffset attrs place the polygon relative to the entity referenced in @startid -\->
            <memberOf key="att.visualoffset"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <!-\- the @points attribute contains the defining points of the shape -\->
            <attDef ident="points" usage="opt">
              <desc>describes a polyline as a set of xy coordinates, e.g., 19 45, -32 118.</desc>
              <constraintSpec ident="polygonpoints_constraint" scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:polygon[@points]">
                    <sch:assert test="matches(normalize-space(@points),
                      '^[0-9]+(\.[0-9]+)?\s*,\s*([0-9]+(\.[0-9]+)?)((\s+[0-9]+(\.[0-9]+)?\s*,\s*[0-9]+(\.[0-9]+)?)){2,}$')"
                      >The points attribute must contain at least three comma-separated xy
                      coordinates.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.LINEWIDTH"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the polygon. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>
        <!-\- DO NOT add rectangle element as it causes problem interaction between att.coordinated and att. -\->
        <!-\-<elementSpec ident="rectangle" module="MEI.usersymbols" mode="add">
          <desc>A rectangle.</desc>
          <classes>
            <memberOf key="att.common.anl"/>
            <memberOf key="att.color"/>
            <memberOf key="att.common"/>
            <!-\\- attrs in att.coordinated capture the defining of the rectangle -\\->
            <memberOf key="att.coordinated"/>
            <!-\\- requires new att.dimensions class -\\->
            <memberOf key="att.dimensions"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2"/>
            <memberOf key="model.graphicprimitiveLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <attList>
            <!-\\-<attDef ident="form" usage="opt">
              <desc>Visual form of the line.</desc>
              <datatype>
                <rng:ref name="data.LINEFORM"/>
              </datatype>
            </attDef>-\\->
            <!-\\- @length implies we know the direction of the vector which we 
              can't know without establishing an end point, which in turn makes
              @length redundant.
            -\\->
            <!-\\-<attDef ident="length" usage="opt">
              <desc>Length of the line.</desc>
              <datatype>
                <rng:ref name="data.MEASUREMENT"/>
              </datatype>
            </attDef>-\\->
            <attDef ident="lcolor" usage="opt">
              <desc>Color of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.COLOR"/>
              </datatype>
            </attDef>
            <attDef ident="lwidth" usage="opt">
              <desc>Width of the outer boundary.</desc>
              <datatype>
                <rng:ref name="data.LINEWIDTH"/>
              </datatype>
            </attDef>
            <attDef ident="rx" usage="opt">
              <desc>the x-axis radius of a rectangle with rounded corners.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
            <attDef ident="ry" usage="opt">
              <desc>the y-axis radius of a rectangle with rounded corners.</desc>
              <datatype>
                <rng:data type="nonNegativeInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The <att>color</att> attribute records the fill color of the rectangle. Use
                <att>lcolor</att> to capture the color of its boundary line.</p>
          </remarks>
        </elementSpec>-\->                
        -->

        <!-- Revise usage of <head>: allow multiple head elements, allow head in more places, issue #221 -->
        <!-- add schematron to disallow mixing of structured and unstructured text -->
        <!-- ADDED SCHEMATRON MAY BREAK BACKWARD COMPATIBILITY! -->
        <elementSpec ident="annot" module="MEI.shared" mode="replace">
          <desc>(annotation) – Provides a short statement explaining the text or indicating the
            basis for an assertion.</desc>
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.source"/>
            <memberOf key="att.annot.log"/>
            <memberOf key="att.annot.vis"/>
            <memberOf key="att.annot.ges"/>
            <memberOf key="att.annot.anl"/>
            <memberOf key="att.plist"/>
            <memberOf key="att.responsibility"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.annotLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="model.headLike"/>
                <rng:ref name="model.textcomponentLike"/>
                <rng:ref name="model.textphraseLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="annot_content_constraint" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:annot[mei:head or mei:lg or mei:p or mei:quote or mei:table]">
                <sch:assert test="not(mei:head[preceding-sibling::*[not(local-name()='head')]])"
                  >Head elements can only occur at the start of annot.</sch:assert>
                <sch:assert test="not(*[../text()[normalize-space()]])">Mixed content is not allowed
                  when head, lg, p, quote, or table is used.</sch:assert>
                <sch:assert
                  test="not(*[not(local-name() eq 'biblList' or local-name() eq 'castList' or local-name() eq 'head' or 
                  local-name() eq 'lg' or local-name() eq 'list' or local-name() eq 'p' or local-name() eq 'quote' or 
                  local-name() eq 'table')])"
                  >Unstructured text not allowed when head, lg, p, quote, or table elements are
                  used.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <remarks>
            <p>The <gi scheme="MEI">annot</gi> element can be used for both general comments and for
              annotations of the musical text. It provides a way to group participating *events*
              and/or *control events*, for example, the notes that form a descending bass line, and
              provide a label for and comment regarding the group. Participating entities may be
              identified in the <att>plist</att> attribute. An editorial or analytical comment or
              observation may be included directly within the <gi scheme="MEI">annot</gi> element.
              The starting point of the annotation may be indicated by either a <att>tstamp</att>,
                <att>tstamp.ges</att>, <att>tstamp.real</att> or <att>startid</att> attribute, while
              the ending point may be recorded by either a <att>dur</att>, <att>dur.ges</att> or
                <att>endid</att> attribute. The <att>resp</att> attribute records the editor(s)
              responsible for identifying or creating the annotation.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="contents" module="MEI.header" mode="replace">
          <desc>Description of the material contained within a resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.pointing"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:choice>
              <rng:optional>
                <rng:ref name="model.pLike"/>
              </rng:optional>
              <rng:oneOrMore>
                <rng:optional>
                  <rng:ref name="model.labelLike"/>
                </rng:optional>
                <rng:ref name="contentItem"/>
              </rng:oneOrMore>
            </rng:choice>
          </content>
          <exemplum>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:space="preserve">
<contents>
  <p>A suitable tone ; Left hand colouring ; Rhythm and accent ; Tempo ; 
    Flexibility ; Ornaments</p>
</contents>
            </egXML>
          </exemplum>
          <exemplum>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" xml:space="preserve">
<contents>
  <head>Contents</head>
  <label>1.</label><contentItem>Sonata in D major, op. V, no. 1 /
     Corelli</contentItem>
  <label>2.</label><contentItem>Sonata in G minor / Purcell (with Robert Donington,
     gamba)</contentItem>
  <label>3.</label><contentItem>Forlane from Concert royal no. 3 /
     Couperin</contentItem>
</contents>
            </egXML>
          </exemplum>
          <exemplum>
            <egXML xmlns="http://www.tei-c.org/ns/Examples" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve">
<contents target="http://www.contentProvider.org/toc/toc01.html"/>
            </egXML>
          </exemplum>
        </elementSpec>
        <elementSpec ident="event" module="MEI.header" mode="replace">
          <desc>Contains a description of an event, including the dates and locations of its
            occurrence and prominent participants.</desc>
          <!-- This model allows for both semi-structured (using only model.eventPart members) and
            "free" descriptions (using p, table, list, and castList) as well as a mixture of
            the two approaches. -->
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.calendared"/>
            <memberOf key="att.common"/>
            <memberOf key="att.datable"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.eventPart"/>
                <rng:ref name="model.pLike"/>
                <rng:ref name="model.tableLike"/>
                <rng:ref name="list"/>
                <rng:ref name="castList"/>
              </rng:choice>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="history" module="MEI.header" mode="replace">
          <desc>Provides a container for information about the creation and history of a
            resource.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="creation"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="eventList"/>
                <rng:ref name="p"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        <elementSpec ident="notesStmt" module="MEI.header" mode="replace">
          <desc>(notes statement)– Collects any notes providing information about a text additional
            to that recorded in other parts of the bibliographic description.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="model.annotLike"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="sourceDesc" module="MEI.header" mode="replace">
          <desc>(source description) – A container for the descriptions of the source(s) used in the
            creation of the electronic file.</desc>
          <classes>
            <memberOf key="att.common"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:oneOrMore>
              <rng:ref name="source"/>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is recommended where the MEI file is a transcription of existing music,
              but is not required when the data is originally created in MEI form.</p>
          </remarks>
        </elementSpec>

        <!-- instrumentation and its subelements should allow att.edit, issue #227 -->
        <!-- rename instrVoice and instrVoiceGrp to perfRes (performance resource) and
          perfResList, respectively. Delete ensemble and instrumentation and ensemble, 
          allowing the content of the former instrVoiceGrp to occur directly within
          perfMedium. Disallow text content within perfResList. In addition, make former
          members of att.coded members of att.canonical instead. -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <elementSpec ident="instrumentation" module="MEI.header" mode="delete"/>
        <elementSpec ident="ensemble" module="MEI.header" mode="delete"/>
        <elementSpec ident="instrVoice" module="MEI.header" mode="delete"/>
        <elementSpec ident="instrVoiceGrp" module="MEI.header" mode="delete"/>
        <elementSpec ident="perfResList" module="MEI.header" mode="add">
          <desc>Several instrumental or vocal resources treated as a group.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="perfRes"/>
                <rng:ref name="perfResList"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="count" usage="opt">
              <desc>Indicates the number of performers.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
          </attList>
          <remarks>
            <p>The function of instrumentalists or vocalists is represented by the choice of <gi
                scheme="MEI">perfRes</gi> and <gi scheme="MEI">perfResList</gi> child elements.
              Arrangements are coded for the medium of the work being described, not for the
              original medium.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="perfRes" module="MEI.header" mode="add">
          <desc>(performance resource) – Name of an instrument on which a performer plays, a
            performer's voice range, or a standard performing ensemble designation.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.edit"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:text/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="count" usage="opt">
              <desc>Indicates the number of performers.</desc>
              <datatype>
                <rng:data type="positiveInteger"/>
              </datatype>
            </attDef>
            <attDef ident="solo" usage="opt">
              <desc>Marks this instrument or vocal part as a soloist. Do not use this attribute for
                a solo instrument which is not accompanied.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>
        <!-- Replace references to instrVoice and instrVoiceGrp in castItem and incip elements -->
        <elementSpec ident="castItem" module="MEI.shared" mode="replace">
          <desc>Contains a single entry within a cast list, describing either a single role or a
            list of non-speaking roles.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:oneOrMore>
              <rng:choice>
                <rng:text/>
                <rng:ref name="role"/>
                <rng:ref name="roleDesc"/>
                <rng:ref name="actor"/>
                <rng:ref name="perfRes"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="incip" module="MEI.shared" mode="replace">
          <desc>(incipit) – The opening music and/or words of a composition.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.incipLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="tempo"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="role"/>
            </rng:optional>
            <rng:optional>
              <rng:choice>
                <rng:ref name="clef"/>
                <rng:ref name="clefGrp"/>
              </rng:choice>
            </rng:optional>
            <rng:optional>
              <rng:choice>
                <rng:ref name="perfRes"/>
                <rng:ref name="perfResList"/>
              </rng:choice>
            </rng:optional>
            <rng:optional>
              <rng:ref name="key"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="meter"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="mensuration"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="incipCode"/>
                <rng:ref name="incipText"/>
                <rng:ref name="model.scoreLike"/>
                <rng:ref name="model.graphicLike"/>
                <rng:ref name="annot"/>
                <!-- 
              Can XSLT be used here to "select" an incipit from the already-encoded MEI transcription in the music element?
              <rng:ref name="macro.XSLT"/> 
            -->
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p>The <gi scheme="MEI">incipText</gi> element may be used to capture a text incipit,
              while <gi scheme="MEI">score</gi> is available to provide an MEI-encoded musical
              incipit. Images of an incipit may be referenced using the <gi scheme="MEI"
                >graphic</gi> element. An incipit encoded in a text format other than MEI may be
              placed in the <gi scheme="MEI">incipCode</gi> element.</p>
          </remarks>
        </elementSpec>
        <!-- Allow perfResList within perfMedium -->
        <elementSpec ident="perfMedium" module="MEI.header" mode="replace">
          <desc>(performance medium) – Indicates the number and character of the performing forces
            used in a musical composition.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.authorized"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.headLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="castList"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="perfResList"/>
            </rng:optional>
            <!-- Add <annot> -->
            <rng:zeroOrMore>
              <rng:ref name="model.annotLike"/>
            </rng:zeroOrMore>
          </content>
          <remarks>
            <p> Arrangements are coded for the medium of the work being described, not for the
              original medium.</p>
          </remarks>
        </elementSpec>

        <!-- merge @dbkey and @code into att.canonical/@codedval -->
        <classSpec ident="att.coded" module="MEI.shared" type="atts" mode="delete"/>
        <classSpec ident="att.canonical" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that can be used to associate a representation such as a name or title
            with canonical information about the object being named or referenced.</desc>
          <attList>
            <attDef ident="codedval" usage="opt">
              <desc>a value that represents or identifies the element content. May serve as a
                primary key in a web-accessible database identified by the authURI attribute.</desc>
              <datatype maxOccurs="unbounded">
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <elementSpec ident="resp" module="MEI.shared" mode="replace">
          <desc>(responsibility) – A phrase describing the nature of intellectual
            responsibility.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.authorized"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.canonical"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.lang"/>
          </classes>
          <content>
            <rng:text/>
          </content>
          <remarks>
            <p>The name of the list from which a controlled value is taken may be recorded using the
                <att>authority</att> attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on an element in the Text Encoding Initiative (TEI)
              standard.</p>
          </remarks>
        </elementSpec>

        <!-- Move att.altsym to MEI.usersymbols -->
        <classSpec ident="att.altsym" module="MEI.usersymbols" type="atts" mode="replace">
          <desc>Attributes supplying pointers to user-defined symbols.</desc>
          <attList>
            <attDef ident="altsym" usage="opt">
              <desc>Provides a way of pointing to a user-defined symbol. It must contain an ID of a
                &lt;symbolDef&gt; element elsewhere in the document.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
              <constraintSpec ident="check_altsymTarget" scheme="isoschematron">
                <constraint>
                  <sch:rule context="@altsym">
                    <sch:assert role="warning" test="not(normalize-space(.) eq '')">@altsym
                      attribute has no content.</sch:assert>
                    <sch:assert role="warning"
                      test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:symbolDef/@xml:id"
                      >The value in @altsym must correspond to the @xml:id attribute of a symbolDef
                      element.</sch:assert>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>

        <elementSpec ident="expression" module="MEI.frbr" mode="replace">
          <desc>Intellectual or artistic realization of a work.</desc>
          <classes>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="model.expressionLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.identifierLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="titleStmt"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="model.workIdent"/>
            </rng:zeroOrMore>
            <!-- Allow otherChar to be repeatable -->
            <rng:zeroOrMore>
              <rng:ref name="otherChar"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="history"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="langUsage"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="perfMedium"/>
            </rng:optional>
            <!-- Allow extent to be repeatable -->
            <rng:zeroOrMore>
              <rng:ref name="extent"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="scoreFormat"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="contents"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="context"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="notesStmt"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="classification"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="componentGrp"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="relationList"/>
            </rng:optional>
          </content>
        </elementSpec>
        <!-- Do some re-ordering to better align with work and expression content. -->
        <!-- THIS CHANGE BREAKS BACKWARD COMPATIBILITY! -->
        <elementSpec ident="source" module="MEI.header" mode="replace">
          <desc>A bibliographic description of a source used in the creation of the electronic
            file.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.bibl"/>
            <memberOf key="att.datapointing"/>
            <memberOf key="att.pointing"/>
            <memberOf key="model.manifestationLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:ref name="model.identifierLike"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="titleStmt"/>
            </rng:optional>
            <rng:ref name="macro.bibldescPart"/>
            <rng:optional>
              <rng:ref name="langUsage"/>
            </rng:optional>
            <!-- Allow repeatable <perfMedium> within <source>? -->
            <!--<rng:zeroOrMore>
              <rng:ref name="perfMedium"/>
            </rng:zeroOrMore>-->
            <rng:optional>
              <rng:ref name="contents"/>
            </rng:optional>
            <rng:zeroOrMore>
              <rng:ref name="biblList"/>
            </rng:zeroOrMore>
            <rng:optional>
              <rng:ref name="notesStmt"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="classification"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="itemList"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="componentGrp"/>
            </rng:optional>
            <rng:optional>
              <rng:ref name="relationList"/>
            </rng:optional>
          </content>
          <remarks>
            <p>Multiple <gi scheme="MEI">physDesc</gi> sub-elements may be used to describe the
              physically separate parts of a single source. The <att>data</att> attribute may be
              used to reference one or more features that occur in this particular source. A URI
              referencing a description of the related item may be placed in the <att>target</att>
              attribute.</p>
          </remarks>
          <remarks>
            <p>This element is modelled on elements in the Text Encoding Initiative (TEI) and
              Encoded Archival Description (EAD) standards.</p>
          </remarks>
        </elementSpec>

        <!-- Make att.["musical" element].vis members of att.altsym and att.typography -->
        <classSpec ident="att.accid.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.enclosingchars"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.vo"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.accid.vis.mensural"/>
          </classes>
        </classSpec>
        <classSpec ident="att.artic.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.enclosingchars"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.arpeg.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="arrow" usage="opt">
              <desc>Indicates if an arrowhead is to be drawn as part of the arpeggiation
                symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.clef.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.custos.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.dot.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.visualoffset.vo"/>
            <memberOf key="att.xy"/>
            <memberOf key="att.dot.vis.mensural"/>
          </classes>
        </classSpec>
        <classSpec ident="att.fermata.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Describes the visual appearance of the fermata; that is, whether it occurs as
                upright or inverted.</desc>
              <valList type="closed">
                <valItem ident="inv">
                  <desc>Inverted, i.e., curve or bracket below the dot.</desc>
                </valItem>
                <valItem ident="norm">
                  <desc>Upright; i.e., curve or bracket above the dot.</desc>
                </valItem>
              </valList>
            </attDef>
            <attDef ident="shape" usage="opt">
              <desc>Describes the visual appearance of the fermata; that is, whether it has a
                curved, square, or angular shape.</desc>
              <valList type="closed">
                <valItem ident="curved">
                  <desc>A curve above or below the dot.</desc>
                </valItem>
                <valItem ident="square">
                  <desc>A bracket above or below the dot.</desc>
                </valItem>
                <valItem ident="angular">
                  <desc>A triangle above or below the dot.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.grpSym.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.halfmRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
          </classes>
        </classSpec>
        <classSpec ident="att.harpPedal.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ineume.vis" module="MEI.neumes" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.keyAccid.vis" module="MEI.shared" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.enclosingchars"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mensur.vis" module="MEI.mensural" type="atts" mode="replace">
          <desc>Visual domain attributes. These attributes describe the physical appearance of the
            mensuration sign/time signature of mensural notation.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="form" usage="opt">
              <desc>Indicates whether the base symbol is written vertically or horizontally.</desc>
              <valList type="closed">
                <valItem ident="horizontal"/>
                <valItem ident="vertical"/>
              </valList>
            </attDef>
            <attDef ident="orient" usage="opt">
              <desc>Describes the rotation or reflection of the base symbol.</desc>
              <datatype>
                <rng:ref name="data.ORIENTATION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.mordent.vis" module="MEI.cmnOrnaments" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mRest.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.cutout"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.mRpt2.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <memberOf key="att.expandable"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.multiRest.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="att.typography"/>
          </classes>
          <attList>
            <attDef ident="block" usage="opt">
              <desc>When the block attribute is used, combinations of the 1, 2, and 4 measure rest
                forms (Read, p. 104) should be rendered instead of the modern form or an alternative
                symbol.</desc>
              <datatype>
                <rng:ref name="data.BOOLEAN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        <classSpec ident="att.multiRpt.vis" module="MEI.cmn" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.expandable"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
          </classes>
        </classSpec>
        <classSpec ident="att.trill.vis" module="MEI.cmnOrnaments" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Make att.trill.vis member of att.extender -->
            <memberOf key="att.extender"/>
            <memberOf key="att.placement"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2.ho"/>
            <memberOf key="att.visualoffset2.to"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.turn.vis" module="MEI.cmnOrnaments" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.uneume.vis" module="MEI.neumes" type="atts" mode="replace">
          <desc>Visual domain attributes.</desc>
          <classes>
            <memberOf key="att.altsym"/>
            <memberOf key="att.color"/>
            <!-- Support SMuFL, issue #213 -->
            <!-- Make member of att.extsym -->
            <memberOf key="att.extsym"/>
            <memberOf key="att.relativesize"/>
            <memberOf key="att.staffloc"/>
            <memberOf key="att.typography"/>
            <memberOf key="att.visibility"/>
            <memberOf key="att.visualoffset.ho"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <!-- Remove reference to att.typography in accid and artic; this should've been done 
          using att.(accid|artic).vis anyway -->
        <elementSpec ident="accid" module="MEI.shared" mode="replace">
          <desc>(accidental) – Records a temporary alteration to the pitch of a note.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.accid.log"/>
            <memberOf key="att.accid.vis"/>
            <memberOf key="att.accid.ges"/>
            <memberOf key="att.accid.anl"/>
            <memberOf key="model.noteModifierLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>An accidental may raise a pitch by one or two semitones or it may cancel a previous
              accidental or part of a key signature. This element provides an alternative to the
                <att>accid</att> and <att>accid.ges</att> attributes on the <gi scheme="MEI"
                >note</gi> element. The element may be used when specific display info, such as size
              or color, needs to be recorded for the accidental or when multiple accidentals occur
              on a single note. The <att>func</att> attribute can be used to differentiate between
              the accidental's functions, such as 'cautionary' or 'editorial'.</p>
          </remarks>
        </elementSpec>
        <elementSpec ident="artic" module="MEI.shared" mode="replace">
          <desc>(articulation) – An indication of how to play a note or chord.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.artic.log"/>
            <memberOf key="att.artic.vis"/>
            <memberOf key="att.artic.ges"/>
            <memberOf key="att.artic.anl"/>
            <memberOf key="model.noteModifierLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <remarks>
            <p>Articulations typically affect duration, such as staccato marks, or the force of
              attack, such as accents. This element provides an alternative to the <att>artic</att>
              attribute on the <gi scheme="MEI">note</gi> and <gi scheme="MEI">chord</gi> elements.
              It may be used when specific display info, such as size or color, needs to be recorded
              for the articulation or when multiple articulation marks occur on a single note or
              chord.</p>
          </remarks>
        </elementSpec>

        <!-- Add a generic ornam element, issue #253 -->
        <classSpec ident="att.ornam.log" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.controlevent"/>
            <memberOf key="att.duration.additive"/>
            <memberOf key="att.ornamentaccid"/>
            <memberOf key="att.startendid"/>
            <memberOf key="att.timestamp2.musical"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ornam.vis" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.color"/>
            <memberOf key="att.placement"/>
            <memberOf key="att.visualoffset"/>
            <memberOf key="att.visualoffset2.ho"/>
            <memberOf key="att.visualoffset2.to"/>
            <memberOf key="att.xy"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ornam.ges" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.duration.performed"/>
          </classes>
        </classSpec>
        <classSpec ident="att.ornam.anl" module="MEI.shared" type="atts" mode="add">
          <classes>
            <memberOf key="att.common.anl"/>
          </classes>
        </classSpec>
        <elementSpec ident="ornam" module="MEI.shared" mode="add">
          <desc>A generic ornament not encoded elsewhere using more specific elements, such as
            &lt;mordent&gt;, &lt;turn&gt;, or &lt;trill&gt;.</desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.ornam.log"/>
            <memberOf key="att.ornam.vis"/>
            <memberOf key="att.ornam.ges"/>
            <memberOf key="att.ornam.anl"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.controleventLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
          <constraintSpec ident="ornam_start-type_attributes_required" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:ornam">
                <sch:assert test="@startid or @tstamp or @tstamp.ges or @tstamp.real">Must have one
                  of the attributes: startid, tstamp, tstamp.ges or tstamp.real</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>


        <!-- =============================== BUG FIXES =============================== -->



        <!-- =============================== NEW FEATURES =============================== -->



      </schemaSpec>
    </body>
  </text>
</TEI>
